#map = affine_map<(d0, d1) -> (d0, d1)>
#map1 = affine_map<(d0, d1, d2) -> (d0, d2)>
#map2 = affine_map<(d0, d1, d2) -> (d0, d1)>
#map3 = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
#map4 = affine_map<(d0, d1, d2, d3) -> (d0, d1)>
#map5 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map6 = affine_map<(d0, d1) -> (d1)>
#map7 = affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>
#map8 = affine_map<(d0, d1, d2, d3) -> (d0, d3, d1, d2)>
#map9 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>
#map10 = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3)>
#map11 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>
#map12 = affine_map<(d0, d1, d2) -> (d1, d2, d0)>
module attributes {tf_saved_model.semantics} {
  func.func @main(%arg0: tensor<1x384xi32> {iree.identifier = "serving_default_input_word_ids:0", tf_saved_model.index_path = ["input_word_ids"]}, %arg1: tensor<1x384xi32> {iree.identifier = "serving_default_input_type_ids:0", tf_saved_model.index_path = ["input_type_ids"]}, %arg2: tensor<1x384xi32> {iree.identifier = "serving_default_input_mask:0", tf_saved_model.index_path = ["input_mask"]}) -> (tensor<1x384xf32> {iree.identifier = "StatefulPartitionedCall:0", tf_saved_model.index_path = ["end_positions"]}, tensor<1x384xf32> {iree.identifier = "StatefulPartitionedCall:1", tf_saved_model.index_path = ["start_positions"]}) attributes {tf_saved_model.exported_names = ["serving_default"]} {
    %cst = arith.constant dense<1.000000e+00> : tensor<1x128xf32>
    %cst_0 = arith.constant dense<5.000000e-01> : tensor<1x128xf32>
    %cst_1 = arith.constant dense<0.333333343> : tensor<1x128xf32>
    %cst_2 = arith.constant dense<2.500000e-01> : tensor<1x128xf32>
    %cst_3 = arith.constant dense<2.000000e-01> : tensor<1x128xf32>
    %cst_4 = arith.constant dense<0.166666672> : tensor<1x128xf32>
    %cst_5 = arith.constant dense<0.142857149> : tensor<1x128xf32>
    %cst_6 = arith.constant dense<1.250000e-01> : tensor<1x128xf32>
    %cst_7 = arith.constant dense<0.111111112> : tensor<1x512xf32>
    %cst_8 = arith.constant dense<1.000000e-01> : tensor<1x512xf32>
    %cst_9 = arith.constant dense<0.0909090936> : tensor<1x128xf32>
    %cst_10 = arith.constant dense<0.0833333358> : tensor<1x128xf32>
    %cst_11 = arith.constant dense<0.0769230798> : tensor<1x128xf32>
    %cst_12 = arith.constant dense<0.0714285746> : tensor<1x128xf32>
    %cst_13 = arith.constant dense<0.0666666701> : tensor<1x128xf32>
    %cst_14 = arith.constant dense<6.250000e-02> : tensor<1x128xf32>
    %cst_15 = arith.constant dense<0.0588235296> : tensor<1x128xf32>
    %cst_16 = arith.constant dense<0.055555556> : tensor<1x128xf32>
    %cst_17 = arith.constant dense<0.0526315793> : tensor<1x512xf32>
    %cst_18 = arith.constant dense<5.000000e-02> : tensor<1x512xf32>
    %cst_19 = arith.constant dense<0.0476190485> : tensor<1x128xf32>
    %cst_20 = arith.constant dense<0.0454545468> : tensor<1x128xf32>
    %cst_21 = arith.constant dense<0.0434782617> : tensor<1x128xf32>
    %cst_22 = arith.constant dense<0.0416666679> : tensor<1x128xf32>
    %cst_23 = arith.constant dense<4.000000e-02> : tensor<1x128xf32>
    %cst_24 = arith.constant dense<0.0384615399> : tensor<1x128xf32>
    %cst_25 = arith.constant dense<0.0370370373> : tensor<1x128xf32>
    %cst_26 = arith.constant dense<0.0357142873> : tensor<1x128xf32>
    %cst_27 = arith.constant dense<0.0344827585> : tensor<1x512xf32>
    %cst_28 = arith.constant dense<0.0333333351> : tensor<1x512xf32>
    %cst_29 = arith.constant dense<0.0322580636> : tensor<1x128xf32>
    %cst_30 = arith.constant dense<3.125000e-02> : tensor<1x128xf32>
    %cst_31 = arith.constant dense<0.0303030312> : tensor<1x128xf32>
    %cst_32 = arith.constant dense<0.0294117648> : tensor<1x128xf32>
    %cst_33 = arith.constant dense<0.0285714287> : tensor<1x128xf32>
    %cst_34 = arith.constant dense<0.027777778> : tensor<1x128xf32>
    %cst_35 = arith.constant dense<0.0270270277> : tensor<1x128xf32>
    %cst_36 = arith.constant dense<0.0263157897> : tensor<1x128xf32>
    %cst_37 = arith.constant dense<0.025641026> : tensor<1x512xf32>
    %cst_38 = arith.constant dense<2.500000e-02> : tensor<1x512xf32>
    %cst_39 = arith.constant dense<0.024390243> : tensor<1x128xf32>
    %cst_40 = arith.constant dense<0.0238095243> : tensor<1x128xf32>
    %cst_41 = arith.constant dense<0.0232558139> : tensor<1x128xf32>
    %cst_42 = arith.constant dense<0.0227272734> : tensor<1x128xf32>
    %cst_43 = arith.constant dense<0.0222222228> : tensor<1x128xf32>
    %cst_44 = arith.constant dense<0.0217391308> : tensor<1x128xf32>
    %cst_45 = arith.constant dense<0.0212765951> : tensor<1x128xf32>
    %cst_46 = arith.constant dense<0.020833334> : tensor<1x128xf32>
    %cst_47 = arith.constant dense<0.0204081628> : tensor<1x512xf32>
    %cst_48 = arith.constant dense<2.000000e-02> : tensor<1x512xf32>
    %cst_49 = arith.constant dense<0.0196078438> : tensor<1x128xf32>
    %cst_50 = arith.constant dense<0.0192307699> : tensor<1x128xf32>
    %cst_51 = arith.constant dense<0.0188679248> : tensor<1x128xf32>
    %cst_52 = arith.constant dense<0.0185185187> : tensor<1x128xf32>
    %cst_53 = arith.constant dense<0.0181818176> : tensor<1x128xf32>
    %cst_54 = arith.constant dense<0.0178571437> : tensor<1x128xf32>
    %cst_55 = arith.constant dense<0.0175438598> : tensor<1x128xf32>
    %cst_56 = arith.constant dense<0.0172413792> : tensor<1x128xf32>
    %cst_57 = arith.constant dense<0.0169491526> : tensor<1x512xf32>
    %cst_58 = arith.constant dense<0.0166666675> : tensor<1x512xf32>
    %cst_59 = arith.constant dense<0.0163934417> : tensor<1x128xf32>
    %cst_60 = arith.constant dense<0.0161290318> : tensor<1x128xf32>
    %cst_61 = arith.constant dense<0.0158730168> : tensor<1x128xf32>
    %cst_62 = arith.constant dense<1.562500e-02> : tensor<1x128xf32>
    %cst_63 = arith.constant dense<0.0153846154> : tensor<1x128xf32>
    %cst_64 = arith.constant dense<0.0151515156> : tensor<1x128xf32>
    %cst_65 = arith.constant dense<0.0149253728> : tensor<1x128xf32>
    %cst_66 = arith.constant dense<0.0147058824> : tensor<1x128xf32>
    %cst_67 = arith.constant dense<0.0144927539> : tensor<1x512xf32>
    %cst_68 = arith.constant dense<0.0142857144> : tensor<1x512xf32>
    %cst_69 = arith.constant dense<0.0140845068> : tensor<1x128xf32>
    %cst_70 = arith.constant dense<0.013888889> : tensor<1x128xf32>
    %cst_71 = arith.constant dense<0.01369863> : tensor<1x128xf32>
    %cst_72 = arith.constant dense<0.0135135138> : tensor<1x128xf32>
    %cst_73 = arith.constant dense<0.0133333337> : tensor<1x128xf32>
    %cst_74 = arith.constant dense<0.0131578948> : tensor<1x128xf32>
    %cst_75 = arith.constant dense<0.012987013> : tensor<1x128xf32>
    %cst_76 = arith.constant dense<0.012820513> : tensor<1x128xf32>
    %cst_77 = arith.constant dense<0.0126582282> : tensor<1x512xf32>
    %cst_78 = arith.constant dense<1.250000e-02> : tensor<1x512xf32>
    %cst_79 = arith.constant dense<0.0123456791> : tensor<1x128xf32>
    %cst_80 = arith.constant dense<0.0121951215> : tensor<1x128xf32>
    %cst_81 = arith.constant dense<0.0120481923> : tensor<1x128xf32>
    %cst_82 = arith.constant dense<0.0119047621> : tensor<1x128xf32>
    %cst_83 = arith.constant dense<0.0117647061> : tensor<1x128xf32>
    %cst_84 = arith.constant dense<0.0116279069> : tensor<1x128xf32>
    %cst_85 = arith.constant dense<0.0114942528> : tensor<1x128xf32>
    %cst_86 = arith.constant dense<0.0113636367> : tensor<1x128xf32>
    %cst_87 = arith.constant dense<0.0112359552> : tensor<1x512xf32>
    %cst_88 = arith.constant dense<0.0111111114> : tensor<1x512xf32>
    %cst_89 = arith.constant dense<0.0109890113> : tensor<1x128xf32>
    %cst_90 = arith.constant dense<0.0108695654> : tensor<1x128xf32>
    %cst_91 = arith.constant dense<0.0107526882> : tensor<1x128xf32>
    %cst_92 = arith.constant dense<0.0106382975> : tensor<1x128xf32>
    %cst_93 = arith.constant dense<0.0105263162> : tensor<1x128xf32>
    %cst_94 = arith.constant dense<0.010416667> : tensor<1x128xf32>
    %cst_95 = arith.constant dense<0.010309278> : tensor<1x128xf32>
    %cst_96 = arith.constant dense<0.0102040814> : tensor<1x128xf32>
    %cst_97 = arith.constant dense<0.0101010101> : tensor<1x512xf32>
    %cst_98 = arith.constant dense<0.00999999977> : tensor<1x512xf32>
    %cst_99 = arith.constant dense<9.900990e-03> : tensor<1x128xf32>
    %cst_100 = arith.constant dense<0.00980392192> : tensor<1x128xf32>
    %cst_101 = arith.constant dense<0.00970873795> : tensor<1x128xf32>
    %cst_102 = arith.constant dense<0.00961538497> : tensor<1x128xf32>
    %cst_103 = arith.constant dense<9.523810e-03> : tensor<1x128xf32>
    %cst_104 = arith.constant dense<0.0094339624> : tensor<1x128xf32>
    %cst_105 = arith.constant dense<0.00934579409> : tensor<1x128xf32>
    %cst_106 = arith.constant dense<0.00925925932> : tensor<1x128xf32>
    %cst_107 = arith.constant dense<0.00917431153> : tensor<1x512xf32>
    %cst_108 = arith.constant dense<0.0090909088> : tensor<1x512xf32>
    %cst_109 = arith.constant dense<0.00900900922> : tensor<1x128xf32>
    %cst_110 = arith.constant dense<0.00892857183> : tensor<1x128xf32>
    %cst_111 = arith.constant dense<0.00884955748> : tensor<1x128xf32>
    %cst_112 = arith.constant dense<0.00877192988> : tensor<1x128xf32>
    %cst_113 = arith.constant dense<0.00869565178> : tensor<1x128xf32>
    %cst_114 = arith.constant dense<8.620690e-03> : tensor<1x128xf32>
    %cst_115 = arith.constant dense<0.00854700897> : tensor<1x128xf32>
    %cst_116 = arith.constant dense<0.00847457629> : tensor<1x128xf32>
    %cst_117 = arith.constant dense<0.00840336177> : tensor<1x512xf32>
    %cst_118 = arith.constant dense<0.00833333377> : tensor<1x512xf32>
    %cst_119 = arith.constant dense<0.00826446246> : tensor<1x128xf32>
    %cst_120 = arith.constant dense<0.00819672085> : tensor<1x128xf32>
    %cst_121 = arith.constant dense<0.008130081> : tensor<1x128xf32>
    %cst_122 = arith.constant dense<0.00806451589> : tensor<1x128xf32>
    %cst_123 = arith.constant dense<8.000000e-03> : tensor<1x128xf32>
    %cst_124 = arith.constant dense<0.00793650839> : tensor<1x128xf32>
    %cst_125 = arith.constant dense<0.00787401571> : tensor<1x128xf32>
    %cst_126 = arith.constant dense<7.812500e-03> : tensor<1x128xf32>
    %cst_127 = arith.constant dense<0.00775193795> : tensor<1x512xf32>
    %cst_128 = arith.constant dense<0.0076923077> : tensor<1x512xf32>
    %cst_129 = arith.constant dense<0.00763358781> : tensor<1x128xf32>
    %cst_130 = arith.constant dense<0.0075757578> : tensor<1x128xf32>
    %cst_131 = arith.constant dense<0.00751879718> : tensor<1x128xf32>
    %cst_132 = arith.constant dense<0.00746268639> : tensor<1x128xf32>
    %cst_133 = arith.constant dense<0.00740740728> : tensor<1x128xf32>
    %cst_134 = arith.constant dense<0.0073529412> : tensor<1x128xf32>
    %cst_135 = arith.constant dense<7.299270e-03> : tensor<1x128xf32>
    %cst_136 = arith.constant dense<0.00724637694> : tensor<1x128xf32>
    %cst_137 = arith.constant dense<0.00719424477> : tensor<1x512xf32>
    %cst_138 = arith.constant dense<0.00714285718> : tensor<1x512xf32>
    %cst_139 = arith.constant dense<0.00709219835> : tensor<1x128xf32>
    %cst_140 = arith.constant dense<0.00704225338> : tensor<1x128xf32>
    %cst_141 = arith.constant dense<0.00699300691> : tensor<1x128xf32>
    %cst_142 = arith.constant dense<0.0069444445> : tensor<1x128xf32>
    %cst_143 = arith.constant dense<0.0068965517> : tensor<1x128xf32>
    %cst_144 = arith.constant dense<0.00684931502> : tensor<1x128xf32>
    %cst_145 = arith.constant dense<0.00680272094> : tensor<1x128xf32>
    %cst_146 = arith.constant dense<0.00675675692> : tensor<1x128xf32>
    %cst_147 = arith.constant dense<0.00671140943> : tensor<1x512xf32>
    %cst_148 = arith.constant dense<0.00666666683> : tensor<1x512xf32>
    %cst_149 = arith.constant dense<0.00662251655> : tensor<1x128xf32>
    %cst_150 = arith.constant dense<0.00657894742> : tensor<1x128xf32>
    %cst_151 = arith.constant dense<0.00653594779> : tensor<1x128xf32>
    %cst_152 = arith.constant dense<0.00649350649> : tensor<1x128xf32>
    %cst_153 = arith.constant dense<0.0064516128> : tensor<1x128xf32>
    %cst_154 = arith.constant dense<0.00641025649> : tensor<1x128xf32>
    %cst_155 = arith.constant dense<0.00636942684> : tensor<1x128xf32>
    %cst_156 = arith.constant dense<0.00632911408> : tensor<1x128xf32>
    %cst_157 = arith.constant dense<0.00628930796> : tensor<1x512xf32>
    %cst_158 = arith.constant dense<6.250000e-03> : tensor<1x512xf32>
    %cst_159 = arith.constant dense<0.00621118024> : tensor<1x128xf32>
    %cst_160 = arith.constant dense<0.00617283955> : tensor<1x128xf32>
    %cst_161 = arith.constant dense<0.00613496918> : tensor<1x128xf32>
    %cst_162 = arith.constant dense<0.00609756075> : tensor<1x128xf32>
    %cst_163 = arith.constant dense<0.00606060587> : tensor<1x128xf32>
    %cst_164 = arith.constant dense<0.00602409616> : tensor<1x128xf32>
    %cst_165 = arith.constant dense<0.00598802418> : tensor<1x128xf32>
    %cst_166 = arith.constant dense<0.00595238106> : tensor<1x128xf32>
    %cst_167 = arith.constant dense<5.917160e-03> : tensor<1x512xf32>
    %cst_168 = arith.constant dense<0.00588235306> : tensor<1x512xf32>
    %cst_169 = arith.constant dense<0.00584795326> : tensor<1x128xf32>
    %cst_170 = arith.constant dense<0.00581395347> : tensor<1x128xf32>
    %cst_171 = arith.constant dense<0.00578034669> : tensor<1x128xf32>
    %cst_172 = arith.constant dense<0.00574712642> : tensor<1x128xf32>
    %cst_173 = arith.constant dense<0.00571428565> : tensor<1x128xf32>
    %cst_174 = arith.constant dense<0.00568181835> : tensor<1x128xf32>
    %cst_175 = arith.constant dense<0.00564971752> : tensor<1x128xf32>
    %cst_176 = arith.constant dense<0.00561797759> : tensor<1x128xf32>
    %cst_177 = arith.constant dense<0.00558659201> : tensor<1x512xf32>
    %cst_178 = arith.constant dense<0.00555555569> : tensor<1x512xf32>
    %cst_179 = arith.constant dense<0.00552486209> : tensor<1x128xf32>
    %cst_180 = arith.constant dense<0.00549450563> : tensor<1x128xf32>
    %cst_181 = arith.constant dense<0.00546448072> : tensor<1x128xf32>
    %cst_182 = arith.constant dense<0.00543478271> : tensor<1x128xf32>
    %cst_183 = arith.constant dense<0.00540540554> : tensor<1x128xf32>
    %cst_184 = arith.constant dense<0.00537634408> : tensor<1x128xf32>
    %cst_185 = arith.constant dense<0.00534759369> : tensor<1x128xf32>
    %cst_186 = arith.constant dense<0.00531914877> : tensor<1x128xf32>
    %cst_187 = arith.constant dense<0.00529100513> : tensor<1x512xf32>
    %cst_188 = arith.constant dense<0.00526315812> : tensor<1x512xf32>
    %cst_189 = arith.constant dense<0.00523560215> : tensor<1x128xf32>
    %cst_190 = arith.constant dense<0.00520833349> : tensor<1x128xf32>
    %cst_191 = arith.constant dense<0.00518134702> : tensor<1x128xf32>
    %cst_192 = arith.constant dense<0.00515463902> : tensor<1x128xf32>
    %cst_193 = arith.constant dense<0.00512820529> : tensor<1x128xf32>
    %cst_194 = arith.constant dense<0.00510204071> : tensor<1x128xf32>
    %cst_195 = arith.constant dense<0.00507614203> : tensor<1x128xf32>
    %cst_196 = arith.constant dense<0.00505050505> : tensor<1x128xf32>
    %cst_197 = arith.constant dense<0.00502512557> : tensor<1x512xf32>
    %cst_198 = arith.constant dense<5.000000e-03> : tensor<1x512xf32>
    %cst_199 = arith.constant dense<0.00497512426> : tensor<1x128xf32>
    %cst_200 = arith.constant dense<0.00495049497> : tensor<1x128xf32>
    %cst_201 = arith.constant dense<0.00492610829> : tensor<1x128xf32>
    %cst_202 = arith.constant dense<0.00490196096> : tensor<1x128xf32>
    %cst_203 = arith.constant dense<0.00487804879> : tensor<1x128xf32>
    %cst_204 = arith.constant dense<0.00485436898> : tensor<1x128xf32>
    %cst_205 = arith.constant dense<0.00483091781> : tensor<1x128xf32>
    %cst_206 = arith.constant dense<0.00480769249> : tensor<1x128xf32>
    %cst_207 = arith.constant dense<0.00478468882> : tensor<1x512xf32>
    %cst_208 = arith.constant dense<0.00476190494> : tensor<1x512xf32>
    %cst_209 = arith.constant dense<0.00473933667> : tensor<1x128xf32>
    %cst_210 = arith.constant dense<0.0047169812> : tensor<1x128xf32>
    %cst_211 = arith.constant dense<0.00469483575> : tensor<1x128xf32>
    %cst_212 = arith.constant dense<0.00467289705> : tensor<1x128xf32>
    %cst_213 = arith.constant dense<0.00465116277> : tensor<1x128xf32>
    %cst_214 = arith.constant dense<0.00462962966> : tensor<1x128xf32>
    %cst_215 = arith.constant dense<0.00460829493> : tensor<1x128xf32>
    %cst_216 = arith.constant dense<0.00458715577> : tensor<1x128xf32>
    %cst_217 = arith.constant dense<4.566210e-03> : tensor<1x512xf32>
    %cst_218 = arith.constant dense<0.0045454544> : tensor<1x512xf32>
    %cst_219 = arith.constant dense<0.00452488707> : tensor<1x128xf32>
    %cst_220 = arith.constant dense<0.00450450461> : tensor<1x128xf32>
    %cst_221 = arith.constant dense<0.00448430516> : tensor<1x128xf32>
    %cst_222 = arith.constant dense<0.00446428591> : tensor<1x128xf32>
    %cst_223 = arith.constant dense<0.00444444455> : tensor<1x128xf32>
    %cst_224 = arith.constant dense<0.00442477874> : tensor<1x128xf32>
    %cst_225 = arith.constant dense<0.00440528616> : tensor<1x128xf32>
    %cst_226 = arith.constant dense<0.00438596494> : tensor<1x128xf32>
    %cst_227 = arith.constant dense<0.0043668123> : tensor<1x512xf32>
    %cst_228 = arith.constant dense<0.00434782589> : tensor<1x512xf32>
    %cst_229 = arith.constant dense<0.00432900432> : tensor<1x128xf32>
    %cst_230 = arith.constant dense<0.00431034481> : tensor<1x128xf32>
    %cst_231 = arith.constant dense<0.00429184549> : tensor<1x128xf32>
    %cst_232 = arith.constant dense<0.00427350448> : tensor<1x128xf32>
    %cst_233 = arith.constant dense<0.00425531901> : tensor<1x128xf32>
    %cst_234 = arith.constant dense<0.00423728814> : tensor<1x128xf32>
    %cst_235 = arith.constant dense<0.00421940908> : tensor<1x128xf32>
    %cst_236 = arith.constant dense<0.00420168089> : tensor<1x128xf32>
    %cst_237 = arith.constant dense<0.00418410031> : tensor<1x512xf32>
    %cst_238 = arith.constant dense<0.00416666688> : tensor<1x512xf32>
    %cst_239 = arith.constant 3.40282347E+38 : f32
    %cst_240 = arith.constant 1.000000e+00 : f32
    %cst_241 = arith.constant -3.40282347E+38 : f32
    %cst_242 = arith.constant dense<0.00414937781> : tensor<1x1xf32>
    %cst_243 = arith.constant dense<0.00413223123> : tensor<1x1xf32>
    %cst_244 = arith.constant dense<0.00411522621> : tensor<1x384xf32>
    %cst_245 = arith.constant dense<0.00409836043> : tensor<384x512xf32>
    %cst_246 = arith.constant dense<0.00408163248> : tensor<512x128xf32>
    %cst_247 = arith.constant dense<0.0040650405> : tensor<512x128xf32>
    %cst_248 = arith.constant dense<0.0040485831> : tensor<512x128xf32>
    %cst_249 = arith.constant dense<0.00403225794> : tensor<128x128xf32>
    %cst_250 = arith.constant dense<0.00401606411> : tensor<128x128xf32>
    %cst_251 = arith.constant dense<4.000000e-03> : tensor<128x128xf32>
    %cst_252 = arith.constant dense<0.00398406386> : tensor<128x512xf32>
    %cst_253 = arith.constant dense<0.0039682542> : tensor<512x128xf32>
    %cst_254 = arith.constant dense<0.00395256933> : tensor<128x512xf32>
    %cst_255 = arith.constant dense<0.00393700786> : tensor<512x128xf32>
    %cst_256 = arith.constant dense<0.00392156886> : tensor<128x512xf32>
    %cst_257 = arith.constant dense<3.906250e-03> : tensor<512x128xf32>
    %cst_258 = arith.constant dense<0.00389105058> : tensor<128x512xf32>
    %cst_259 = arith.constant dense<0.00387596898> : tensor<512x128xf32>
    %cst_260 = arith.constant dense<0.00386100379> : tensor<128x512xf32>
    %cst_261 = arith.constant dense<0.00384615385> : tensor<512x128xf32>
    %cst_262 = arith.constant dense<0.00383141753> : tensor<512x128xf32>
    %cst_263 = arith.constant dense<0.00381679391> : tensor<512x128xf32>
    %cst_264 = arith.constant dense<0.00380228134> : tensor<128x128xf32>
    %cst_265 = arith.constant dense<0.0037878789> : tensor<128x128xf32>
    %cst_266 = arith.constant dense<0.00377358496> : tensor<128x128xf32>
    %cst_267 = arith.constant dense<0.00375939859> : tensor<128x512xf32>
    %cst_268 = arith.constant dense<0.00374531839> : tensor<512x128xf32>
    %cst_269 = arith.constant dense<0.0037313432> : tensor<128x512xf32>
    %cst_270 = arith.constant dense<0.00371747208> : tensor<512x128xf32>
    %cst_271 = arith.constant dense<0.00370370364> : tensor<128x512xf32>
    %cst_272 = arith.constant dense<0.00369003695> : tensor<512x128xf32>
    %cst_273 = arith.constant dense<0.0036764706> : tensor<128x512xf32>
    %cst_274 = arith.constant dense<0.00366300368> : tensor<512x128xf32>
    %cst_275 = arith.constant dense<0.00364963501> : tensor<128x512xf32>
    %cst_276 = arith.constant dense<0.00363636366> : tensor<512x128xf32>
    %cst_277 = arith.constant dense<0.00362318847> : tensor<512x128xf32>
    %cst_278 = arith.constant dense<0.00361010828> : tensor<512x128xf32>
    %cst_279 = arith.constant dense<0.00359712238> : tensor<128x128xf32>
    %cst_280 = arith.constant dense<0.00358422939> : tensor<128x128xf32>
    %cst_281 = arith.constant dense<0.00357142859> : tensor<128x128xf32>
    %cst_282 = arith.constant dense<0.00355871883> : tensor<128x512xf32>
    %cst_283 = arith.constant dense<0.00354609918> : tensor<512x128xf32>
    %cst_284 = arith.constant dense<0.00353356893> : tensor<128x512xf32>
    %cst_285 = arith.constant dense<0.00352112669> : tensor<512x128xf32>
    %cst_286 = arith.constant dense<0.003508772> : tensor<128x512xf32>
    %cst_287 = arith.constant dense<0.00349650346> : tensor<512x128xf32>
    %cst_288 = arith.constant dense<0.00348432059> : tensor<128x512xf32>
    %cst_289 = arith.constant dense<0.00347222225> : tensor<512x128xf32>
    %cst_290 = arith.constant dense<0.00346020772> : tensor<128x512xf32>
    %cst_291 = arith.constant dense<0.00344827585> : tensor<512x128xf32>
    %cst_292 = arith.constant dense<0.00343642617> : tensor<512x128xf32>
    %cst_293 = arith.constant dense<0.00342465751> : tensor<512x128xf32>
    %cst_294 = arith.constant dense<0.00341296918> : tensor<128x128xf32>
    %cst_295 = arith.constant dense<0.00340136047> : tensor<128x128xf32>
    %cst_296 = arith.constant dense<0.00338983047> : tensor<128x128xf32>
    %cst_297 = arith.constant dense<0.00337837846> : tensor<128x512xf32>
    %cst_298 = arith.constant dense<0.00336700329> : tensor<512x128xf32>
    %cst_299 = arith.constant dense<0.00335570471> : tensor<128x512xf32>
    %cst_300 = arith.constant dense<0.00334448158> : tensor<512x128xf32>
    %cst_301 = arith.constant dense<0.00333333341> : tensor<128x512xf32>
    %cst_302 = arith.constant dense<0.00332225906> : tensor<512x128xf32>
    %cst_303 = arith.constant dense<0.00331125828> : tensor<128x512xf32>
    %cst_304 = arith.constant dense<0.00330033014> : tensor<512x128xf32>
    %cst_305 = arith.constant dense<0.00328947371> : tensor<128x512xf32>
    %cst_306 = arith.constant dense<0.00327868853> : tensor<512x128xf32>
    %cst_307 = arith.constant dense<0.00326797389> : tensor<512x128xf32>
    %cst_308 = arith.constant dense<0.00325732888> : tensor<512x128xf32>
    %cst_309 = arith.constant dense<0.00324675324> : tensor<128x128xf32>
    %cst_310 = arith.constant dense<0.00323624606> : tensor<128x128xf32>
    %cst_311 = arith.constant dense<0.0032258064> : tensor<128x128xf32>
    %cst_312 = arith.constant dense<0.00321543403> : tensor<128x512xf32>
    %cst_313 = arith.constant dense<0.00320512825> : tensor<512x128xf32>
    %cst_314 = arith.constant dense<0.00319488812> : tensor<128x512xf32>
    %cst_315 = arith.constant dense<0.00318471342> : tensor<512x128xf32>
    %cst_316 = arith.constant dense<0.00317460322> : tensor<128x512xf32>
    %cst_317 = arith.constant dense<0.00316455704> : tensor<512x128xf32>
    %cst_318 = arith.constant dense<0.00315457419> : tensor<128x512xf32>
    %cst_319 = arith.constant dense<0.00314465398> : tensor<512x128xf32>
    %cst_320 = arith.constant dense<0.00313479616> : tensor<128x512xf32>
    %cst_321 = arith.constant dense<3.125000e-03> : tensor<512x128xf32>
    %cst_322 = arith.constant dense<0.0031152647> : tensor<512x128xf32>
    %cst_323 = arith.constant dense<0.00310559012> : tensor<512x128xf32>
    %cst_324 = arith.constant dense<0.00309597515> : tensor<128x128xf32>
    %cst_325 = arith.constant dense<0.00308641978> : tensor<128x128xf32>
    %cst_326 = arith.constant dense<0.00307692308> : tensor<128x128xf32>
    %cst_327 = arith.constant dense<0.00306748459> : tensor<128x512xf32>
    %cst_328 = arith.constant dense<0.00305810408> : tensor<512x128xf32>
    %cst_329 = arith.constant dense<0.00304878037> : tensor<128x512xf32>
    %cst_330 = arith.constant dense<0.00303951371> : tensor<512x128xf32>
    %cst_331 = arith.constant dense<0.00303030293> : tensor<128x512xf32>
    %cst_332 = arith.constant dense<0.00302114803> : tensor<512x128xf32>
    %cst_333 = arith.constant dense<0.00301204808> : tensor<128x512xf32>
    %cst_334 = arith.constant dense<0.00300300308> : tensor<512x128xf32>
    %cst_335 = arith.constant dense<0.00299401209> : tensor<128x512xf32>
    %cst_336 = arith.constant dense<0.00298507465> : tensor<512x128xf32>
    %cst_337 = arith.constant dense<0.00297619053> : tensor<512x128xf32>
    %cst_338 = arith.constant dense<0.00296735903> : tensor<512x128xf32>
    %cst_339 = arith.constant dense<2.958580e-03> : tensor<128x128xf32>
    %cst_340 = arith.constant dense<0.0029498525> : tensor<128x128xf32>
    %cst_341 = arith.constant dense<0.00294117653> : tensor<128x128xf32>
    %cst_342 = arith.constant dense<0.00293255132> : tensor<128x512xf32>
    %cst_343 = arith.constant dense<0.00292397663> : tensor<512x128xf32>
    %cst_344 = arith.constant dense<0.002915452> : tensor<128x512xf32>
    %cst_345 = arith.constant dense<0.00290697673> : tensor<512x128xf32>
    %cst_346 = arith.constant dense<0.00289855083> : tensor<128x512xf32>
    %cst_347 = arith.constant dense<0.00289017335> : tensor<512x128xf32>
    %cst_348 = arith.constant dense<0.0028818443> : tensor<128x512xf32>
    %cst_349 = arith.constant dense<0.00287356321> : tensor<512x128xf32>
    %cst_350 = arith.constant dense<0.00286532962> : tensor<128x512xf32>
    %cst_351 = arith.constant dense<0.00285714283> : tensor<512x128xf32>
    %cst_352 = arith.constant dense<0.00284900283> : tensor<512x128xf32>
    %cst_353 = arith.constant dense<0.00284090918> : tensor<512x128xf32>
    %cst_354 = arith.constant dense<0.00283286115> : tensor<128x128xf32>
    %cst_355 = arith.constant dense<0.00282485876> : tensor<128x128xf32>
    %cst_356 = arith.constant dense<0.00281690131> : tensor<128x128xf32>
    %cst_357 = arith.constant dense<0.00280898879> : tensor<128x512xf32>
    %cst_358 = arith.constant dense<0.00280112051> : tensor<512x128xf32>
    %cst_359 = arith.constant dense<0.00279329601> : tensor<128x512xf32>
    %cst_360 = arith.constant dense<0.00278551527> : tensor<512x128xf32>
    %cst_361 = arith.constant dense<0.00277777785> : tensor<128x512xf32>
    %cst_362 = arith.constant dense<0.00277008303> : tensor<512x128xf32>
    %cst_363 = arith.constant dense<0.00276243105> : tensor<128x512xf32>
    %cst_364 = arith.constant dense<0.00275482098> : tensor<512x128xf32>
    %cst_365 = arith.constant dense<0.00274725282> : tensor<128x512xf32>
    %cst_366 = arith.constant dense<0.0027397261> : tensor<512x128xf32>
    %cst_367 = arith.constant dense<0.00273224036> : tensor<512x128xf32>
    %cst_368 = arith.constant dense<0.0027247956> : tensor<512x128xf32>
    %cst_369 = arith.constant dense<0.00271739135> : tensor<128x128xf32>
    %cst_370 = arith.constant dense<0.00271002715> : tensor<128x128xf32>
    %cst_371 = arith.constant dense<0.00270270277> : tensor<128x128xf32>
    %cst_372 = arith.constant dense<0.00269541773> : tensor<128x512xf32>
    %cst_373 = arith.constant dense<0.00268817204> : tensor<512x128xf32>
    %cst_374 = arith.constant dense<0.00268096523> : tensor<128x512xf32>
    %cst_375 = arith.constant dense<0.00267379684> : tensor<512x128xf32>
    %cst_376 = arith.constant dense<0.00266666664> : tensor<128x512xf32>
    %cst_377 = arith.constant dense<0.00265957438> : tensor<512x128xf32>
    %cst_378 = arith.constant dense<0.00265251985> : tensor<128x512xf32>
    %cst_379 = arith.constant dense<0.00264550257> : tensor<512x128xf32>
    %cst_380 = arith.constant dense<0.00263852254> : tensor<128x512xf32>
    %cst_381 = arith.constant dense<0.00263157906> : tensor<512x128xf32>
    %cst_382 = arith.constant dense<0.00262467191> : tensor<512x128xf32>
    %cst_383 = arith.constant dense<0.00261780107> : tensor<512x128xf32>
    %cst_384 = arith.constant dense<0.0026109661> : tensor<128x128xf32>
    %cst_385 = arith.constant dense<0.00260416674> : tensor<128x128xf32>
    %cst_386 = arith.constant dense<0.00259740255> : tensor<128x128xf32>
    %cst_387 = arith.constant dense<0.00259067351> : tensor<128x512xf32>
    %cst_388 = arith.constant dense<0.0025839794> : tensor<512x128xf32>
    %cst_389 = arith.constant dense<0.00257731951> : tensor<128x512xf32>
    %cst_390 = arith.constant dense<0.00257069408> : tensor<512x128xf32>
    %cst_391 = arith.constant dense<0.00256410264> : tensor<128x512xf32>
    %cst_392 = arith.constant dense<0.00255754474> : tensor<512x128xf32>
    %cst_393 = arith.constant dense<0.00255102036> : tensor<128x512xf32>
    %cst_394 = arith.constant dense<0.00254452927> : tensor<512x128xf32>
    %cst_395 = arith.constant dense<0.00253807101> : tensor<128x512xf32>
    %cst_396 = arith.constant dense<0.00253164559> : tensor<512x128xf32>
    %cst_397 = arith.constant dense<0.00252525252> : tensor<512x128xf32>
    %cst_398 = arith.constant dense<0.00251889159> : tensor<512x128xf32>
    %cst_399 = arith.constant dense<0.00251256279> : tensor<128x128xf32>
    %cst_400 = arith.constant dense<0.00250626565> : tensor<128x128xf32>
    %cst_401 = arith.constant dense<2.500000e-03> : tensor<128x128xf32>
    %cst_402 = arith.constant dense<0.00249376567> : tensor<128x512xf32>
    %cst_403 = arith.constant dense<0.00248756213> : tensor<512x128xf32>
    %cst_404 = arith.constant dense<0.00248138956> : tensor<128x512xf32>
    %cst_405 = arith.constant dense<0.00247524749> : tensor<512x128xf32>
    %cst_406 = arith.constant dense<0.00246913591> : tensor<128x512xf32>
    %cst_407 = arith.constant dense<0.00246305414> : tensor<512x128xf32>
    %cst_408 = arith.constant dense<0.00245700241> : tensor<128x512xf32>
    %cst_409 = arith.constant dense<0.00245098048> : tensor<512x128xf32>
    %cst_410 = arith.constant dense<0.00244498788> : tensor<128x512xf32>
    %cst_411 = arith.constant dense<0.00243902439> : tensor<512x128xf32>
    %cst_412 = arith.constant dense<2.433090e-03> : tensor<512x128xf32>
    %cst_413 = arith.constant dense<0.00242718449> : tensor<512x128xf32>
    %cst_414 = arith.constant dense<0.00242130761> : tensor<128x128xf32>
    %cst_415 = arith.constant dense<0.0024154589> : tensor<128x128xf32>
    %cst_416 = arith.constant dense<0.0024096386> : tensor<128x128xf32>
    %cst_417 = arith.constant dense<0.00240384624> : tensor<128x512xf32>
    %cst_418 = arith.constant dense<0.00239808159> : tensor<512x128xf32>
    %cst_419 = arith.constant dense<0.00239234441> : tensor<128x512xf32>
    %cst_420 = arith.constant dense<0.00238663494> : tensor<512x128xf32>
    %cst_421 = arith.constant dense<0.00238095247> : tensor<128x512xf32>
    %cst_422 = arith.constant dense<0.00237529702> : tensor<512x128xf32>
    %cst_423 = arith.constant dense<0.00236966833> : tensor<128x512xf32>
    %cst_424 = arith.constant dense<0.0023640662> : tensor<512x128xf32>
    %cst_425 = arith.constant dense<0.0023584906> : tensor<128x512xf32>
    %cst_426 = arith.constant dense<0.00235294108> : tensor<512x128xf32>
    %cst_427 = arith.constant dense<0.00234741787> : tensor<512x128xf32>
    %cst_428 = arith.constant dense<0.00234192028> : tensor<512x128xf32>
    %cst_429 = arith.constant dense<0.00233644852> : tensor<128x128xf32>
    %cst_430 = arith.constant dense<0.00233100238> : tensor<128x128xf32>
    %cst_431 = arith.constant dense<0.00232558139> : tensor<128x128xf32>
    %cst_432 = arith.constant dense<0.00232018554> : tensor<128x512xf32>
    %cst_433 = arith.constant dense<0.00231481483> : tensor<512x128xf32>
    %cst_434 = arith.constant dense<0.00230946881> : tensor<128x512xf32>
    %cst_435 = arith.constant dense<0.00230414746> : tensor<512x128xf32>
    %cst_436 = arith.constant dense<0.00229885057> : tensor<128x512xf32>
    %cst_437 = arith.constant dense<0.00229357788> : tensor<512x128xf32>
    %cst_438 = arith.constant dense<0.00228832942> : tensor<128x512xf32>
    %cst_439 = arith.constant dense<0.00228310493> : tensor<512x128xf32>
    %cst_440 = arith.constant dense<0.00227790442> : tensor<128x512xf32>
    %cst_441 = arith.constant dense<0.0022727272> : tensor<512x128xf32>
    %cst_442 = arith.constant dense<0.00226757373> : tensor<512x128xf32>
    %cst_443 = arith.constant dense<0.00226244354> : tensor<512x128xf32>
    %cst_444 = arith.constant dense<0.0022573364> : tensor<128x128xf32>
    %cst_445 = arith.constant dense<0.00225225231> : tensor<128x128xf32>
    %cst_446 = arith.constant dense<0.00224719103> : tensor<128x128xf32>
    %cst_447 = arith.constant dense<0.00224215258> : tensor<128x512xf32>
    %cst_448 = arith.constant dense<0.00223713648> : tensor<512x128xf32>
    %cst_449 = arith.constant dense<0.00223214296> : tensor<128x512xf32>
    %cst_450 = arith.constant dense<0.00222717156> : tensor<512x128xf32>
    %cst_451 = arith.constant dense<0.00222222228> : tensor<128x512xf32>
    %cst_452 = arith.constant dense<0.00221729488> : tensor<512x128xf32>
    %cst_453 = arith.constant dense<0.00221238937> : tensor<128x512xf32>
    %cst_454 = arith.constant dense<0.00220750552> : tensor<512x128xf32>
    %cst_455 = arith.constant dense<0.00220264308> : tensor<128x512xf32>
    %cst_456 = arith.constant dense<0.0021978023> : tensor<512x128xf32>
    %cst_457 = arith.constant dense<0.00219298247> : tensor<512x128xf32>
    %cst_458 = arith.constant dense<0.00218818383> : tensor<512x128xf32>
    %cst_459 = arith.constant dense<0.00218340615> : tensor<128x128xf32>
    %cst_460 = arith.constant dense<0.00217864919> : tensor<128x128xf32>
    %cst_461 = arith.constant dense<0.00217391294> : tensor<128x128xf32>
    %cst_462 = arith.constant dense<0.00216919743> : tensor<128x512xf32>
    %cst_463 = arith.constant dense<0.00216450216> : tensor<512x128xf32>
    %cst_464 = arith.constant dense<0.00215982716> : tensor<128x512xf32>
    %cst_465 = arith.constant dense<0.00215517241> : tensor<512x128xf32>
    %cst_466 = arith.constant dense<0.00215053768> : tensor<128x512xf32>
    %cst_467 = arith.constant dense<0.00214592274> : tensor<512x128xf32>
    %cst_468 = arith.constant dense<0.0021413276> : tensor<128x512xf32>
    %cst_469 = arith.constant dense<0.00213675224> : tensor<512x128xf32>
    %cst_470 = arith.constant dense<0.00213219621> : tensor<128x512xf32>
    %cst_471 = arith.constant dense<0.00212765951> : tensor<512x128xf32>
    %cst_472 = arith.constant dense<0.00212314236> : tensor<512x128xf32>
    %cst_473 = arith.constant dense<0.00211864407> : tensor<512x128xf32>
    %cst_474 = arith.constant dense<0.00211416488> : tensor<128x128xf32>
    %cst_475 = arith.constant dense<0.00210970454> : tensor<128x128xf32>
    %cst_476 = arith.constant dense<0.00210526306> : tensor<128x128xf32>
    %cst_477 = arith.constant dense<0.00210084044> : tensor<128x512xf32>
    %cst_478 = arith.constant dense<0.00209643599> : tensor<512x128xf32>
    %cst_479 = arith.constant dense<0.00209205016> : tensor<128x512xf32>
    %cst_480 = arith.constant dense<0.00208768272> : tensor<512x128xf32>
    %cst_481 = arith.constant dense<0.00208333344> : tensor<128x512xf32>
    %cst_482 = arith.constant dense<0.00207900209> : tensor<512x128xf32>
    %cst_483 = arith.constant dense<0.00207468891> : tensor<128x512xf32>
    %cst_484 = arith.constant dense<0.00207039341> : tensor<512x128xf32>
    %cst_485 = arith.constant dense<0.00206611562> : tensor<128x512xf32>
    %cst_486 = arith.constant dense<0.00206185575> : tensor<512x128xf32>
    %cst_487 = arith.constant dense<0.00205761311> : tensor<512x128xf32>
    %cst_488 = arith.constant dense<0.00205338816> : tensor<512x128xf32>
    %cst_489 = arith.constant dense<0.00204918021> : tensor<128x128xf32>
    %cst_490 = arith.constant dense<0.00204498973> : tensor<128x128xf32>
    %cst_491 = arith.constant dense<0.00204081624> : tensor<128x128xf32>
    %cst_492 = arith.constant dense<2.036660e-03> : tensor<128x512xf32>
    %cst_493 = arith.constant dense<0.00203252025> : tensor<512x128xf32>
    %cst_494 = arith.constant dense<0.00202839752> : tensor<128x512xf32>
    %cst_495 = arith.constant dense<0.00202429155> : tensor<512x128xf32>
    %cst_496 = arith.constant dense<0.00202020211> : tensor<128x512xf32>
    %cst_497 = arith.constant dense<0.00201612897> : tensor<512x128xf32>
    %cst_498 = arith.constant dense<0.00201207236> : tensor<128x512xf32>
    %cst_499 = arith.constant dense<0.00200803205> : tensor<512x128xf32>
    %cst_500 = arith.constant dense<0.00200400804> : tensor<128x512xf32>
    %cst_501 = arith.constant dense<2.000000e-03> : tensor<512x128xf32>
    %cst_502 = arith.constant dense<0.00199600798> : tensor<512x128xf32>
    %cst_503 = arith.constant dense<0.00199203193> : tensor<512x128xf32>
    %cst_504 = arith.constant dense<0.00198807148> : tensor<128x128xf32>
    %cst_505 = arith.constant dense<0.0019841271> : tensor<128x128xf32>
    %cst_506 = arith.constant dense<0.00198019808> : tensor<128x128xf32>
    %cst_507 = arith.constant dense<0.00197628466> : tensor<128x512xf32>
    %cst_508 = arith.constant dense<0.00197238661> : tensor<512x128xf32>
    %cst_509 = arith.constant dense<0.00196850393> : tensor<128x512xf32>
    %cst_510 = arith.constant dense<0.00196463661> : tensor<512x128xf32>
    %cst_511 = arith.constant dense<0.00196078443> : tensor<128x512xf32>
    %cst_512 = arith.constant dense<0.00195694715> : tensor<512x128xf32>
    %cst_513 = arith.constant dense<0.001953125> : tensor<128x512xf32>
    %cst_514 = arith.constant dense<0.00194931775> : tensor<512x128xf32>
    %cst_515 = arith.constant dense<0.00194552529> : tensor<128x512xf32>
    %cst_516 = arith.constant dense<0.00194174761> : tensor<512x128xf32>
    %cst_517 = arith.constant dense<0.00193798449> : tensor<512x128xf32>
    %cst_518 = arith.constant dense<0.00193423603> : tensor<512x128xf32>
    %cst_519 = arith.constant dense<0.00193050189> : tensor<128x128xf32>
    %cst_520 = arith.constant dense<0.00192678231> : tensor<128x128xf32>
    %cst_521 = arith.constant dense<0.00192307692> : tensor<128x128xf32>
    %cst_522 = arith.constant dense<0.00191938574> : tensor<128x512xf32>
    %cst_523 = arith.constant dense<0.00191570877> : tensor<512x128xf32>
    %cst_524 = arith.constant dense<0.00191204587> : tensor<128x512xf32>
    %cst_525 = arith.constant dense<0.00190839695> : tensor<512x128xf32>
    %cst_526 = arith.constant dense<0.00190476188> : tensor<128x512xf32>
    %cst_527 = arith.constant dense<0.00190114067> : tensor<512x128xf32>
    %cst_528 = arith.constant dense<0.00189753319> : tensor<128x512xf32>
    %cst_529 = arith.constant dense<0.00189393945> : tensor<512x128xf32>
    %cst_530 = arith.constant dense<0.00189035921> : tensor<128x512xf32>
    %cst_531 = arith.constant dense<0.00188679248> : tensor<512x128xf32>
    %cst_532 = arith.constant dense<0.00188323914> : tensor<512x128xf32>
    %cst_533 = arith.constant dense<0.0018796993> : tensor<512x128xf32>
    %cst_534 = arith.constant dense<0.00187617261> : tensor<128x128xf32>
    %cst_535 = arith.constant dense<0.0018726592> : tensor<128x128xf32>
    %cst_536 = arith.constant dense<0.00186915894> : tensor<128x128xf32>
    %cst_537 = arith.constant dense<0.0018656716> : tensor<128x512xf32>
    %cst_538 = arith.constant dense<0.00186219742> : tensor<512x128xf32>
    %cst_539 = arith.constant dense<0.00185873604> : tensor<128x512xf32>
    %cst_540 = arith.constant dense<0.00185528758> : tensor<512x128xf32>
    %cst_541 = arith.constant dense<0.00185185182> : tensor<128x512xf32>
    %cst_542 = arith.constant dense<0.00184842886> : tensor<512x128xf32>
    %cst_543 = arith.constant dense<0.00184501847> : tensor<128x512xf32>
    %cst_544 = arith.constant dense<0.00184162066> : tensor<512x128xf32>
    %cst_545 = arith.constant dense<0.0018382353> : tensor<128x512xf32>
    %cst_546 = arith.constant dense<0.0018348624> : tensor<512x128xf32>
    %cst_547 = arith.constant dense<0.00183150184> : tensor<512x128xf32>
    %cst_548 = arith.constant dense<0.00182815362> : tensor<512x128xf32>
    %cst_549 = arith.constant dense<0.0018248175> : tensor<128x128xf32>
    %cst_550 = arith.constant dense<0.00182149361> : tensor<128x128xf32>
    %cst_551 = arith.constant dense<0.00181818183> : tensor<128x128xf32>
    %cst_552 = arith.constant dense<0.00181488204> : tensor<128x512xf32>
    %cst_553 = arith.constant dense<0.00181159424> : tensor<512x128xf32>
    %cst_554 = arith.constant dense<0.00180831831> : tensor<128x512xf32>
    %cst_555 = arith.constant dense<0.00180505414> : tensor<512x128xf32>
    %cst_556 = arith.constant dense<0.00180180185> : tensor<128x512xf32>
    %cst_557 = arith.constant dense<0.00179856119> : tensor<512x128xf32>
    %cst_558 = arith.constant dense<0.00179533218> : tensor<128x512xf32>
    %cst_559 = arith.constant dense<0.00179211469> : tensor<512x128xf32>
    %cst_560 = arith.constant dense<0.00178890873> : tensor<128x512xf32>
    %cst_561 = arith.constant dense<0.0017857143> : tensor<512x128xf32>
    %cst_562 = arith.constant dense<0.00178253115> : tensor<512x128xf32>
    %cst_563 = arith.constant dense<0.00177935942> : tensor<512x128xf32>
    %cst_564 = arith.constant dense<0.00177619897> : tensor<128x128xf32>
    %cst_565 = arith.constant dense<0.00177304959> : tensor<128x128xf32>
    %cst_566 = arith.constant dense<0.0017699115> : tensor<128x128xf32>
    %cst_567 = arith.constant dense<0.00176678447> : tensor<128x512xf32>
    %cst_568 = arith.constant dense<0.00176366838> : tensor<512x128xf32>
    %cst_569 = arith.constant dense<0.00176056335> : tensor<128x512xf32>
    %cst_570 = arith.constant dense<0.00175746926> : tensor<512x128xf32>
    %cst_571 = arith.constant dense<0.001754386> : tensor<128x512xf32>
    %cst_572 = arith.constant dense<0.00175131345> : tensor<512x128xf32>
    %cst_573 = arith.constant dense<0.00174825173> : tensor<128x512xf32>
    %cst_574 = arith.constant dense<0.00174520072> : tensor<512x128xf32>
    %cst_575 = arith.constant dense<0.0017421603> : tensor<128x512xf32>
    %cst_576 = arith.constant dense<0.00173913047> : tensor<512x128xf32>
    %cst_577 = arith.constant dense<0.00173611112> : tensor<512x128xf32>
    %cst_578 = arith.constant dense<0.00173310225> : tensor<512x128xf32>
    %cst_579 = arith.constant dense<0.00173010386> : tensor<128x128xf32>
    %cst_580 = arith.constant dense<0.00172711571> : tensor<128x128xf32>
    %cst_581 = arith.constant dense<0.00172413792> : tensor<128x128xf32>
    %cst_582 = arith.constant dense<0.00172117038> : tensor<128x512xf32>
    %cst_583 = arith.constant dense<0.00171821308> : tensor<512x128xf32>
    %cst_584 = arith.constant dense<0.00171526591> : tensor<128x512xf32>
    %cst_585 = arith.constant dense<0.00171232875> : tensor<512x128xf32>
    %cst_586 = arith.constant dense<0.00170940172> : tensor<128x512xf32>
    %cst_587 = arith.constant dense<0.00170648459> : tensor<512x128xf32>
    %cst_588 = arith.constant dense<0.00170357747> : tensor<128x512xf32>
    %cst_589 = arith.constant dense<0.00170068024> : tensor<512x128xf32>
    %cst_590 = arith.constant dense<0.0016977929> : tensor<128x512xf32>
    %cst_591 = arith.constant dense<0.00169491523> : tensor<512x128xf32>
    %cst_592 = arith.constant dense<0.00169204734> : tensor<512x128xf32>
    %cst_593 = arith.constant dense<0.00168918923> : tensor<512x128xf32>
    %cst_594 = arith.constant dense<0.00168634066> : tensor<128x128xf32>
    %cst_595 = arith.constant dense<0.00168350164> : tensor<128x128xf32>
    %cst_596 = arith.constant dense<0.00168067229> : tensor<128x128xf32>
    %cst_597 = arith.constant dense<0.00167785236> : tensor<128x512xf32>
    %cst_598 = arith.constant dense<0.00167504186> : tensor<512x128xf32>
    %cst_599 = arith.constant dense<0.00167224079> : tensor<128x512xf32>
    %cst_600 = arith.constant dense<0.00166944903> : tensor<512x128xf32>
    %cst_601 = arith.constant dense<0.00166666671> : tensor<128x512xf32>
    %cst_602 = arith.constant dense<0.00166389346> : tensor<512x128xf32>
    %cst_603 = arith.constant dense<0.00166112953> : tensor<128x512xf32>
    %cst_604 = arith.constant dense<0.00165837479> : tensor<512x128xf32>
    %cst_605 = arith.constant dense<0.00165562914> : tensor<128x512xf32>
    %cst_606 = arith.constant dense<0.00165289256> : tensor<512x2xf32>
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst_607 = arith.constant 0.000000e+00 : f32
    %cst_608 = arith.constant dense<0.00165016507> : tensor<1x30522x128xf32>
    %cst_609 = arith.constant dense<0.00164744642> : tensor<1x2x512xf32>
    %cst_610 = arith.constant dense<0.00164473685> : tensor<32xf32>
    %cst_611 = arith.constant dense<0.00164203614> : tensor<384xf32>
    %cst_612 = arith.constant dense<0.00163934426> : tensor<128xf32>
    %cst_613 = arith.constant dense<0.00163666124> : tensor<512xf32>
    %cst_614 = arith.constant dense<0.00163398695> : tensor<1x384x512xf32>
    %cst_615 = arith.constant dense<0.00163132139> : tensor<128xf32>
    %cst_616 = arith.constant dense<0.00162866444> : tensor<128xf32>
    %cst_617 = arith.constant dense<0.00162601622> : tensor<128xf32>
    %cst_618 = arith.constant dense<0.00162337662> : tensor<128xf32>
    %cst_619 = arith.constant dense<0.00162074552> : tensor<128xf32>
    %cst_620 = arith.constant dense<0.00161812303> : tensor<512xf32>
    %cst_621 = arith.constant dense<0.00161550893> : tensor<128xf32>
    %cst_622 = arith.constant dense<0.0016129032> : tensor<512xf32>
    %cst_623 = arith.constant dense<0.00161030598> : tensor<128xf32>
    %cst_624 = arith.constant dense<0.00160771701> : tensor<512xf32>
    %cst_625 = arith.constant dense<0.00160513644> : tensor<128xf32>
    %cst_626 = arith.constant dense<0.00160256412> : tensor<512xf32>
    %cst_627 = arith.constant dense<1.600000e-03> : tensor<128xf32>
    %cst_628 = arith.constant dense<0.00159744406> : tensor<512xf32>
    %cst_629 = arith.constant dense<0.00159489631> : tensor<128xf32>
    %cst_630 = arith.constant dense<0.00159235671> : tensor<128xf32>
    %cst_631 = arith.constant dense<0.00158982514> : tensor<128xf32>
    %cst_632 = arith.constant dense<0.00158730161> : tensor<128xf32>
    %cst_633 = arith.constant dense<0.00158478611> : tensor<128xf32>
    %cst_634 = arith.constant dense<0.00158227852> : tensor<512xf32>
    %cst_635 = arith.constant dense<0.00157977885> : tensor<128xf32>
    %cst_636 = arith.constant dense<0.0015772871> : tensor<512xf32>
    %cst_637 = arith.constant dense<0.00157480314> : tensor<128xf32>
    %cst_638 = arith.constant dense<0.00157232699> : tensor<512xf32>
    %cst_639 = arith.constant dense<0.00156985875> : tensor<128xf32>
    %cst_640 = arith.constant dense<0.00156739808> : tensor<512xf32>
    %cst_641 = arith.constant dense<0.00156494521> : tensor<128xf32>
    %cst_642 = arith.constant dense<1.562500e-03> : tensor<512xf32>
    %cst_643 = arith.constant dense<0.0015600624> : tensor<128xf32>
    %cst_644 = arith.constant dense<0.00155763235> : tensor<128xf32>
    %cst_645 = arith.constant dense<1.555210e-03> : tensor<128xf32>
    %cst_646 = arith.constant dense<0.00155279506> : tensor<128xf32>
    %cst_647 = arith.constant dense<0.00155038759> : tensor<128xf32>
    %cst_648 = arith.constant dense<0.00154798757> : tensor<512xf32>
    %cst_649 = arith.constant dense<0.00154559501> : tensor<128xf32>
    %cst_650 = arith.constant dense<0.00154320989> : tensor<512xf32>
    %cst_651 = arith.constant dense<0.00154083211> : tensor<128xf32>
    %cst_652 = arith.constant dense<0.00153846154> : tensor<512xf32>
    %cst_653 = arith.constant dense<0.00153609831> : tensor<128xf32>
    %cst_654 = arith.constant dense<0.0015337423> : tensor<512xf32>
    %cst_655 = arith.constant dense<0.00153139362> : tensor<128xf32>
    %cst_656 = arith.constant dense<0.00152905204> : tensor<512xf32>
    %cst_657 = arith.constant dense<0.00152671756> : tensor<128xf32>
    %cst_658 = arith.constant dense<0.00152439019> : tensor<128xf32>
    %cst_659 = arith.constant dense<1.522070e-03> : tensor<128xf32>
    %cst_660 = arith.constant dense<0.00151975686> : tensor<128xf32>
    %cst_661 = arith.constant dense<0.00151745067> : tensor<128xf32>
    %cst_662 = arith.constant dense<0.00151515147> : tensor<512xf32>
    %cst_663 = arith.constant dense<0.00151285925> : tensor<128xf32>
    %cst_664 = arith.constant dense<0.00151057402> : tensor<512xf32>
    %cst_665 = arith.constant dense<0.00150829565> : tensor<128xf32>
    %cst_666 = arith.constant dense<0.00150602404> : tensor<512xf32>
    %cst_667 = arith.constant dense<0.00150375941> : tensor<128xf32>
    %cst_668 = arith.constant dense<0.00150150154> : tensor<512xf32>
    %cst_669 = arith.constant dense<0.00149925041> : tensor<128xf32>
    %cst_670 = arith.constant dense<0.00149700604> : tensor<512xf32>
    %cst_671 = arith.constant dense<0.00149476831> : tensor<128xf32>
    %cst_672 = arith.constant dense<0.00149253733> : tensor<128xf32>
    %cst_673 = arith.constant dense<0.00149031298> : tensor<128xf32>
    %cst_674 = arith.constant dense<0.00148809527> : tensor<128xf32>
    %cst_675 = arith.constant dense<0.00148588407> : tensor<128xf32>
    %cst_676 = arith.constant dense<0.00148367952> : tensor<512xf32>
    %cst_677 = arith.constant dense<0.00148148148> : tensor<128xf32>
    %cst_678 = arith.constant dense<1.479290e-03> : tensor<512xf32>
    %cst_679 = arith.constant dense<0.00147710484> : tensor<128xf32>
    %cst_680 = arith.constant dense<0.00147492625> : tensor<512xf32>
    %cst_681 = arith.constant dense<0.00147275405> : tensor<128xf32>
    %cst_682 = arith.constant dense<0.00147058826> : tensor<512xf32>
    %cst_683 = arith.constant dense<0.00146842876> : tensor<128xf32>
    %cst_684 = arith.constant dense<0.00146627566> : tensor<512xf32>
    %cst_685 = arith.constant dense<0.00146412884> : tensor<128xf32>
    %cst_686 = arith.constant dense<0.00146198831> : tensor<128xf32>
    %cst_687 = arith.constant dense<0.00145985396> : tensor<128xf32>
    %cst_688 = arith.constant dense<0.001457726> : tensor<128xf32>
    %cst_689 = arith.constant dense<0.0014556041> : tensor<128xf32>
    %cst_690 = arith.constant dense<0.00145348837> : tensor<512xf32>
    %cst_691 = arith.constant dense<0.0014513788> : tensor<128xf32>
    %cst_692 = arith.constant dense<0.00144927541> : tensor<512xf32>
    %cst_693 = arith.constant dense<0.00144717796> : tensor<128xf32>
    %cst_694 = arith.constant dense<0.00144508667> : tensor<512xf32>
    %cst_695 = arith.constant dense<0.00144300144> : tensor<128xf32>
    %cst_696 = arith.constant dense<0.00144092215> : tensor<512xf32>
    %cst_697 = arith.constant dense<0.00143884891> : tensor<128xf32>
    %cst_698 = arith.constant dense<0.0014367816> : tensor<512xf32>
    %cst_699 = arith.constant dense<0.00143472024> : tensor<128xf32>
    %cst_700 = arith.constant dense<0.00143266481> : tensor<128xf32>
    %cst_701 = arith.constant dense<0.0014306152> : tensor<128xf32>
    %cst_702 = arith.constant dense<0.00142857141> : tensor<128xf32>
    %cst_703 = arith.constant dense<0.00142653356> : tensor<128xf32>
    %cst_704 = arith.constant dense<0.00142450142> : tensor<512xf32>
    %cst_705 = arith.constant dense<0.00142247509> : tensor<128xf32>
    %cst_706 = arith.constant dense<0.00142045459> : tensor<512xf32>
    %cst_707 = arith.constant dense<0.00141843967> : tensor<128xf32>
    %cst_708 = arith.constant dense<0.00141643058> : tensor<512xf32>
    %cst_709 = arith.constant dense<0.00141442718> : tensor<128xf32>
    %cst_710 = arith.constant dense<0.00141242938> : tensor<512xf32>
    %cst_711 = arith.constant dense<0.00141043728> : tensor<128xf32>
    %cst_712 = arith.constant dense<0.00140845065> : tensor<512xf32>
    %cst_713 = arith.constant dense<0.00140646973> : tensor<128xf32>
    %cst_714 = arith.constant dense<0.0014044944> : tensor<128xf32>
    %cst_715 = arith.constant dense<0.00140252453> : tensor<128xf32>
    %cst_716 = arith.constant dense<0.00140056026> : tensor<128xf32>
    %cst_717 = arith.constant dense<0.00139860145> : tensor<128xf32>
    %cst_718 = arith.constant dense<0.001396648> : tensor<512xf32>
    %cst_719 = arith.constant dense<0.00139470014> : tensor<128xf32>
    %cst_720 = arith.constant dense<0.00139275764> : tensor<512xf32>
    %cst_721 = arith.constant dense<0.0013908206> : tensor<128xf32>
    %cst_722 = arith.constant dense<0.00138888892> : tensor<512xf32>
    %cst_723 = arith.constant dense<0.0013869626> : tensor<128xf32>
    %cst_724 = arith.constant dense<0.00138504151> : tensor<512xf32>
    %cst_725 = arith.constant dense<0.0013831259> : tensor<128xf32>
    %cst_726 = arith.constant dense<0.00138121552> : tensor<512xf32>
    %cst_727 = arith.constant dense<0.00137931039> : tensor<128xf32>
    %cst_728 = arith.constant dense<0.00137741049> : tensor<128xf32>
    %cst_729 = arith.constant dense<0.00137551583> : tensor<128xf32>
    %cst_730 = arith.constant dense<0.00137362641> : tensor<128xf32>
    %cst_731 = arith.constant dense<0.00137174211> : tensor<128xf32>
    %cst_732 = arith.constant dense<0.00136986305> : tensor<512xf32>
    %cst_733 = arith.constant dense<0.00136798911> : tensor<128xf32>
    %cst_734 = arith.constant dense<0.00136612018> : tensor<512xf32>
    %cst_735 = arith.constant dense<0.00136425649> : tensor<128xf32>
    %cst_736 = arith.constant dense<0.0013623978> : tensor<512xf32>
    %cst_737 = arith.constant dense<0.00136054424> : tensor<128xf32>
    %cst_738 = arith.constant dense<0.00135869568> : tensor<512xf32>
    %cst_739 = arith.constant dense<0.00135685212> : tensor<128xf32>
    %cst_740 = arith.constant dense<0.00135501358> : tensor<512xf32>
    %cst_741 = arith.constant dense<0.00135317992> : tensor<128xf32>
    %cst_742 = arith.constant dense<0.00135135138> : tensor<128xf32>
    %cst_743 = arith.constant dense<0.00134952762> : tensor<128xf32>
    %cst_744 = arith.constant dense<0.00134770887> : tensor<128xf32>
    %cst_745 = arith.constant dense<0.001345895> : tensor<128xf32>
    %cst_746 = arith.constant dense<0.00134408602> : tensor<512xf32>
    %cst_747 = arith.constant dense<0.00134228193> : tensor<128xf32>
    %cst_748 = arith.constant dense<0.00134048262> : tensor<512xf32>
    %cst_749 = arith.constant dense<0.00133868807> : tensor<128xf32>
    %cst_750 = arith.constant dense<0.00133689842> : tensor<512xf32>
    %cst_751 = arith.constant dense<0.00133511354> : tensor<128xf32>
    %cst_752 = arith.constant dense<0.00133333332> : tensor<512xf32>
    %cst_753 = arith.constant dense<0.00133155787> : tensor<128xf32>
    %cst_754 = arith.constant dense<0.00132978719> : tensor<512xf32>
    %cst_755 = arith.constant dense<0.00132802129> : tensor<128xf32>
    %cst_756 = arith.constant dense<0.00132625992> : tensor<128xf32>
    %cst_757 = arith.constant dense<0.00132450333> : tensor<128xf32>
    %cst_758 = arith.constant dense<0.00132275128> : tensor<128xf32>
    %cst_759 = arith.constant dense<0.00132100401> : tensor<128xf32>
    %cst_760 = arith.constant dense<0.00131926127> : tensor<512xf32>
    %cst_761 = arith.constant dense<0.00131752307> : tensor<128xf32>
    %cst_762 = arith.constant dense<0.00131578953> : tensor<512xf32>
    %cst_763 = arith.constant dense<0.00131406041> : tensor<128xf32>
    %cst_764 = arith.constant dense<0.00131233595> : tensor<512xf32>
    %cst_765 = arith.constant dense<0.00131061603> : tensor<128xf32>
    %cst_766 = arith.constant dense<0.00130890054> : tensor<512xf32>
    %cst_767 = arith.constant dense<0.00130718958> : tensor<128xf32>
    %cst_768 = arith.constant dense<0.00130548305> : tensor<512xf32>
    %cst_769 = arith.constant dense<0.00130378094> : tensor<128xf32>
    %cst_770 = arith.constant dense<0.00130208337> : tensor<128xf32>
    %cst_771 = arith.constant dense<0.00130039011> : tensor<128xf32>
    %cst_772 = arith.constant dense<0.00129870127> : tensor<128xf32>
    %cst_773 = arith.constant dense<0.00129701686> : tensor<128xf32>
    %cst_774 = arith.constant dense<0.00129533675> : tensor<512xf32>
    %cst_775 = arith.constant dense<0.00129366107> : tensor<128xf32>
    %cst_776 = arith.constant dense<0.0012919897> : tensor<512xf32>
    %cst_777 = arith.constant dense<0.00129032263> : tensor<128xf32>
    %cst_778 = arith.constant dense<0.00128865975> : tensor<512xf32>
    %cst_779 = arith.constant dense<0.0012870013> : tensor<128xf32>
    %cst_780 = arith.constant dense<0.00128534704> : tensor<512xf32>
    %cst_781 = arith.constant dense<0.00128369709> : tensor<128xf32>
    %cst_782 = arith.constant dense<0.00128205132> : tensor<512xf32>
    %cst_783 = arith.constant dense<0.00128040975> : tensor<128xf32>
    %cst_784 = arith.constant dense<0.00127877237> : tensor<128xf32>
    %cst_785 = arith.constant dense<0.00127713918> : tensor<128xf32>
    %cst_786 = arith.constant dense<0.00127551018> : tensor<128xf32>
    %cst_787 = arith.constant dense<0.00127388537> : tensor<128xf32>
    %cst_788 = arith.constant dense<0.00127226464> : tensor<512xf32>
    %cst_789 = arith.constant dense<0.00127064798> : tensor<128xf32>
    %cst_790 = arith.constant dense<0.00126903551> : tensor<512xf32>
    %cst_791 = arith.constant dense<0.00126742711> : tensor<128xf32>
    %cst_792 = arith.constant dense<0.00126582279> : tensor<512xf32>
    %cst_793 = arith.constant dense<0.00126422255> : tensor<128xf32>
    %cst_794 = arith.constant dense<0.00126262626> : tensor<512xf32>
    %cst_795 = arith.constant dense<0.00126103405> : tensor<128xf32>
    %cst_796 = arith.constant dense<0.00125944579> : tensor<512xf32>
    %cst_797 = arith.constant dense<0.00125786162> : tensor<128xf32>
    %cst_798 = arith.constant dense<0.00125628139> : tensor<128xf32>
    %cst_799 = arith.constant dense<0.00125470513> : tensor<128xf32>
    %cst_800 = arith.constant dense<0.00125313282> : tensor<128xf32>
    %cst_801 = arith.constant dense<0.00125156448> : tensor<128xf32>
    %cst_802 = arith.constant dense<1.250000e-03> : tensor<512xf32>
    %cst_803 = arith.constant dense<0.00124843942> : tensor<128xf32>
    %cst_804 = arith.constant dense<0.00124688284> : tensor<512xf32>
    %cst_805 = arith.constant dense<1.245330e-03> : tensor<128xf32>
    %cst_806 = arith.constant dense<0.00124378107> : tensor<512xf32>
    %cst_807 = arith.constant dense<0.001242236> : tensor<128xf32>
    %cst_808 = arith.constant dense<0.00124069478> : tensor<512xf32>
    %cst_809 = arith.constant dense<0.0012391574> : tensor<128xf32>
    %cst_810 = arith.constant dense<0.00123762374> : tensor<512xf32>
    %cst_811 = arith.constant dense<0.00123609393> : tensor<128xf32>
    %cst_812 = arith.constant dense<0.00123456796> : tensor<128xf32>
    %cst_813 = arith.constant dense<0.00123304559> : tensor<128xf32>
    %cst_814 = arith.constant dense<0.00123152707> : tensor<128xf32>
    %cst_815 = arith.constant dense<0.00123001228> : tensor<128xf32>
    %cst_816 = arith.constant dense<0.00122850121> : tensor<512xf32>
    %cst_817 = arith.constant dense<0.00122699386> : tensor<128xf32>
    %cst_818 = arith.constant dense<0.00122549024> : tensor<512xf32>
    %cst_819 = arith.constant dense<0.00122399023> : tensor<128xf32>
    %cst_820 = arith.constant dense<0.00122249394> : tensor<512xf32>
    %cst_821 = arith.constant dense<0.00122100126> : tensor<128xf32>
    %cst_822 = arith.constant dense<0.0012195122> : tensor<512xf32>
    %cst_823 = arith.constant dense<0.00121802685> : tensor<128xf32>
    %cst_824 = arith.constant dense<0.001216545> : tensor<512xf32>
    %cst_825 = arith.constant dense<0.00121506688> : tensor<128xf32>
    %cst_826 = arith.constant dense<0.00121359224> : tensor<128xf32>
    %cst_827 = arith.constant dense<0.00121212122> : tensor<128xf32>
    %cst_828 = arith.constant dense<0.00121065381> : tensor<128xf32>
    %cst_829 = arith.constant dense<0.00120918988> : tensor<128xf32>
    %cst_830 = arith.constant dense<0.00120772945> : tensor<512xf32>
    %cst_831 = arith.constant dense<0.00120627263> : tensor<128xf32>
    %cst_832 = arith.constant dense<0.0012048193> : tensor<512xf32>
    %cst_833 = arith.constant dense<0.00120336947> : tensor<128xf32>
    %cst_834 = arith.constant dense<0.00120192312> : tensor<512xf32>
    %cst_835 = arith.constant dense<0.00120048015> : tensor<128xf32>
    %cst_836 = arith.constant dense<0.00119904079> : tensor<512xf32>
    %cst_837 = arith.constant dense<0.00119760481> : tensor<128xf32>
    %cst_838 = arith.constant dense<0.0011961722> : tensor<512xf32>
    %cst_839 = arith.constant dense<0.00119474309> : tensor<128xf32>
    %cst_840 = arith.constant dense<0.00119331747> : tensor<128xf32>
    %cst_841 = arith.constant dense<0.00119189511> : tensor<128xf32>
    %cst_842 = arith.constant dense<0.00119047624> : tensor<128xf32>
    %cst_843 = arith.constant dense<0.00118906063> : tensor<128xf32>
    %cst_844 = arith.constant dense<0.00118764851> : tensor<512xf32>
    %cst_845 = arith.constant dense<0.00118623965> : tensor<128xf32>
    %cst_846 = arith.constant dense<0.00118483417> : tensor<512xf32>
    %cst_847 = arith.constant dense<0.00118343194> : tensor<128xf32>
    %cst_848 = arith.constant dense<0.0011820331> : tensor<512xf32>
    %cst_849 = arith.constant dense<0.00118063751> : tensor<128xf32>
    %cst_850 = arith.constant dense<0.0011792453> : tensor<512xf32>
    %cst_851 = arith.constant dense<0.00117785635> : tensor<128xf32>
    %cst_852 = arith.constant dense<0.00117647054> : tensor<512xf32>
    %cst_853 = arith.constant dense<0.00117508811> : tensor<128xf32>
    %cst_854 = arith.constant dense<0.00117370894> : tensor<128xf32>
    %cst_855 = arith.constant dense<0.00117233291> : tensor<128xf32>
    %cst_856 = arith.constant dense<0.00117096014> : tensor<128xf32>
    %cst_857 = arith.constant dense<0.00116959063> : tensor<128xf32>
    %cst_858 = arith.constant dense<0.00116822426> : tensor<512xf32>
    %cst_859 = arith.constant dense<0.00116686116> : tensor<128xf32>
    %cst_860 = arith.constant dense<0.00116550119> : tensor<512xf32>
    %cst_861 = arith.constant dense<0.00116414437> : tensor<128xf32>
    %cst_862 = arith.constant dense<0.00116279069> : tensor<512xf32>
    %cst_863 = arith.constant dense<0.00116144016> : tensor<128xf32>
    %cst_864 = arith.constant dense<0.00116009277> : tensor<512xf32>
    %cst_865 = arith.constant dense<0.00115874852> : tensor<128xf32>
    %cst_866 = arith.constant dense<0.00115740742> : tensor<512xf32>
    %cst_867 = arith.constant dense<0.00115606934> : tensor<128xf32>
    %cst_868 = arith.constant dense<0.0011547344> : tensor<128xf32>
    %cst_869 = arith.constant dense<0.0011534025> : tensor<128xf32>
    %cst_870 = arith.constant dense<0.00115207373> : tensor<128xf32>
    %cst_871 = arith.constant dense<0.00115074799> : tensor<128xf32>
    %cst_872 = arith.constant dense<0.00114942528> : tensor<512xf32>
    %cst_873 = arith.constant dense<0.0011481056> : tensor<128xf32>
    %cst_874 = arith.constant dense<0.00114678894> : tensor<512xf32>
    %cst_875 = arith.constant dense<0.00114547543> : tensor<128xf32>
    %cst_876 = arith.constant dense<0.00114416471> : tensor<512xf32>
    %cst_877 = arith.constant dense<0.00114285713> : tensor<128xf32>
    %cst_878 = arith.constant dense<0.00114155246> : tensor<512xf32>
    %cst_879 = arith.constant dense<0.00114025082> : tensor<128xf32>
    %cst_880 = arith.constant dense<0.00113895221> : tensor<512xf32>
    %cst_881 = arith.constant dense<0.00113765639> : tensor<128xf32>
    %cst_882 = arith.constant dense<0.0011363636> : tensor<128xf32>
    %cst_883 = arith.constant dense<0.00113507384> : tensor<128xf32>
    %cst_884 = arith.constant dense<0.00113378686> : tensor<128xf32>
    %cst_885 = arith.constant dense<0.0011325028> : tensor<128xf32>
    %cst_886 = arith.constant dense<0.00113122177> : tensor<512xf32>
    %cst_887 = arith.constant dense<0.00112994353> : tensor<128xf32>
    %cst_888 = arith.constant dense<0.0011286682> : tensor<512xf32>
    %cst_889 = arith.constant dense<0.00112739566> : tensor<128xf32>
    %cst_890 = arith.constant dense<0.00112612615> : tensor<512xf32>
    %cst_891 = arith.constant dense<0.00112485944> : tensor<128xf32>
    %cst_892 = arith.constant dense<0.00112359552> : tensor<512xf32>
    %cst_893 = arith.constant dense<0.00112233451> : tensor<128xf32>
    %cst_894 = arith.constant dense<0.00112107629> : tensor<512xf32>
    %cst_895 = arith.constant dense<0.00111982087> : tensor<128xf32>
    %cst_896 = arith.constant dense<0.00111856824> : tensor<128xf32>
    %cst_897 = arith.constant dense<0.0011173184> : tensor<128xf32>
    %cst_898 = arith.constant dense<0.00111607148> : tensor<128xf32>
    %cst_899 = arith.constant dense<0.00111482723> : tensor<128xf32>
    %cst_900 = arith.constant dense<0.00111358578> : tensor<512xf32>
    %cst_901 = arith.constant dense<0.001112347> : tensor<128xf32>
    %cst_902 = arith.constant dense<0.00111111114> : tensor<512xf32>
    %cst_903 = arith.constant dense<0.00110987795> : tensor<128xf32>
    %cst_904 = arith.constant dense<0.00110864744> : tensor<512xf32>
    %cst_905 = arith.constant dense<0.00110741972> : tensor<128xf32>
    %cst_906 = arith.constant dense<0.00110619469> : tensor<512xf32>
    %cst_907 = arith.constant dense<0.00110497233> : tensor<128xf32>
    %cst_908 = arith.constant dense<0.00110375276> : tensor<512xf32>
    %cst_909 = arith.constant dense<0.00110253587> : tensor<128xf32>
    %cst_910 = arith.constant dense<0.00110132154> : tensor<128xf32>
    %cst_911 = arith.constant dense<1.100110e-03> : tensor<128xf32>
    %cst_912 = arith.constant dense<0.00109890115> : tensor<128xf32>
    %cst_913 = arith.constant dense<0.00109769485> : tensor<128xf32>
    %cst_914 = arith.constant dense<0.00109649124> : tensor<512xf32>
    %cst_915 = arith.constant dense<0.0010952903> : tensor<128xf32>
    %cst_916 = arith.constant dense<0.00109409192> : tensor<512xf32>
    %cst_917 = arith.constant dense<0.00109289621> : tensor<128xf32>
    %cst_918 = arith.constant dense<0.00109170307> : tensor<512xf32>
    %cst_919 = arith.constant dense<0.00109051249> : tensor<128xf32>
    %cst_920 = arith.constant dense<0.00108932459> : tensor<512xf32>
    %cst_921 = arith.constant dense<0.00108813925> : tensor<128xf32>
    %cst_922 = arith.constant dense<0.00108695647> : tensor<512xf32>
    %cst_923 = arith.constant dense<0.00108577637> : tensor<128xf32>
    %cst_924 = arith.constant dense<0.00108459871> : tensor<128xf32>
    %cst_925 = arith.constant dense<0.00108342362> : tensor<128xf32>
    %cst_926 = arith.constant dense<0.00108225108> : tensor<128xf32>
    %cst_927 = arith.constant dense<0.00108108111> : tensor<128xf32>
    %cst_928 = arith.constant dense<0.00107991358> : tensor<512xf32>
    %cst_929 = arith.constant dense<0.00107874861> : tensor<128xf32>
    %cst_930 = arith.constant dense<0.0010775862> : tensor<512xf32>
    %cst_931 = arith.constant dense<0.00107642624> : tensor<128xf32>
    %cst_932 = arith.constant dense<0.00107526884> : tensor<512xf32>
    %cst_933 = arith.constant dense<0.00107411388> : tensor<128xf32>
    %cst_934 = arith.constant dense<0.00107296137> : tensor<512xf32>
    %cst_935 = arith.constant dense<0.0010718113> : tensor<128xf32>
    %cst_936 = arith.constant dense<0.0010706638> : tensor<512xf32>
    %cst_937 = arith.constant dense<0.00106951874> : tensor<128xf32>
    %cst_938 = arith.constant dense<0.00106837612> : tensor<128xf32>
    %cst_939 = arith.constant dense<0.00106723583> : tensor<128xf32>
    %cst_940 = arith.constant dense<0.00106609811> : tensor<128xf32>
    %cst_941 = arith.constant dense<0.00106496271> : tensor<128xf32>
    %cst_942 = arith.constant dense<0.00106382975> : tensor<512xf32>
    %cst_943 = arith.constant dense<0.00106269924> : tensor<128xf32>
    %cst_944 = arith.constant dense<0.00106157118> : tensor<512xf32>
    %cst_945 = arith.constant dense<0.00106044544> : tensor<128xf32>
    %cst_946 = arith.constant dense<0.00105932204> : tensor<512xf32>
    %cst_947 = arith.constant dense<0.00105820107> : tensor<128xf32>
    %cst_948 = arith.constant dense<0.00105708244> : tensor<512xf32>
    %cst_949 = arith.constant dense<0.00105596625> : tensor<128xf32>
    %cst_950 = arith.constant dense<0.00105485227> : tensor<512xf32>
    %cst_951 = arith.constant dense<0.00105374074> : tensor<2xf32>
    %0 = tensor.empty() : tensor<1x384xf32>
    %1 = linalg.generic {indexing_maps = [#map, #map], iterator_types = ["parallel", "parallel"]} ins(%arg1 : tensor<1x384xi32>) outs(%0 : tensor<1x384xf32>) {
    ^bb0(%in: i32, %out: f32):
      %4421 = arith.sitofp %in : i32 to f32
      linalg.yield %4421 : f32
    } -> tensor<1x384xf32>
    %2 = tensor.empty() : tensor<1x384x384xf32>
    %3 = linalg.generic {indexing_maps = [#map1, #map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1, %cst_244 : tensor<1x384xf32>, tensor<1x384xf32>) outs(%2 : tensor<1x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x384xf32>
    %expanded = tensor.expand_shape %3 [[0, 1], [2], [3]] : tensor<1x384x384xf32> into tensor<1x1x384x384xf32>
    %4 = tensor.empty() : tensor<1x1x384x384xf32>
    %5 = linalg.generic {indexing_maps = [#map4, #map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_243, %expanded : tensor<1x1xf32>, tensor<1x1x384x384xf32>) outs(%4 : tensor<1x1x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x1x384x384xf32>
    %6 = tensor.empty() : tensor<1x1x384x384xf32>
    %7 = linalg.generic {indexing_maps = [#map5, #map4, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5, %cst_242 : tensor<1x1x384x384xf32>, tensor<1x1xf32>) outs(%6 : tensor<1x1x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x1x384x384xf32>
    %8 = tensor.empty() : tensor<1x384x512xf32>
    %9 = linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg2 : tensor<1x384xi32>) outs(%8 : tensor<1x384x512xf32>) {
    ^bb0(%in: i32, %out: f32):
      %4421 = linalg.index 0 : index
      %4422 = arith.index_cast %in : i32 to index
      %4423 = linalg.index 2 : index
      %extracted = tensor.extract %cst_609[%4421, %4422, %4423] : tensor<1x2x512xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x384x512xf32>
    %10 = tensor.empty() : tensor<1x384x128xf32>
    %11 = linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg0 : tensor<1x384xi32>) outs(%10 : tensor<1x384x128xf32>) {
    ^bb0(%in: i32, %out: f32):
      %4421 = linalg.index 0 : index
      %4422 = arith.index_cast %in : i32 to index
      %4423 = linalg.index 2 : index
      %extracted = tensor.extract %cst_608[%4421, %4422, %4423] : tensor<1x30522x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x384x128xf32>
    %extracted_slice = tensor.extract_slice %11[0, 1, 0] [1, 383, 128] [1, 1, 1] : tensor<1x384x128xf32> to tensor<1x383x128xf32>
    %padded = tensor.pad %extracted_slice low[%c0, %c0, %c0] high[%c0, %c1, %c0] {
    ^bb0(%arg3: index, %arg4: index, %arg5: index):
      tensor.yield %cst_607 : f32
    } : tensor<1x383x128xf32> to tensor<1x384x128xf32>
    %extracted_slice_952 = tensor.extract_slice %11[0, 0, 0] [1, 383, 128] [1, 1, 1] : tensor<1x384x128xf32> to tensor<1x383x128xf32>
    %padded_953 = tensor.pad %extracted_slice_952 low[%c0, %c1, %c0] high[%c0, %c0, %c0] {
    ^bb0(%arg3: index, %arg4: index, %arg5: index):
      tensor.yield %cst_607 : f32
    } : tensor<1x383x128xf32> to tensor<1x384x128xf32>
    %12 = tensor.empty() : tensor<1x384x384xf32>
    %inserted_slice = tensor.insert_slice %padded into %12[0, 0, 0] [1, 384, 128] [1, 1, 1] : tensor<1x384x128xf32> into tensor<1x384x384xf32>
    %inserted_slice_954 = tensor.insert_slice %11 into %inserted_slice[0, 0, 128] [1, 384, 128] [1, 1, 1] : tensor<1x384x128xf32> into tensor<1x384x384xf32>
    %inserted_slice_955 = tensor.insert_slice %padded_953 into %inserted_slice_954[0, 0, 256] [1, 384, 128] [1, 1, 1] : tensor<1x384x128xf32> into tensor<1x384x384xf32>
    %collapsed = tensor.collapse_shape %inserted_slice_955 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %13 = tensor.empty() : tensor<384x512xf32>
    %14 = linalg.fill ins(%cst_607 : f32) outs(%13 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %15 = tensor.empty() : tensor<384x512xf32>
    %16 = linalg.matmul ins(%collapsed, %cst_245 : tensor<384x384xf32>, tensor<384x512xf32>) outs(%14 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %17 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_613, %16 : tensor<512xf32>, tensor<384x512xf32>) outs(%15 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_956 = tensor.expand_shape %17 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %18 = tensor.empty() : tensor<1x384x512xf32>
    %19 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_956, %cst_614 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%18 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %20 = tensor.empty() : tensor<1x384x512xf32>
    %21 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%19, %9 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%20 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %22 = tensor.empty() : tensor<1x384x512xf32>
    %23 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%21, %cst_238 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%22 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %24 = tensor.empty() : tensor<1x384x512xf32>
    %25 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%23, %cst_237 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%24 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_957 = tensor.collapse_shape %21 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %26 = tensor.empty() : tensor<384x128xf32>
    %27 = linalg.fill ins(%cst_607 : f32) outs(%26 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %28 = tensor.empty() : tensor<384x128xf32>
    %29 = linalg.matmul ins(%collapsed_957, %cst_246 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%27 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %30 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_615, %29 : tensor<128xf32>, tensor<384x128xf32>) outs(%28 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_958 = tensor.expand_shape %30 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_959 = tensor.collapse_shape %21 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %31 = tensor.empty() : tensor<384x128xf32>
    %32 = linalg.fill ins(%cst_607 : f32) outs(%31 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %33 = tensor.empty() : tensor<384x128xf32>
    %34 = linalg.matmul ins(%collapsed_959, %cst_247 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%32 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %35 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_616, %34 : tensor<128xf32>, tensor<384x128xf32>) outs(%33 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_960 = tensor.expand_shape %35 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_961 = tensor.collapse_shape %25 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %36 = tensor.empty() : tensor<384x128xf32>
    %37 = linalg.fill ins(%cst_607 : f32) outs(%36 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %38 = tensor.empty() : tensor<384x128xf32>
    %39 = linalg.matmul ins(%collapsed_961, %cst_248 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%37 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %40 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %39 : tensor<128xf32>, tensor<384x128xf32>) outs(%38 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %41 = tensor.empty() : tensor<384x128xf32>
    %42 = linalg.fill ins(%cst_607 : f32) outs(%41 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %43 = tensor.empty() : tensor<384x128xf32>
    %44 = linalg.matmul ins(%40, %cst_249 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%42 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %45 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_617, %44 : tensor<128xf32>, tensor<384x128xf32>) outs(%43 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_962 = tensor.expand_shape %45 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %46 = tensor.empty() : tensor<384x128xf32>
    %47 = linalg.fill ins(%cst_607 : f32) outs(%46 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %48 = tensor.empty() : tensor<384x128xf32>
    %49 = linalg.matmul ins(%40, %cst_250 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%47 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %50 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_618, %49 : tensor<128xf32>, tensor<384x128xf32>) outs(%48 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_963 = tensor.expand_shape %50 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %51 = tensor.empty() : tensor<1x4x384x32xf32>
    %52 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_962 : tensor<1x384x4x32xf32>) outs(%51 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %53 = tensor.empty() : tensor<1x4x32x384xf32>
    %54 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_963 : tensor<1x384x4x32xf32>) outs(%53 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_964 = tensor.collapse_shape %52 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_965 = tensor.extract_slice %collapsed_964[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_966 = tensor.extract_slice %collapsed_964[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_967 = tensor.extract_slice %collapsed_964[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_968 = tensor.extract_slice %collapsed_964[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_969 = tensor.collapse_shape %54 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_970 = tensor.extract_slice %collapsed_969[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_971 = tensor.extract_slice %collapsed_969[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_972 = tensor.extract_slice %collapsed_969[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_973 = tensor.extract_slice %collapsed_969[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_974 = tensor.collapse_shape %extracted_slice_970 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_975 = tensor.collapse_shape %extracted_slice_971 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_976 = tensor.collapse_shape %extracted_slice_972 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_977 = tensor.collapse_shape %extracted_slice_973 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_978 = tensor.collapse_shape %extracted_slice_965 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %55 = tensor.empty() : tensor<384x384xf32>
    %56 = linalg.fill ins(%cst_607 : f32) outs(%55 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %57 = tensor.empty() : tensor<384x384xf32>
    %58 = linalg.matmul ins(%collapsed_978, %collapsed_974 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%56 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %59 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %58 : tensor<384xf32>, tensor<384x384xf32>) outs(%57 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_979 = tensor.collapse_shape %extracted_slice_966 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %60 = tensor.empty() : tensor<384x384xf32>
    %61 = linalg.fill ins(%cst_607 : f32) outs(%60 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %62 = tensor.empty() : tensor<384x384xf32>
    %63 = linalg.matmul ins(%collapsed_979, %collapsed_975 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%61 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %64 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %63 : tensor<384xf32>, tensor<384x384xf32>) outs(%62 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_980 = tensor.collapse_shape %extracted_slice_967 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %65 = tensor.empty() : tensor<384x384xf32>
    %66 = linalg.fill ins(%cst_607 : f32) outs(%65 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %67 = tensor.empty() : tensor<384x384xf32>
    %68 = linalg.matmul ins(%collapsed_980, %collapsed_976 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%66 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %69 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %68 : tensor<384xf32>, tensor<384x384xf32>) outs(%67 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_981 = tensor.collapse_shape %extracted_slice_968 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %70 = tensor.empty() : tensor<384x384xf32>
    %71 = linalg.fill ins(%cst_607 : f32) outs(%70 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %72 = tensor.empty() : tensor<384x384xf32>
    %73 = linalg.matmul ins(%collapsed_981, %collapsed_977 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%71 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %74 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %73 : tensor<384xf32>, tensor<384x384xf32>) outs(%72 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %75 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_982 = tensor.insert_slice %59 into %75[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_983 = tensor.insert_slice %64 into %inserted_slice_982[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_984 = tensor.insert_slice %69 into %inserted_slice_983[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_985 = tensor.insert_slice %74 into %inserted_slice_984[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_986 = tensor.expand_shape %inserted_slice_985 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %76 = tensor.empty() : tensor<1x4x384x384xf32>
    %77 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_986 : tensor<1x4x384x384xf32>) outs(%76 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %78 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_987 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %79 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%77, %collapsed_987 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%78 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %80 = tensor.empty() : tensor<1x4x384xf32>
    %81 = linalg.fill ins(%cst_241 : f32) outs(%80 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %82 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%79 : tensor<1x4x384x384xf32>) outs(%81 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %83 = tensor.empty() : tensor<1x4x384x384xf32>
    %84 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%79, %82 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%83 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %85 = tensor.empty() : tensor<1x4x384x384xf32>
    %86 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%84 : tensor<1x4x384x384xf32>) outs(%85 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %87 = tensor.empty() : tensor<1x4x384xf32>
    %88 = linalg.fill ins(%cst_607 : f32) outs(%87 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %89 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%86 : tensor<1x4x384x384xf32>) outs(%88 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_988 = tensor.expand_shape %89 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %90 = tensor.empty() : tensor<1x4x384x1xf32>
    %91 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_988 : tensor<1x4x384x1xf32>) outs(%90 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %92 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_989 = tensor.collapse_shape %91 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %93 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%86, %collapsed_989 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%92 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %94 = tensor.empty() : tensor<1x4x384x32xf32>
    %95 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_958 : tensor<1x384x4x32xf32>) outs(%94 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_990 = tensor.collapse_shape %93 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_991 = tensor.extract_slice %collapsed_990[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_992 = tensor.extract_slice %collapsed_990[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_993 = tensor.extract_slice %collapsed_990[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_994 = tensor.extract_slice %collapsed_990[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_995 = tensor.collapse_shape %95 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_996 = tensor.extract_slice %collapsed_995[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_997 = tensor.extract_slice %collapsed_995[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_998 = tensor.extract_slice %collapsed_995[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_999 = tensor.extract_slice %collapsed_995[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1000 = tensor.collapse_shape %extracted_slice_996 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1001 = tensor.collapse_shape %extracted_slice_997 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1002 = tensor.collapse_shape %extracted_slice_998 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1003 = tensor.collapse_shape %extracted_slice_999 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1004 = tensor.collapse_shape %extracted_slice_991 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %96 = tensor.empty() : tensor<384x32xf32>
    %97 = linalg.fill ins(%cst_607 : f32) outs(%96 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %98 = tensor.empty() : tensor<384x32xf32>
    %99 = linalg.matmul ins(%collapsed_1004, %collapsed_1000 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%97 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %100 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %99 : tensor<32xf32>, tensor<384x32xf32>) outs(%98 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1005 = tensor.collapse_shape %extracted_slice_992 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %101 = tensor.empty() : tensor<384x32xf32>
    %102 = linalg.fill ins(%cst_607 : f32) outs(%101 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %103 = tensor.empty() : tensor<384x32xf32>
    %104 = linalg.matmul ins(%collapsed_1005, %collapsed_1001 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%102 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %105 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %104 : tensor<32xf32>, tensor<384x32xf32>) outs(%103 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1006 = tensor.collapse_shape %extracted_slice_993 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %106 = tensor.empty() : tensor<384x32xf32>
    %107 = linalg.fill ins(%cst_607 : f32) outs(%106 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %108 = tensor.empty() : tensor<384x32xf32>
    %109 = linalg.matmul ins(%collapsed_1006, %collapsed_1002 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%107 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %110 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %109 : tensor<32xf32>, tensor<384x32xf32>) outs(%108 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1007 = tensor.collapse_shape %extracted_slice_994 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %111 = tensor.empty() : tensor<384x32xf32>
    %112 = linalg.fill ins(%cst_607 : f32) outs(%111 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %113 = tensor.empty() : tensor<384x32xf32>
    %114 = linalg.matmul ins(%collapsed_1007, %collapsed_1003 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%112 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %115 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %114 : tensor<32xf32>, tensor<384x32xf32>) outs(%113 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %116 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1008 = tensor.insert_slice %100 into %116[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1009 = tensor.insert_slice %105 into %inserted_slice_1008[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1010 = tensor.insert_slice %110 into %inserted_slice_1009[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1011 = tensor.insert_slice %115 into %inserted_slice_1010[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1012 = tensor.expand_shape %inserted_slice_1011 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %117 = tensor.empty() : tensor<1x384x4x32xf32>
    %118 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1012 : tensor<1x4x384x32xf32>) outs(%117 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1013 = tensor.collapse_shape %118 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %119 = tensor.empty() : tensor<384x128xf32>
    %120 = linalg.fill ins(%cst_607 : f32) outs(%119 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %121 = tensor.empty() : tensor<384x128xf32>
    %122 = linalg.matmul ins(%collapsed_1013, %cst_251 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%120 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %123 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_619, %122 : tensor<128xf32>, tensor<384x128xf32>) outs(%121 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1014 = tensor.expand_shape %123 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %124 = tensor.empty() : tensor<1x384x128xf32>
    %125 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1014, %expanded_960 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%124 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %126 = tensor.empty() : tensor<1x384x128xf32>
    %127 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%125, %cst_236 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%126 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %128 = tensor.empty() : tensor<1x384x128xf32>
    %129 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%127, %cst_235 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%128 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1015 = tensor.collapse_shape %125 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %130 = tensor.empty() : tensor<384x512xf32>
    %131 = linalg.fill ins(%cst_607 : f32) outs(%130 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %132 = tensor.empty() : tensor<384x512xf32>
    %133 = linalg.matmul ins(%collapsed_1015, %cst_252 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%131 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %134 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_620, %133 : tensor<512xf32>, tensor<384x512xf32>) outs(%132 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1016 = tensor.expand_shape %134 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %135 = tensor.empty() : tensor<1x384x512xf32>
    %136 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1016 : tensor<1x384x512xf32>) outs(%135 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1017 = tensor.collapse_shape %136 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %137 = tensor.empty() : tensor<384x128xf32>
    %138 = linalg.fill ins(%cst_607 : f32) outs(%137 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %139 = tensor.empty() : tensor<384x128xf32>
    %140 = linalg.matmul ins(%collapsed_1017, %cst_253 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%138 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %141 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_621, %140 : tensor<128xf32>, tensor<384x128xf32>) outs(%139 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1018 = tensor.expand_shape %141 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %142 = tensor.empty() : tensor<1x384x128xf32>
    %143 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1018, %129 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%142 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %144 = tensor.empty() : tensor<1x384x128xf32>
    %145 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%143, %cst_234 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%144 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %146 = tensor.empty() : tensor<1x384x128xf32>
    %147 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%145, %cst_233 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%146 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1019 = tensor.collapse_shape %143 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %148 = tensor.empty() : tensor<384x512xf32>
    %149 = linalg.fill ins(%cst_607 : f32) outs(%148 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %150 = tensor.empty() : tensor<384x512xf32>
    %151 = linalg.matmul ins(%collapsed_1019, %cst_254 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%149 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %152 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_622, %151 : tensor<512xf32>, tensor<384x512xf32>) outs(%150 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1020 = tensor.expand_shape %152 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %153 = tensor.empty() : tensor<1x384x512xf32>
    %154 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1020 : tensor<1x384x512xf32>) outs(%153 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1021 = tensor.collapse_shape %154 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %155 = tensor.empty() : tensor<384x128xf32>
    %156 = linalg.fill ins(%cst_607 : f32) outs(%155 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %157 = tensor.empty() : tensor<384x128xf32>
    %158 = linalg.matmul ins(%collapsed_1021, %cst_255 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%156 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %159 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_623, %158 : tensor<128xf32>, tensor<384x128xf32>) outs(%157 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1022 = tensor.expand_shape %159 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %160 = tensor.empty() : tensor<1x384x128xf32>
    %161 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1022, %147 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%160 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %162 = tensor.empty() : tensor<1x384x128xf32>
    %163 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%161, %cst_232 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%162 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %164 = tensor.empty() : tensor<1x384x128xf32>
    %165 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%163, %cst_231 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%164 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1023 = tensor.collapse_shape %161 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %166 = tensor.empty() : tensor<384x512xf32>
    %167 = linalg.fill ins(%cst_607 : f32) outs(%166 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %168 = tensor.empty() : tensor<384x512xf32>
    %169 = linalg.matmul ins(%collapsed_1023, %cst_256 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%167 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %170 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_624, %169 : tensor<512xf32>, tensor<384x512xf32>) outs(%168 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1024 = tensor.expand_shape %170 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %171 = tensor.empty() : tensor<1x384x512xf32>
    %172 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1024 : tensor<1x384x512xf32>) outs(%171 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1025 = tensor.collapse_shape %172 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %173 = tensor.empty() : tensor<384x128xf32>
    %174 = linalg.fill ins(%cst_607 : f32) outs(%173 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %175 = tensor.empty() : tensor<384x128xf32>
    %176 = linalg.matmul ins(%collapsed_1025, %cst_257 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%174 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %177 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_625, %176 : tensor<128xf32>, tensor<384x128xf32>) outs(%175 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1026 = tensor.expand_shape %177 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %178 = tensor.empty() : tensor<1x384x128xf32>
    %179 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1026, %165 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%178 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %180 = tensor.empty() : tensor<1x384x128xf32>
    %181 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%179, %cst_230 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%180 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %182 = tensor.empty() : tensor<1x384x128xf32>
    %183 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%181, %cst_229 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%182 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1027 = tensor.collapse_shape %179 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %184 = tensor.empty() : tensor<384x512xf32>
    %185 = linalg.fill ins(%cst_607 : f32) outs(%184 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %186 = tensor.empty() : tensor<384x512xf32>
    %187 = linalg.matmul ins(%collapsed_1027, %cst_258 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%185 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %188 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_626, %187 : tensor<512xf32>, tensor<384x512xf32>) outs(%186 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1028 = tensor.expand_shape %188 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %189 = tensor.empty() : tensor<1x384x512xf32>
    %190 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1028 : tensor<1x384x512xf32>) outs(%189 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1029 = tensor.collapse_shape %190 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %191 = tensor.empty() : tensor<384x128xf32>
    %192 = linalg.fill ins(%cst_607 : f32) outs(%191 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %193 = tensor.empty() : tensor<384x128xf32>
    %194 = linalg.matmul ins(%collapsed_1029, %cst_259 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%192 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %195 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_627, %194 : tensor<128xf32>, tensor<384x128xf32>) outs(%193 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1030 = tensor.expand_shape %195 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %196 = tensor.empty() : tensor<1x384x128xf32>
    %197 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1030, %183 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%196 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1031 = tensor.collapse_shape %197 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %198 = tensor.empty() : tensor<384x512xf32>
    %199 = linalg.fill ins(%cst_607 : f32) outs(%198 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %200 = tensor.empty() : tensor<384x512xf32>
    %201 = linalg.matmul ins(%collapsed_1031, %cst_260 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%199 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %202 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_628, %201 : tensor<512xf32>, tensor<384x512xf32>) outs(%200 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1032 = tensor.expand_shape %202 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %203 = tensor.empty() : tensor<1x384x512xf32>
    %204 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1032, %25 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%203 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %205 = tensor.empty() : tensor<1x384x512xf32>
    %206 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%204, %cst_228 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%205 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %207 = tensor.empty() : tensor<1x384x512xf32>
    %208 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%206, %cst_227 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%207 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1033 = tensor.collapse_shape %204 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %209 = tensor.empty() : tensor<384x128xf32>
    %210 = linalg.fill ins(%cst_607 : f32) outs(%209 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %211 = tensor.empty() : tensor<384x128xf32>
    %212 = linalg.matmul ins(%collapsed_1033, %cst_261 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%210 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %213 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_629, %212 : tensor<128xf32>, tensor<384x128xf32>) outs(%211 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1034 = tensor.expand_shape %213 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1035 = tensor.collapse_shape %204 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %214 = tensor.empty() : tensor<384x128xf32>
    %215 = linalg.fill ins(%cst_607 : f32) outs(%214 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %216 = tensor.empty() : tensor<384x128xf32>
    %217 = linalg.matmul ins(%collapsed_1035, %cst_262 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%215 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %218 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_630, %217 : tensor<128xf32>, tensor<384x128xf32>) outs(%216 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1036 = tensor.expand_shape %218 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1037 = tensor.collapse_shape %208 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %219 = tensor.empty() : tensor<384x128xf32>
    %220 = linalg.fill ins(%cst_607 : f32) outs(%219 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %221 = tensor.empty() : tensor<384x128xf32>
    %222 = linalg.matmul ins(%collapsed_1037, %cst_263 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%220 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %223 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %222 : tensor<128xf32>, tensor<384x128xf32>) outs(%221 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %224 = tensor.empty() : tensor<384x128xf32>
    %225 = linalg.fill ins(%cst_607 : f32) outs(%224 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %226 = tensor.empty() : tensor<384x128xf32>
    %227 = linalg.matmul ins(%223, %cst_264 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%225 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %228 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_631, %227 : tensor<128xf32>, tensor<384x128xf32>) outs(%226 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1038 = tensor.expand_shape %228 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %229 = tensor.empty() : tensor<384x128xf32>
    %230 = linalg.fill ins(%cst_607 : f32) outs(%229 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %231 = tensor.empty() : tensor<384x128xf32>
    %232 = linalg.matmul ins(%223, %cst_265 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%230 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %233 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_632, %232 : tensor<128xf32>, tensor<384x128xf32>) outs(%231 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1039 = tensor.expand_shape %233 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %234 = tensor.empty() : tensor<1x4x384x32xf32>
    %235 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1038 : tensor<1x384x4x32xf32>) outs(%234 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %236 = tensor.empty() : tensor<1x4x32x384xf32>
    %237 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1039 : tensor<1x384x4x32xf32>) outs(%236 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1040 = tensor.collapse_shape %235 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1041 = tensor.extract_slice %collapsed_1040[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1042 = tensor.extract_slice %collapsed_1040[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1043 = tensor.extract_slice %collapsed_1040[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1044 = tensor.extract_slice %collapsed_1040[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1045 = tensor.collapse_shape %237 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1046 = tensor.extract_slice %collapsed_1045[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1047 = tensor.extract_slice %collapsed_1045[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1048 = tensor.extract_slice %collapsed_1045[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1049 = tensor.extract_slice %collapsed_1045[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1050 = tensor.collapse_shape %extracted_slice_1046 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1051 = tensor.collapse_shape %extracted_slice_1047 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1052 = tensor.collapse_shape %extracted_slice_1048 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1053 = tensor.collapse_shape %extracted_slice_1049 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1054 = tensor.collapse_shape %extracted_slice_1041 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %238 = tensor.empty() : tensor<384x384xf32>
    %239 = linalg.fill ins(%cst_607 : f32) outs(%238 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %240 = tensor.empty() : tensor<384x384xf32>
    %241 = linalg.matmul ins(%collapsed_1054, %collapsed_1050 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%239 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %242 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %241 : tensor<384xf32>, tensor<384x384xf32>) outs(%240 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1055 = tensor.collapse_shape %extracted_slice_1042 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %243 = tensor.empty() : tensor<384x384xf32>
    %244 = linalg.fill ins(%cst_607 : f32) outs(%243 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %245 = tensor.empty() : tensor<384x384xf32>
    %246 = linalg.matmul ins(%collapsed_1055, %collapsed_1051 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%244 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %247 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %246 : tensor<384xf32>, tensor<384x384xf32>) outs(%245 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1056 = tensor.collapse_shape %extracted_slice_1043 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %248 = tensor.empty() : tensor<384x384xf32>
    %249 = linalg.fill ins(%cst_607 : f32) outs(%248 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %250 = tensor.empty() : tensor<384x384xf32>
    %251 = linalg.matmul ins(%collapsed_1056, %collapsed_1052 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%249 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %252 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %251 : tensor<384xf32>, tensor<384x384xf32>) outs(%250 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1057 = tensor.collapse_shape %extracted_slice_1044 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %253 = tensor.empty() : tensor<384x384xf32>
    %254 = linalg.fill ins(%cst_607 : f32) outs(%253 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %255 = tensor.empty() : tensor<384x384xf32>
    %256 = linalg.matmul ins(%collapsed_1057, %collapsed_1053 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%254 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %257 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %256 : tensor<384xf32>, tensor<384x384xf32>) outs(%255 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %258 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1058 = tensor.insert_slice %242 into %258[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1059 = tensor.insert_slice %247 into %inserted_slice_1058[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1060 = tensor.insert_slice %252 into %inserted_slice_1059[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1061 = tensor.insert_slice %257 into %inserted_slice_1060[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1062 = tensor.expand_shape %inserted_slice_1061 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %259 = tensor.empty() : tensor<1x4x384x384xf32>
    %260 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1062 : tensor<1x4x384x384xf32>) outs(%259 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %261 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1063 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %262 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%260, %collapsed_1063 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%261 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %263 = tensor.empty() : tensor<1x4x384xf32>
    %264 = linalg.fill ins(%cst_241 : f32) outs(%263 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %265 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%262 : tensor<1x4x384x384xf32>) outs(%264 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %266 = tensor.empty() : tensor<1x4x384x384xf32>
    %267 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%262, %265 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%266 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %268 = tensor.empty() : tensor<1x4x384x384xf32>
    %269 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%267 : tensor<1x4x384x384xf32>) outs(%268 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %270 = tensor.empty() : tensor<1x4x384xf32>
    %271 = linalg.fill ins(%cst_607 : f32) outs(%270 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %272 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%269 : tensor<1x4x384x384xf32>) outs(%271 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1064 = tensor.expand_shape %272 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %273 = tensor.empty() : tensor<1x4x384x1xf32>
    %274 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1064 : tensor<1x4x384x1xf32>) outs(%273 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %275 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1065 = tensor.collapse_shape %274 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %276 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%269, %collapsed_1065 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%275 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %277 = tensor.empty() : tensor<1x4x384x32xf32>
    %278 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1034 : tensor<1x384x4x32xf32>) outs(%277 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1066 = tensor.collapse_shape %276 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1067 = tensor.extract_slice %collapsed_1066[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1068 = tensor.extract_slice %collapsed_1066[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1069 = tensor.extract_slice %collapsed_1066[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1070 = tensor.extract_slice %collapsed_1066[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1071 = tensor.collapse_shape %278 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1072 = tensor.extract_slice %collapsed_1071[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1073 = tensor.extract_slice %collapsed_1071[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1074 = tensor.extract_slice %collapsed_1071[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1075 = tensor.extract_slice %collapsed_1071[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1076 = tensor.collapse_shape %extracted_slice_1072 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1077 = tensor.collapse_shape %extracted_slice_1073 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1078 = tensor.collapse_shape %extracted_slice_1074 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1079 = tensor.collapse_shape %extracted_slice_1075 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1080 = tensor.collapse_shape %extracted_slice_1067 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %279 = tensor.empty() : tensor<384x32xf32>
    %280 = linalg.fill ins(%cst_607 : f32) outs(%279 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %281 = tensor.empty() : tensor<384x32xf32>
    %282 = linalg.matmul ins(%collapsed_1080, %collapsed_1076 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%280 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %283 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %282 : tensor<32xf32>, tensor<384x32xf32>) outs(%281 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1081 = tensor.collapse_shape %extracted_slice_1068 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %284 = tensor.empty() : tensor<384x32xf32>
    %285 = linalg.fill ins(%cst_607 : f32) outs(%284 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %286 = tensor.empty() : tensor<384x32xf32>
    %287 = linalg.matmul ins(%collapsed_1081, %collapsed_1077 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%285 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %288 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %287 : tensor<32xf32>, tensor<384x32xf32>) outs(%286 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1082 = tensor.collapse_shape %extracted_slice_1069 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %289 = tensor.empty() : tensor<384x32xf32>
    %290 = linalg.fill ins(%cst_607 : f32) outs(%289 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %291 = tensor.empty() : tensor<384x32xf32>
    %292 = linalg.matmul ins(%collapsed_1082, %collapsed_1078 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%290 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %293 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %292 : tensor<32xf32>, tensor<384x32xf32>) outs(%291 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1083 = tensor.collapse_shape %extracted_slice_1070 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %294 = tensor.empty() : tensor<384x32xf32>
    %295 = linalg.fill ins(%cst_607 : f32) outs(%294 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %296 = tensor.empty() : tensor<384x32xf32>
    %297 = linalg.matmul ins(%collapsed_1083, %collapsed_1079 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%295 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %298 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %297 : tensor<32xf32>, tensor<384x32xf32>) outs(%296 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %299 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1084 = tensor.insert_slice %283 into %299[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1085 = tensor.insert_slice %288 into %inserted_slice_1084[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1086 = tensor.insert_slice %293 into %inserted_slice_1085[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1087 = tensor.insert_slice %298 into %inserted_slice_1086[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1088 = tensor.expand_shape %inserted_slice_1087 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %300 = tensor.empty() : tensor<1x384x4x32xf32>
    %301 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1088 : tensor<1x4x384x32xf32>) outs(%300 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1089 = tensor.collapse_shape %301 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %302 = tensor.empty() : tensor<384x128xf32>
    %303 = linalg.fill ins(%cst_607 : f32) outs(%302 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %304 = tensor.empty() : tensor<384x128xf32>
    %305 = linalg.matmul ins(%collapsed_1089, %cst_266 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%303 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %306 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_633, %305 : tensor<128xf32>, tensor<384x128xf32>) outs(%304 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1090 = tensor.expand_shape %306 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %307 = tensor.empty() : tensor<1x384x128xf32>
    %308 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1090, %expanded_1036 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%307 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %309 = tensor.empty() : tensor<1x384x128xf32>
    %310 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%308, %cst_226 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%309 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %311 = tensor.empty() : tensor<1x384x128xf32>
    %312 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%310, %cst_225 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%311 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1091 = tensor.collapse_shape %308 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %313 = tensor.empty() : tensor<384x512xf32>
    %314 = linalg.fill ins(%cst_607 : f32) outs(%313 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %315 = tensor.empty() : tensor<384x512xf32>
    %316 = linalg.matmul ins(%collapsed_1091, %cst_267 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%314 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %317 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_634, %316 : tensor<512xf32>, tensor<384x512xf32>) outs(%315 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1092 = tensor.expand_shape %317 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %318 = tensor.empty() : tensor<1x384x512xf32>
    %319 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1092 : tensor<1x384x512xf32>) outs(%318 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1093 = tensor.collapse_shape %319 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %320 = tensor.empty() : tensor<384x128xf32>
    %321 = linalg.fill ins(%cst_607 : f32) outs(%320 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %322 = tensor.empty() : tensor<384x128xf32>
    %323 = linalg.matmul ins(%collapsed_1093, %cst_268 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%321 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %324 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_635, %323 : tensor<128xf32>, tensor<384x128xf32>) outs(%322 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1094 = tensor.expand_shape %324 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %325 = tensor.empty() : tensor<1x384x128xf32>
    %326 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1094, %312 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%325 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %327 = tensor.empty() : tensor<1x384x128xf32>
    %328 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%326, %cst_224 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%327 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %329 = tensor.empty() : tensor<1x384x128xf32>
    %330 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%328, %cst_223 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%329 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1095 = tensor.collapse_shape %326 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %331 = tensor.empty() : tensor<384x512xf32>
    %332 = linalg.fill ins(%cst_607 : f32) outs(%331 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %333 = tensor.empty() : tensor<384x512xf32>
    %334 = linalg.matmul ins(%collapsed_1095, %cst_269 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%332 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %335 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_636, %334 : tensor<512xf32>, tensor<384x512xf32>) outs(%333 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1096 = tensor.expand_shape %335 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %336 = tensor.empty() : tensor<1x384x512xf32>
    %337 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1096 : tensor<1x384x512xf32>) outs(%336 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1097 = tensor.collapse_shape %337 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %338 = tensor.empty() : tensor<384x128xf32>
    %339 = linalg.fill ins(%cst_607 : f32) outs(%338 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %340 = tensor.empty() : tensor<384x128xf32>
    %341 = linalg.matmul ins(%collapsed_1097, %cst_270 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%339 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %342 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_637, %341 : tensor<128xf32>, tensor<384x128xf32>) outs(%340 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1098 = tensor.expand_shape %342 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %343 = tensor.empty() : tensor<1x384x128xf32>
    %344 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1098, %330 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%343 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %345 = tensor.empty() : tensor<1x384x128xf32>
    %346 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%344, %cst_222 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%345 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %347 = tensor.empty() : tensor<1x384x128xf32>
    %348 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%346, %cst_221 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%347 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1099 = tensor.collapse_shape %344 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %349 = tensor.empty() : tensor<384x512xf32>
    %350 = linalg.fill ins(%cst_607 : f32) outs(%349 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %351 = tensor.empty() : tensor<384x512xf32>
    %352 = linalg.matmul ins(%collapsed_1099, %cst_271 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%350 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %353 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_638, %352 : tensor<512xf32>, tensor<384x512xf32>) outs(%351 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1100 = tensor.expand_shape %353 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %354 = tensor.empty() : tensor<1x384x512xf32>
    %355 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1100 : tensor<1x384x512xf32>) outs(%354 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1101 = tensor.collapse_shape %355 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %356 = tensor.empty() : tensor<384x128xf32>
    %357 = linalg.fill ins(%cst_607 : f32) outs(%356 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %358 = tensor.empty() : tensor<384x128xf32>
    %359 = linalg.matmul ins(%collapsed_1101, %cst_272 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%357 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %360 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_639, %359 : tensor<128xf32>, tensor<384x128xf32>) outs(%358 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1102 = tensor.expand_shape %360 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %361 = tensor.empty() : tensor<1x384x128xf32>
    %362 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1102, %348 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%361 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %363 = tensor.empty() : tensor<1x384x128xf32>
    %364 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%362, %cst_220 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%363 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %365 = tensor.empty() : tensor<1x384x128xf32>
    %366 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%364, %cst_219 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%365 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1103 = tensor.collapse_shape %362 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %367 = tensor.empty() : tensor<384x512xf32>
    %368 = linalg.fill ins(%cst_607 : f32) outs(%367 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %369 = tensor.empty() : tensor<384x512xf32>
    %370 = linalg.matmul ins(%collapsed_1103, %cst_273 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%368 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %371 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_640, %370 : tensor<512xf32>, tensor<384x512xf32>) outs(%369 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1104 = tensor.expand_shape %371 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %372 = tensor.empty() : tensor<1x384x512xf32>
    %373 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1104 : tensor<1x384x512xf32>) outs(%372 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1105 = tensor.collapse_shape %373 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %374 = tensor.empty() : tensor<384x128xf32>
    %375 = linalg.fill ins(%cst_607 : f32) outs(%374 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %376 = tensor.empty() : tensor<384x128xf32>
    %377 = linalg.matmul ins(%collapsed_1105, %cst_274 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%375 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %378 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_641, %377 : tensor<128xf32>, tensor<384x128xf32>) outs(%376 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1106 = tensor.expand_shape %378 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %379 = tensor.empty() : tensor<1x384x128xf32>
    %380 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1106, %366 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%379 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1107 = tensor.collapse_shape %380 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %381 = tensor.empty() : tensor<384x512xf32>
    %382 = linalg.fill ins(%cst_607 : f32) outs(%381 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %383 = tensor.empty() : tensor<384x512xf32>
    %384 = linalg.matmul ins(%collapsed_1107, %cst_275 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%382 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %385 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_642, %384 : tensor<512xf32>, tensor<384x512xf32>) outs(%383 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1108 = tensor.expand_shape %385 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %386 = tensor.empty() : tensor<1x384x512xf32>
    %387 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1108, %208 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%386 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %388 = tensor.empty() : tensor<1x384x512xf32>
    %389 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%387, %cst_218 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%388 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %390 = tensor.empty() : tensor<1x384x512xf32>
    %391 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%389, %cst_217 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%390 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1109 = tensor.collapse_shape %387 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %392 = tensor.empty() : tensor<384x128xf32>
    %393 = linalg.fill ins(%cst_607 : f32) outs(%392 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %394 = tensor.empty() : tensor<384x128xf32>
    %395 = linalg.matmul ins(%collapsed_1109, %cst_276 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%393 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %396 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_643, %395 : tensor<128xf32>, tensor<384x128xf32>) outs(%394 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1110 = tensor.expand_shape %396 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1111 = tensor.collapse_shape %387 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %397 = tensor.empty() : tensor<384x128xf32>
    %398 = linalg.fill ins(%cst_607 : f32) outs(%397 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %399 = tensor.empty() : tensor<384x128xf32>
    %400 = linalg.matmul ins(%collapsed_1111, %cst_277 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%398 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %401 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_644, %400 : tensor<128xf32>, tensor<384x128xf32>) outs(%399 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1112 = tensor.expand_shape %401 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1113 = tensor.collapse_shape %391 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %402 = tensor.empty() : tensor<384x128xf32>
    %403 = linalg.fill ins(%cst_607 : f32) outs(%402 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %404 = tensor.empty() : tensor<384x128xf32>
    %405 = linalg.matmul ins(%collapsed_1113, %cst_278 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%403 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %406 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %405 : tensor<128xf32>, tensor<384x128xf32>) outs(%404 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %407 = tensor.empty() : tensor<384x128xf32>
    %408 = linalg.fill ins(%cst_607 : f32) outs(%407 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %409 = tensor.empty() : tensor<384x128xf32>
    %410 = linalg.matmul ins(%406, %cst_279 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%408 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %411 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_645, %410 : tensor<128xf32>, tensor<384x128xf32>) outs(%409 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1114 = tensor.expand_shape %411 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %412 = tensor.empty() : tensor<384x128xf32>
    %413 = linalg.fill ins(%cst_607 : f32) outs(%412 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %414 = tensor.empty() : tensor<384x128xf32>
    %415 = linalg.matmul ins(%406, %cst_280 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%413 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %416 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_646, %415 : tensor<128xf32>, tensor<384x128xf32>) outs(%414 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1115 = tensor.expand_shape %416 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %417 = tensor.empty() : tensor<1x4x384x32xf32>
    %418 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1114 : tensor<1x384x4x32xf32>) outs(%417 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %419 = tensor.empty() : tensor<1x4x32x384xf32>
    %420 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1115 : tensor<1x384x4x32xf32>) outs(%419 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1116 = tensor.collapse_shape %418 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1117 = tensor.extract_slice %collapsed_1116[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1118 = tensor.extract_slice %collapsed_1116[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1119 = tensor.extract_slice %collapsed_1116[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1120 = tensor.extract_slice %collapsed_1116[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1121 = tensor.collapse_shape %420 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1122 = tensor.extract_slice %collapsed_1121[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1123 = tensor.extract_slice %collapsed_1121[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1124 = tensor.extract_slice %collapsed_1121[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1125 = tensor.extract_slice %collapsed_1121[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1126 = tensor.collapse_shape %extracted_slice_1122 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1127 = tensor.collapse_shape %extracted_slice_1123 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1128 = tensor.collapse_shape %extracted_slice_1124 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1129 = tensor.collapse_shape %extracted_slice_1125 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1130 = tensor.collapse_shape %extracted_slice_1117 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %421 = tensor.empty() : tensor<384x384xf32>
    %422 = linalg.fill ins(%cst_607 : f32) outs(%421 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %423 = tensor.empty() : tensor<384x384xf32>
    %424 = linalg.matmul ins(%collapsed_1130, %collapsed_1126 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%422 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %425 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %424 : tensor<384xf32>, tensor<384x384xf32>) outs(%423 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1131 = tensor.collapse_shape %extracted_slice_1118 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %426 = tensor.empty() : tensor<384x384xf32>
    %427 = linalg.fill ins(%cst_607 : f32) outs(%426 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %428 = tensor.empty() : tensor<384x384xf32>
    %429 = linalg.matmul ins(%collapsed_1131, %collapsed_1127 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%427 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %430 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %429 : tensor<384xf32>, tensor<384x384xf32>) outs(%428 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1132 = tensor.collapse_shape %extracted_slice_1119 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %431 = tensor.empty() : tensor<384x384xf32>
    %432 = linalg.fill ins(%cst_607 : f32) outs(%431 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %433 = tensor.empty() : tensor<384x384xf32>
    %434 = linalg.matmul ins(%collapsed_1132, %collapsed_1128 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%432 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %435 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %434 : tensor<384xf32>, tensor<384x384xf32>) outs(%433 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1133 = tensor.collapse_shape %extracted_slice_1120 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %436 = tensor.empty() : tensor<384x384xf32>
    %437 = linalg.fill ins(%cst_607 : f32) outs(%436 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %438 = tensor.empty() : tensor<384x384xf32>
    %439 = linalg.matmul ins(%collapsed_1133, %collapsed_1129 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%437 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %440 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %439 : tensor<384xf32>, tensor<384x384xf32>) outs(%438 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %441 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1134 = tensor.insert_slice %425 into %441[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1135 = tensor.insert_slice %430 into %inserted_slice_1134[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1136 = tensor.insert_slice %435 into %inserted_slice_1135[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1137 = tensor.insert_slice %440 into %inserted_slice_1136[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1138 = tensor.expand_shape %inserted_slice_1137 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %442 = tensor.empty() : tensor<1x4x384x384xf32>
    %443 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1138 : tensor<1x4x384x384xf32>) outs(%442 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %444 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1139 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %445 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%443, %collapsed_1139 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%444 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %446 = tensor.empty() : tensor<1x4x384xf32>
    %447 = linalg.fill ins(%cst_241 : f32) outs(%446 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %448 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%445 : tensor<1x4x384x384xf32>) outs(%447 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %449 = tensor.empty() : tensor<1x4x384x384xf32>
    %450 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%445, %448 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%449 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %451 = tensor.empty() : tensor<1x4x384x384xf32>
    %452 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%450 : tensor<1x4x384x384xf32>) outs(%451 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %453 = tensor.empty() : tensor<1x4x384xf32>
    %454 = linalg.fill ins(%cst_607 : f32) outs(%453 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %455 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%452 : tensor<1x4x384x384xf32>) outs(%454 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1140 = tensor.expand_shape %455 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %456 = tensor.empty() : tensor<1x4x384x1xf32>
    %457 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1140 : tensor<1x4x384x1xf32>) outs(%456 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %458 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1141 = tensor.collapse_shape %457 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %459 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%452, %collapsed_1141 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%458 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %460 = tensor.empty() : tensor<1x4x384x32xf32>
    %461 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1110 : tensor<1x384x4x32xf32>) outs(%460 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1142 = tensor.collapse_shape %459 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1143 = tensor.extract_slice %collapsed_1142[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1144 = tensor.extract_slice %collapsed_1142[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1145 = tensor.extract_slice %collapsed_1142[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1146 = tensor.extract_slice %collapsed_1142[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1147 = tensor.collapse_shape %461 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1148 = tensor.extract_slice %collapsed_1147[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1149 = tensor.extract_slice %collapsed_1147[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1150 = tensor.extract_slice %collapsed_1147[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1151 = tensor.extract_slice %collapsed_1147[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1152 = tensor.collapse_shape %extracted_slice_1148 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1153 = tensor.collapse_shape %extracted_slice_1149 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1154 = tensor.collapse_shape %extracted_slice_1150 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1155 = tensor.collapse_shape %extracted_slice_1151 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1156 = tensor.collapse_shape %extracted_slice_1143 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %462 = tensor.empty() : tensor<384x32xf32>
    %463 = linalg.fill ins(%cst_607 : f32) outs(%462 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %464 = tensor.empty() : tensor<384x32xf32>
    %465 = linalg.matmul ins(%collapsed_1156, %collapsed_1152 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%463 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %466 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %465 : tensor<32xf32>, tensor<384x32xf32>) outs(%464 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1157 = tensor.collapse_shape %extracted_slice_1144 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %467 = tensor.empty() : tensor<384x32xf32>
    %468 = linalg.fill ins(%cst_607 : f32) outs(%467 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %469 = tensor.empty() : tensor<384x32xf32>
    %470 = linalg.matmul ins(%collapsed_1157, %collapsed_1153 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%468 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %471 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %470 : tensor<32xf32>, tensor<384x32xf32>) outs(%469 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1158 = tensor.collapse_shape %extracted_slice_1145 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %472 = tensor.empty() : tensor<384x32xf32>
    %473 = linalg.fill ins(%cst_607 : f32) outs(%472 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %474 = tensor.empty() : tensor<384x32xf32>
    %475 = linalg.matmul ins(%collapsed_1158, %collapsed_1154 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%473 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %476 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %475 : tensor<32xf32>, tensor<384x32xf32>) outs(%474 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1159 = tensor.collapse_shape %extracted_slice_1146 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %477 = tensor.empty() : tensor<384x32xf32>
    %478 = linalg.fill ins(%cst_607 : f32) outs(%477 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %479 = tensor.empty() : tensor<384x32xf32>
    %480 = linalg.matmul ins(%collapsed_1159, %collapsed_1155 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%478 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %481 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %480 : tensor<32xf32>, tensor<384x32xf32>) outs(%479 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %482 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1160 = tensor.insert_slice %466 into %482[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1161 = tensor.insert_slice %471 into %inserted_slice_1160[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1162 = tensor.insert_slice %476 into %inserted_slice_1161[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1163 = tensor.insert_slice %481 into %inserted_slice_1162[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1164 = tensor.expand_shape %inserted_slice_1163 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %483 = tensor.empty() : tensor<1x384x4x32xf32>
    %484 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1164 : tensor<1x4x384x32xf32>) outs(%483 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1165 = tensor.collapse_shape %484 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %485 = tensor.empty() : tensor<384x128xf32>
    %486 = linalg.fill ins(%cst_607 : f32) outs(%485 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %487 = tensor.empty() : tensor<384x128xf32>
    %488 = linalg.matmul ins(%collapsed_1165, %cst_281 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%486 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %489 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_647, %488 : tensor<128xf32>, tensor<384x128xf32>) outs(%487 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1166 = tensor.expand_shape %489 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %490 = tensor.empty() : tensor<1x384x128xf32>
    %491 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1166, %expanded_1112 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%490 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %492 = tensor.empty() : tensor<1x384x128xf32>
    %493 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%491, %cst_216 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%492 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %494 = tensor.empty() : tensor<1x384x128xf32>
    %495 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%493, %cst_215 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%494 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1167 = tensor.collapse_shape %491 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %496 = tensor.empty() : tensor<384x512xf32>
    %497 = linalg.fill ins(%cst_607 : f32) outs(%496 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %498 = tensor.empty() : tensor<384x512xf32>
    %499 = linalg.matmul ins(%collapsed_1167, %cst_282 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%497 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %500 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_648, %499 : tensor<512xf32>, tensor<384x512xf32>) outs(%498 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1168 = tensor.expand_shape %500 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %501 = tensor.empty() : tensor<1x384x512xf32>
    %502 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1168 : tensor<1x384x512xf32>) outs(%501 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1169 = tensor.collapse_shape %502 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %503 = tensor.empty() : tensor<384x128xf32>
    %504 = linalg.fill ins(%cst_607 : f32) outs(%503 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %505 = tensor.empty() : tensor<384x128xf32>
    %506 = linalg.matmul ins(%collapsed_1169, %cst_283 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%504 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %507 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_649, %506 : tensor<128xf32>, tensor<384x128xf32>) outs(%505 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1170 = tensor.expand_shape %507 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %508 = tensor.empty() : tensor<1x384x128xf32>
    %509 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1170, %495 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%508 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %510 = tensor.empty() : tensor<1x384x128xf32>
    %511 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%509, %cst_214 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%510 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %512 = tensor.empty() : tensor<1x384x128xf32>
    %513 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%511, %cst_213 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%512 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1171 = tensor.collapse_shape %509 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %514 = tensor.empty() : tensor<384x512xf32>
    %515 = linalg.fill ins(%cst_607 : f32) outs(%514 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %516 = tensor.empty() : tensor<384x512xf32>
    %517 = linalg.matmul ins(%collapsed_1171, %cst_284 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%515 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %518 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_650, %517 : tensor<512xf32>, tensor<384x512xf32>) outs(%516 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1172 = tensor.expand_shape %518 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %519 = tensor.empty() : tensor<1x384x512xf32>
    %520 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1172 : tensor<1x384x512xf32>) outs(%519 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1173 = tensor.collapse_shape %520 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %521 = tensor.empty() : tensor<384x128xf32>
    %522 = linalg.fill ins(%cst_607 : f32) outs(%521 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %523 = tensor.empty() : tensor<384x128xf32>
    %524 = linalg.matmul ins(%collapsed_1173, %cst_285 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%522 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %525 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_651, %524 : tensor<128xf32>, tensor<384x128xf32>) outs(%523 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1174 = tensor.expand_shape %525 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %526 = tensor.empty() : tensor<1x384x128xf32>
    %527 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1174, %513 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%526 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %528 = tensor.empty() : tensor<1x384x128xf32>
    %529 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%527, %cst_212 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%528 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %530 = tensor.empty() : tensor<1x384x128xf32>
    %531 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%529, %cst_211 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%530 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1175 = tensor.collapse_shape %527 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %532 = tensor.empty() : tensor<384x512xf32>
    %533 = linalg.fill ins(%cst_607 : f32) outs(%532 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %534 = tensor.empty() : tensor<384x512xf32>
    %535 = linalg.matmul ins(%collapsed_1175, %cst_286 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%533 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %536 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_652, %535 : tensor<512xf32>, tensor<384x512xf32>) outs(%534 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1176 = tensor.expand_shape %536 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %537 = tensor.empty() : tensor<1x384x512xf32>
    %538 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1176 : tensor<1x384x512xf32>) outs(%537 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1177 = tensor.collapse_shape %538 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %539 = tensor.empty() : tensor<384x128xf32>
    %540 = linalg.fill ins(%cst_607 : f32) outs(%539 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %541 = tensor.empty() : tensor<384x128xf32>
    %542 = linalg.matmul ins(%collapsed_1177, %cst_287 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%540 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %543 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_653, %542 : tensor<128xf32>, tensor<384x128xf32>) outs(%541 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1178 = tensor.expand_shape %543 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %544 = tensor.empty() : tensor<1x384x128xf32>
    %545 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1178, %531 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%544 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %546 = tensor.empty() : tensor<1x384x128xf32>
    %547 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%545, %cst_210 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%546 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %548 = tensor.empty() : tensor<1x384x128xf32>
    %549 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%547, %cst_209 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%548 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1179 = tensor.collapse_shape %545 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %550 = tensor.empty() : tensor<384x512xf32>
    %551 = linalg.fill ins(%cst_607 : f32) outs(%550 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %552 = tensor.empty() : tensor<384x512xf32>
    %553 = linalg.matmul ins(%collapsed_1179, %cst_288 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%551 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %554 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_654, %553 : tensor<512xf32>, tensor<384x512xf32>) outs(%552 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1180 = tensor.expand_shape %554 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %555 = tensor.empty() : tensor<1x384x512xf32>
    %556 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1180 : tensor<1x384x512xf32>) outs(%555 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1181 = tensor.collapse_shape %556 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %557 = tensor.empty() : tensor<384x128xf32>
    %558 = linalg.fill ins(%cst_607 : f32) outs(%557 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %559 = tensor.empty() : tensor<384x128xf32>
    %560 = linalg.matmul ins(%collapsed_1181, %cst_289 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%558 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %561 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_655, %560 : tensor<128xf32>, tensor<384x128xf32>) outs(%559 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1182 = tensor.expand_shape %561 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %562 = tensor.empty() : tensor<1x384x128xf32>
    %563 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1182, %549 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%562 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1183 = tensor.collapse_shape %563 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %564 = tensor.empty() : tensor<384x512xf32>
    %565 = linalg.fill ins(%cst_607 : f32) outs(%564 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %566 = tensor.empty() : tensor<384x512xf32>
    %567 = linalg.matmul ins(%collapsed_1183, %cst_290 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%565 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %568 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_656, %567 : tensor<512xf32>, tensor<384x512xf32>) outs(%566 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1184 = tensor.expand_shape %568 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %569 = tensor.empty() : tensor<1x384x512xf32>
    %570 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1184, %391 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%569 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %571 = tensor.empty() : tensor<1x384x512xf32>
    %572 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%570, %cst_208 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%571 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %573 = tensor.empty() : tensor<1x384x512xf32>
    %574 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%572, %cst_207 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%573 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1185 = tensor.collapse_shape %570 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %575 = tensor.empty() : tensor<384x128xf32>
    %576 = linalg.fill ins(%cst_607 : f32) outs(%575 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %577 = tensor.empty() : tensor<384x128xf32>
    %578 = linalg.matmul ins(%collapsed_1185, %cst_291 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%576 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %579 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_657, %578 : tensor<128xf32>, tensor<384x128xf32>) outs(%577 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1186 = tensor.expand_shape %579 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1187 = tensor.collapse_shape %570 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %580 = tensor.empty() : tensor<384x128xf32>
    %581 = linalg.fill ins(%cst_607 : f32) outs(%580 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %582 = tensor.empty() : tensor<384x128xf32>
    %583 = linalg.matmul ins(%collapsed_1187, %cst_292 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%581 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %584 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_658, %583 : tensor<128xf32>, tensor<384x128xf32>) outs(%582 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1188 = tensor.expand_shape %584 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1189 = tensor.collapse_shape %574 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %585 = tensor.empty() : tensor<384x128xf32>
    %586 = linalg.fill ins(%cst_607 : f32) outs(%585 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %587 = tensor.empty() : tensor<384x128xf32>
    %588 = linalg.matmul ins(%collapsed_1189, %cst_293 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%586 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %589 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %588 : tensor<128xf32>, tensor<384x128xf32>) outs(%587 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %590 = tensor.empty() : tensor<384x128xf32>
    %591 = linalg.fill ins(%cst_607 : f32) outs(%590 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %592 = tensor.empty() : tensor<384x128xf32>
    %593 = linalg.matmul ins(%589, %cst_294 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%591 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %594 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_659, %593 : tensor<128xf32>, tensor<384x128xf32>) outs(%592 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1190 = tensor.expand_shape %594 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %595 = tensor.empty() : tensor<384x128xf32>
    %596 = linalg.fill ins(%cst_607 : f32) outs(%595 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %597 = tensor.empty() : tensor<384x128xf32>
    %598 = linalg.matmul ins(%589, %cst_295 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%596 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %599 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_660, %598 : tensor<128xf32>, tensor<384x128xf32>) outs(%597 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1191 = tensor.expand_shape %599 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %600 = tensor.empty() : tensor<1x4x384x32xf32>
    %601 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1190 : tensor<1x384x4x32xf32>) outs(%600 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %602 = tensor.empty() : tensor<1x4x32x384xf32>
    %603 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1191 : tensor<1x384x4x32xf32>) outs(%602 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1192 = tensor.collapse_shape %601 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1193 = tensor.extract_slice %collapsed_1192[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1194 = tensor.extract_slice %collapsed_1192[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1195 = tensor.extract_slice %collapsed_1192[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1196 = tensor.extract_slice %collapsed_1192[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1197 = tensor.collapse_shape %603 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1198 = tensor.extract_slice %collapsed_1197[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1199 = tensor.extract_slice %collapsed_1197[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1200 = tensor.extract_slice %collapsed_1197[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1201 = tensor.extract_slice %collapsed_1197[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1202 = tensor.collapse_shape %extracted_slice_1198 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1203 = tensor.collapse_shape %extracted_slice_1199 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1204 = tensor.collapse_shape %extracted_slice_1200 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1205 = tensor.collapse_shape %extracted_slice_1201 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1206 = tensor.collapse_shape %extracted_slice_1193 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %604 = tensor.empty() : tensor<384x384xf32>
    %605 = linalg.fill ins(%cst_607 : f32) outs(%604 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %606 = tensor.empty() : tensor<384x384xf32>
    %607 = linalg.matmul ins(%collapsed_1206, %collapsed_1202 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%605 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %608 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %607 : tensor<384xf32>, tensor<384x384xf32>) outs(%606 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1207 = tensor.collapse_shape %extracted_slice_1194 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %609 = tensor.empty() : tensor<384x384xf32>
    %610 = linalg.fill ins(%cst_607 : f32) outs(%609 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %611 = tensor.empty() : tensor<384x384xf32>
    %612 = linalg.matmul ins(%collapsed_1207, %collapsed_1203 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%610 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %613 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %612 : tensor<384xf32>, tensor<384x384xf32>) outs(%611 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1208 = tensor.collapse_shape %extracted_slice_1195 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %614 = tensor.empty() : tensor<384x384xf32>
    %615 = linalg.fill ins(%cst_607 : f32) outs(%614 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %616 = tensor.empty() : tensor<384x384xf32>
    %617 = linalg.matmul ins(%collapsed_1208, %collapsed_1204 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%615 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %618 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %617 : tensor<384xf32>, tensor<384x384xf32>) outs(%616 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1209 = tensor.collapse_shape %extracted_slice_1196 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %619 = tensor.empty() : tensor<384x384xf32>
    %620 = linalg.fill ins(%cst_607 : f32) outs(%619 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %621 = tensor.empty() : tensor<384x384xf32>
    %622 = linalg.matmul ins(%collapsed_1209, %collapsed_1205 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%620 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %623 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %622 : tensor<384xf32>, tensor<384x384xf32>) outs(%621 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %624 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1210 = tensor.insert_slice %608 into %624[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1211 = tensor.insert_slice %613 into %inserted_slice_1210[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1212 = tensor.insert_slice %618 into %inserted_slice_1211[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1213 = tensor.insert_slice %623 into %inserted_slice_1212[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1214 = tensor.expand_shape %inserted_slice_1213 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %625 = tensor.empty() : tensor<1x4x384x384xf32>
    %626 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1214 : tensor<1x4x384x384xf32>) outs(%625 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %627 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1215 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %628 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%626, %collapsed_1215 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%627 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %629 = tensor.empty() : tensor<1x4x384xf32>
    %630 = linalg.fill ins(%cst_241 : f32) outs(%629 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %631 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%628 : tensor<1x4x384x384xf32>) outs(%630 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %632 = tensor.empty() : tensor<1x4x384x384xf32>
    %633 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%628, %631 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%632 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %634 = tensor.empty() : tensor<1x4x384x384xf32>
    %635 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%633 : tensor<1x4x384x384xf32>) outs(%634 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %636 = tensor.empty() : tensor<1x4x384xf32>
    %637 = linalg.fill ins(%cst_607 : f32) outs(%636 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %638 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%635 : tensor<1x4x384x384xf32>) outs(%637 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1216 = tensor.expand_shape %638 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %639 = tensor.empty() : tensor<1x4x384x1xf32>
    %640 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1216 : tensor<1x4x384x1xf32>) outs(%639 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %641 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1217 = tensor.collapse_shape %640 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %642 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%635, %collapsed_1217 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%641 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %643 = tensor.empty() : tensor<1x4x384x32xf32>
    %644 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1186 : tensor<1x384x4x32xf32>) outs(%643 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1218 = tensor.collapse_shape %642 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1219 = tensor.extract_slice %collapsed_1218[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1220 = tensor.extract_slice %collapsed_1218[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1221 = tensor.extract_slice %collapsed_1218[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1222 = tensor.extract_slice %collapsed_1218[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1223 = tensor.collapse_shape %644 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1224 = tensor.extract_slice %collapsed_1223[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1225 = tensor.extract_slice %collapsed_1223[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1226 = tensor.extract_slice %collapsed_1223[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1227 = tensor.extract_slice %collapsed_1223[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1228 = tensor.collapse_shape %extracted_slice_1224 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1229 = tensor.collapse_shape %extracted_slice_1225 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1230 = tensor.collapse_shape %extracted_slice_1226 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1231 = tensor.collapse_shape %extracted_slice_1227 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1232 = tensor.collapse_shape %extracted_slice_1219 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %645 = tensor.empty() : tensor<384x32xf32>
    %646 = linalg.fill ins(%cst_607 : f32) outs(%645 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %647 = tensor.empty() : tensor<384x32xf32>
    %648 = linalg.matmul ins(%collapsed_1232, %collapsed_1228 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%646 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %649 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %648 : tensor<32xf32>, tensor<384x32xf32>) outs(%647 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1233 = tensor.collapse_shape %extracted_slice_1220 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %650 = tensor.empty() : tensor<384x32xf32>
    %651 = linalg.fill ins(%cst_607 : f32) outs(%650 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %652 = tensor.empty() : tensor<384x32xf32>
    %653 = linalg.matmul ins(%collapsed_1233, %collapsed_1229 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%651 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %654 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %653 : tensor<32xf32>, tensor<384x32xf32>) outs(%652 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1234 = tensor.collapse_shape %extracted_slice_1221 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %655 = tensor.empty() : tensor<384x32xf32>
    %656 = linalg.fill ins(%cst_607 : f32) outs(%655 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %657 = tensor.empty() : tensor<384x32xf32>
    %658 = linalg.matmul ins(%collapsed_1234, %collapsed_1230 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%656 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %659 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %658 : tensor<32xf32>, tensor<384x32xf32>) outs(%657 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1235 = tensor.collapse_shape %extracted_slice_1222 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %660 = tensor.empty() : tensor<384x32xf32>
    %661 = linalg.fill ins(%cst_607 : f32) outs(%660 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %662 = tensor.empty() : tensor<384x32xf32>
    %663 = linalg.matmul ins(%collapsed_1235, %collapsed_1231 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%661 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %664 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %663 : tensor<32xf32>, tensor<384x32xf32>) outs(%662 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %665 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1236 = tensor.insert_slice %649 into %665[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1237 = tensor.insert_slice %654 into %inserted_slice_1236[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1238 = tensor.insert_slice %659 into %inserted_slice_1237[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1239 = tensor.insert_slice %664 into %inserted_slice_1238[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1240 = tensor.expand_shape %inserted_slice_1239 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %666 = tensor.empty() : tensor<1x384x4x32xf32>
    %667 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1240 : tensor<1x4x384x32xf32>) outs(%666 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1241 = tensor.collapse_shape %667 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %668 = tensor.empty() : tensor<384x128xf32>
    %669 = linalg.fill ins(%cst_607 : f32) outs(%668 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %670 = tensor.empty() : tensor<384x128xf32>
    %671 = linalg.matmul ins(%collapsed_1241, %cst_296 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%669 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %672 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_661, %671 : tensor<128xf32>, tensor<384x128xf32>) outs(%670 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1242 = tensor.expand_shape %672 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %673 = tensor.empty() : tensor<1x384x128xf32>
    %674 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1242, %expanded_1188 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%673 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %675 = tensor.empty() : tensor<1x384x128xf32>
    %676 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%674, %cst_206 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%675 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %677 = tensor.empty() : tensor<1x384x128xf32>
    %678 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%676, %cst_205 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%677 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1243 = tensor.collapse_shape %674 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %679 = tensor.empty() : tensor<384x512xf32>
    %680 = linalg.fill ins(%cst_607 : f32) outs(%679 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %681 = tensor.empty() : tensor<384x512xf32>
    %682 = linalg.matmul ins(%collapsed_1243, %cst_297 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%680 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %683 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_662, %682 : tensor<512xf32>, tensor<384x512xf32>) outs(%681 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1244 = tensor.expand_shape %683 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %684 = tensor.empty() : tensor<1x384x512xf32>
    %685 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1244 : tensor<1x384x512xf32>) outs(%684 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1245 = tensor.collapse_shape %685 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %686 = tensor.empty() : tensor<384x128xf32>
    %687 = linalg.fill ins(%cst_607 : f32) outs(%686 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %688 = tensor.empty() : tensor<384x128xf32>
    %689 = linalg.matmul ins(%collapsed_1245, %cst_298 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%687 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %690 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_663, %689 : tensor<128xf32>, tensor<384x128xf32>) outs(%688 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1246 = tensor.expand_shape %690 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %691 = tensor.empty() : tensor<1x384x128xf32>
    %692 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1246, %678 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%691 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %693 = tensor.empty() : tensor<1x384x128xf32>
    %694 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%692, %cst_204 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%693 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %695 = tensor.empty() : tensor<1x384x128xf32>
    %696 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%694, %cst_203 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%695 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1247 = tensor.collapse_shape %692 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %697 = tensor.empty() : tensor<384x512xf32>
    %698 = linalg.fill ins(%cst_607 : f32) outs(%697 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %699 = tensor.empty() : tensor<384x512xf32>
    %700 = linalg.matmul ins(%collapsed_1247, %cst_299 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%698 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %701 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_664, %700 : tensor<512xf32>, tensor<384x512xf32>) outs(%699 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1248 = tensor.expand_shape %701 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %702 = tensor.empty() : tensor<1x384x512xf32>
    %703 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1248 : tensor<1x384x512xf32>) outs(%702 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1249 = tensor.collapse_shape %703 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %704 = tensor.empty() : tensor<384x128xf32>
    %705 = linalg.fill ins(%cst_607 : f32) outs(%704 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %706 = tensor.empty() : tensor<384x128xf32>
    %707 = linalg.matmul ins(%collapsed_1249, %cst_300 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%705 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %708 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_665, %707 : tensor<128xf32>, tensor<384x128xf32>) outs(%706 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1250 = tensor.expand_shape %708 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %709 = tensor.empty() : tensor<1x384x128xf32>
    %710 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1250, %696 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%709 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %711 = tensor.empty() : tensor<1x384x128xf32>
    %712 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%710, %cst_202 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%711 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %713 = tensor.empty() : tensor<1x384x128xf32>
    %714 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%712, %cst_201 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%713 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1251 = tensor.collapse_shape %710 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %715 = tensor.empty() : tensor<384x512xf32>
    %716 = linalg.fill ins(%cst_607 : f32) outs(%715 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %717 = tensor.empty() : tensor<384x512xf32>
    %718 = linalg.matmul ins(%collapsed_1251, %cst_301 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%716 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %719 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_666, %718 : tensor<512xf32>, tensor<384x512xf32>) outs(%717 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1252 = tensor.expand_shape %719 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %720 = tensor.empty() : tensor<1x384x512xf32>
    %721 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1252 : tensor<1x384x512xf32>) outs(%720 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1253 = tensor.collapse_shape %721 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %722 = tensor.empty() : tensor<384x128xf32>
    %723 = linalg.fill ins(%cst_607 : f32) outs(%722 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %724 = tensor.empty() : tensor<384x128xf32>
    %725 = linalg.matmul ins(%collapsed_1253, %cst_302 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%723 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %726 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_667, %725 : tensor<128xf32>, tensor<384x128xf32>) outs(%724 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1254 = tensor.expand_shape %726 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %727 = tensor.empty() : tensor<1x384x128xf32>
    %728 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1254, %714 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%727 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %729 = tensor.empty() : tensor<1x384x128xf32>
    %730 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%728, %cst_200 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%729 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %731 = tensor.empty() : tensor<1x384x128xf32>
    %732 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%730, %cst_199 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%731 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1255 = tensor.collapse_shape %728 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %733 = tensor.empty() : tensor<384x512xf32>
    %734 = linalg.fill ins(%cst_607 : f32) outs(%733 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %735 = tensor.empty() : tensor<384x512xf32>
    %736 = linalg.matmul ins(%collapsed_1255, %cst_303 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%734 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %737 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_668, %736 : tensor<512xf32>, tensor<384x512xf32>) outs(%735 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1256 = tensor.expand_shape %737 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %738 = tensor.empty() : tensor<1x384x512xf32>
    %739 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1256 : tensor<1x384x512xf32>) outs(%738 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1257 = tensor.collapse_shape %739 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %740 = tensor.empty() : tensor<384x128xf32>
    %741 = linalg.fill ins(%cst_607 : f32) outs(%740 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %742 = tensor.empty() : tensor<384x128xf32>
    %743 = linalg.matmul ins(%collapsed_1257, %cst_304 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%741 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %744 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_669, %743 : tensor<128xf32>, tensor<384x128xf32>) outs(%742 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1258 = tensor.expand_shape %744 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %745 = tensor.empty() : tensor<1x384x128xf32>
    %746 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1258, %732 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%745 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1259 = tensor.collapse_shape %746 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %747 = tensor.empty() : tensor<384x512xf32>
    %748 = linalg.fill ins(%cst_607 : f32) outs(%747 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %749 = tensor.empty() : tensor<384x512xf32>
    %750 = linalg.matmul ins(%collapsed_1259, %cst_305 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%748 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %751 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_670, %750 : tensor<512xf32>, tensor<384x512xf32>) outs(%749 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1260 = tensor.expand_shape %751 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %752 = tensor.empty() : tensor<1x384x512xf32>
    %753 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1260, %574 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%752 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %754 = tensor.empty() : tensor<1x384x512xf32>
    %755 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%753, %cst_198 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%754 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %756 = tensor.empty() : tensor<1x384x512xf32>
    %757 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%755, %cst_197 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%756 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1261 = tensor.collapse_shape %753 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %758 = tensor.empty() : tensor<384x128xf32>
    %759 = linalg.fill ins(%cst_607 : f32) outs(%758 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %760 = tensor.empty() : tensor<384x128xf32>
    %761 = linalg.matmul ins(%collapsed_1261, %cst_306 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%759 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %762 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_671, %761 : tensor<128xf32>, tensor<384x128xf32>) outs(%760 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1262 = tensor.expand_shape %762 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1263 = tensor.collapse_shape %753 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %763 = tensor.empty() : tensor<384x128xf32>
    %764 = linalg.fill ins(%cst_607 : f32) outs(%763 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %765 = tensor.empty() : tensor<384x128xf32>
    %766 = linalg.matmul ins(%collapsed_1263, %cst_307 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%764 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %767 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_672, %766 : tensor<128xf32>, tensor<384x128xf32>) outs(%765 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1264 = tensor.expand_shape %767 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1265 = tensor.collapse_shape %757 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %768 = tensor.empty() : tensor<384x128xf32>
    %769 = linalg.fill ins(%cst_607 : f32) outs(%768 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %770 = tensor.empty() : tensor<384x128xf32>
    %771 = linalg.matmul ins(%collapsed_1265, %cst_308 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%769 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %772 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %771 : tensor<128xf32>, tensor<384x128xf32>) outs(%770 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %773 = tensor.empty() : tensor<384x128xf32>
    %774 = linalg.fill ins(%cst_607 : f32) outs(%773 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %775 = tensor.empty() : tensor<384x128xf32>
    %776 = linalg.matmul ins(%772, %cst_309 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%774 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %777 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_673, %776 : tensor<128xf32>, tensor<384x128xf32>) outs(%775 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1266 = tensor.expand_shape %777 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %778 = tensor.empty() : tensor<384x128xf32>
    %779 = linalg.fill ins(%cst_607 : f32) outs(%778 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %780 = tensor.empty() : tensor<384x128xf32>
    %781 = linalg.matmul ins(%772, %cst_310 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%779 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %782 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_674, %781 : tensor<128xf32>, tensor<384x128xf32>) outs(%780 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1267 = tensor.expand_shape %782 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %783 = tensor.empty() : tensor<1x4x384x32xf32>
    %784 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1266 : tensor<1x384x4x32xf32>) outs(%783 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %785 = tensor.empty() : tensor<1x4x32x384xf32>
    %786 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1267 : tensor<1x384x4x32xf32>) outs(%785 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1268 = tensor.collapse_shape %784 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1269 = tensor.extract_slice %collapsed_1268[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1270 = tensor.extract_slice %collapsed_1268[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1271 = tensor.extract_slice %collapsed_1268[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1272 = tensor.extract_slice %collapsed_1268[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1273 = tensor.collapse_shape %786 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1274 = tensor.extract_slice %collapsed_1273[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1275 = tensor.extract_slice %collapsed_1273[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1276 = tensor.extract_slice %collapsed_1273[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1277 = tensor.extract_slice %collapsed_1273[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1278 = tensor.collapse_shape %extracted_slice_1274 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1279 = tensor.collapse_shape %extracted_slice_1275 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1280 = tensor.collapse_shape %extracted_slice_1276 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1281 = tensor.collapse_shape %extracted_slice_1277 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1282 = tensor.collapse_shape %extracted_slice_1269 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %787 = tensor.empty() : tensor<384x384xf32>
    %788 = linalg.fill ins(%cst_607 : f32) outs(%787 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %789 = tensor.empty() : tensor<384x384xf32>
    %790 = linalg.matmul ins(%collapsed_1282, %collapsed_1278 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%788 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %791 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %790 : tensor<384xf32>, tensor<384x384xf32>) outs(%789 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1283 = tensor.collapse_shape %extracted_slice_1270 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %792 = tensor.empty() : tensor<384x384xf32>
    %793 = linalg.fill ins(%cst_607 : f32) outs(%792 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %794 = tensor.empty() : tensor<384x384xf32>
    %795 = linalg.matmul ins(%collapsed_1283, %collapsed_1279 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%793 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %796 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %795 : tensor<384xf32>, tensor<384x384xf32>) outs(%794 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1284 = tensor.collapse_shape %extracted_slice_1271 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %797 = tensor.empty() : tensor<384x384xf32>
    %798 = linalg.fill ins(%cst_607 : f32) outs(%797 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %799 = tensor.empty() : tensor<384x384xf32>
    %800 = linalg.matmul ins(%collapsed_1284, %collapsed_1280 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%798 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %801 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %800 : tensor<384xf32>, tensor<384x384xf32>) outs(%799 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1285 = tensor.collapse_shape %extracted_slice_1272 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %802 = tensor.empty() : tensor<384x384xf32>
    %803 = linalg.fill ins(%cst_607 : f32) outs(%802 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %804 = tensor.empty() : tensor<384x384xf32>
    %805 = linalg.matmul ins(%collapsed_1285, %collapsed_1281 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%803 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %806 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %805 : tensor<384xf32>, tensor<384x384xf32>) outs(%804 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %807 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1286 = tensor.insert_slice %791 into %807[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1287 = tensor.insert_slice %796 into %inserted_slice_1286[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1288 = tensor.insert_slice %801 into %inserted_slice_1287[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1289 = tensor.insert_slice %806 into %inserted_slice_1288[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1290 = tensor.expand_shape %inserted_slice_1289 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %808 = tensor.empty() : tensor<1x4x384x384xf32>
    %809 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1290 : tensor<1x4x384x384xf32>) outs(%808 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %810 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1291 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %811 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%809, %collapsed_1291 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%810 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %812 = tensor.empty() : tensor<1x4x384xf32>
    %813 = linalg.fill ins(%cst_241 : f32) outs(%812 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %814 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%811 : tensor<1x4x384x384xf32>) outs(%813 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %815 = tensor.empty() : tensor<1x4x384x384xf32>
    %816 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%811, %814 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%815 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %817 = tensor.empty() : tensor<1x4x384x384xf32>
    %818 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%816 : tensor<1x4x384x384xf32>) outs(%817 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %819 = tensor.empty() : tensor<1x4x384xf32>
    %820 = linalg.fill ins(%cst_607 : f32) outs(%819 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %821 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%818 : tensor<1x4x384x384xf32>) outs(%820 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1292 = tensor.expand_shape %821 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %822 = tensor.empty() : tensor<1x4x384x1xf32>
    %823 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1292 : tensor<1x4x384x1xf32>) outs(%822 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %824 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1293 = tensor.collapse_shape %823 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %825 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%818, %collapsed_1293 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%824 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %826 = tensor.empty() : tensor<1x4x384x32xf32>
    %827 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1262 : tensor<1x384x4x32xf32>) outs(%826 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1294 = tensor.collapse_shape %825 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1295 = tensor.extract_slice %collapsed_1294[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1296 = tensor.extract_slice %collapsed_1294[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1297 = tensor.extract_slice %collapsed_1294[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1298 = tensor.extract_slice %collapsed_1294[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1299 = tensor.collapse_shape %827 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1300 = tensor.extract_slice %collapsed_1299[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1301 = tensor.extract_slice %collapsed_1299[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1302 = tensor.extract_slice %collapsed_1299[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1303 = tensor.extract_slice %collapsed_1299[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1304 = tensor.collapse_shape %extracted_slice_1300 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1305 = tensor.collapse_shape %extracted_slice_1301 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1306 = tensor.collapse_shape %extracted_slice_1302 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1307 = tensor.collapse_shape %extracted_slice_1303 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1308 = tensor.collapse_shape %extracted_slice_1295 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %828 = tensor.empty() : tensor<384x32xf32>
    %829 = linalg.fill ins(%cst_607 : f32) outs(%828 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %830 = tensor.empty() : tensor<384x32xf32>
    %831 = linalg.matmul ins(%collapsed_1308, %collapsed_1304 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%829 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %832 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %831 : tensor<32xf32>, tensor<384x32xf32>) outs(%830 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1309 = tensor.collapse_shape %extracted_slice_1296 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %833 = tensor.empty() : tensor<384x32xf32>
    %834 = linalg.fill ins(%cst_607 : f32) outs(%833 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %835 = tensor.empty() : tensor<384x32xf32>
    %836 = linalg.matmul ins(%collapsed_1309, %collapsed_1305 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%834 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %837 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %836 : tensor<32xf32>, tensor<384x32xf32>) outs(%835 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1310 = tensor.collapse_shape %extracted_slice_1297 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %838 = tensor.empty() : tensor<384x32xf32>
    %839 = linalg.fill ins(%cst_607 : f32) outs(%838 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %840 = tensor.empty() : tensor<384x32xf32>
    %841 = linalg.matmul ins(%collapsed_1310, %collapsed_1306 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%839 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %842 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %841 : tensor<32xf32>, tensor<384x32xf32>) outs(%840 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1311 = tensor.collapse_shape %extracted_slice_1298 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %843 = tensor.empty() : tensor<384x32xf32>
    %844 = linalg.fill ins(%cst_607 : f32) outs(%843 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %845 = tensor.empty() : tensor<384x32xf32>
    %846 = linalg.matmul ins(%collapsed_1311, %collapsed_1307 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%844 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %847 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %846 : tensor<32xf32>, tensor<384x32xf32>) outs(%845 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %848 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1312 = tensor.insert_slice %832 into %848[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1313 = tensor.insert_slice %837 into %inserted_slice_1312[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1314 = tensor.insert_slice %842 into %inserted_slice_1313[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1315 = tensor.insert_slice %847 into %inserted_slice_1314[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1316 = tensor.expand_shape %inserted_slice_1315 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %849 = tensor.empty() : tensor<1x384x4x32xf32>
    %850 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1316 : tensor<1x4x384x32xf32>) outs(%849 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1317 = tensor.collapse_shape %850 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %851 = tensor.empty() : tensor<384x128xf32>
    %852 = linalg.fill ins(%cst_607 : f32) outs(%851 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %853 = tensor.empty() : tensor<384x128xf32>
    %854 = linalg.matmul ins(%collapsed_1317, %cst_311 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%852 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %855 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_675, %854 : tensor<128xf32>, tensor<384x128xf32>) outs(%853 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1318 = tensor.expand_shape %855 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %856 = tensor.empty() : tensor<1x384x128xf32>
    %857 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1318, %expanded_1264 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%856 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %858 = tensor.empty() : tensor<1x384x128xf32>
    %859 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%857, %cst_196 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%858 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %860 = tensor.empty() : tensor<1x384x128xf32>
    %861 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%859, %cst_195 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%860 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1319 = tensor.collapse_shape %857 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %862 = tensor.empty() : tensor<384x512xf32>
    %863 = linalg.fill ins(%cst_607 : f32) outs(%862 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %864 = tensor.empty() : tensor<384x512xf32>
    %865 = linalg.matmul ins(%collapsed_1319, %cst_312 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%863 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %866 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_676, %865 : tensor<512xf32>, tensor<384x512xf32>) outs(%864 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1320 = tensor.expand_shape %866 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %867 = tensor.empty() : tensor<1x384x512xf32>
    %868 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1320 : tensor<1x384x512xf32>) outs(%867 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1321 = tensor.collapse_shape %868 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %869 = tensor.empty() : tensor<384x128xf32>
    %870 = linalg.fill ins(%cst_607 : f32) outs(%869 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %871 = tensor.empty() : tensor<384x128xf32>
    %872 = linalg.matmul ins(%collapsed_1321, %cst_313 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%870 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %873 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_677, %872 : tensor<128xf32>, tensor<384x128xf32>) outs(%871 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1322 = tensor.expand_shape %873 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %874 = tensor.empty() : tensor<1x384x128xf32>
    %875 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1322, %861 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%874 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %876 = tensor.empty() : tensor<1x384x128xf32>
    %877 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%875, %cst_194 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%876 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %878 = tensor.empty() : tensor<1x384x128xf32>
    %879 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%877, %cst_193 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%878 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1323 = tensor.collapse_shape %875 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %880 = tensor.empty() : tensor<384x512xf32>
    %881 = linalg.fill ins(%cst_607 : f32) outs(%880 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %882 = tensor.empty() : tensor<384x512xf32>
    %883 = linalg.matmul ins(%collapsed_1323, %cst_314 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%881 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %884 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_678, %883 : tensor<512xf32>, tensor<384x512xf32>) outs(%882 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1324 = tensor.expand_shape %884 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %885 = tensor.empty() : tensor<1x384x512xf32>
    %886 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1324 : tensor<1x384x512xf32>) outs(%885 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1325 = tensor.collapse_shape %886 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %887 = tensor.empty() : tensor<384x128xf32>
    %888 = linalg.fill ins(%cst_607 : f32) outs(%887 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %889 = tensor.empty() : tensor<384x128xf32>
    %890 = linalg.matmul ins(%collapsed_1325, %cst_315 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%888 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %891 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_679, %890 : tensor<128xf32>, tensor<384x128xf32>) outs(%889 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1326 = tensor.expand_shape %891 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %892 = tensor.empty() : tensor<1x384x128xf32>
    %893 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1326, %879 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%892 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %894 = tensor.empty() : tensor<1x384x128xf32>
    %895 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%893, %cst_192 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%894 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %896 = tensor.empty() : tensor<1x384x128xf32>
    %897 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%895, %cst_191 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%896 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1327 = tensor.collapse_shape %893 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %898 = tensor.empty() : tensor<384x512xf32>
    %899 = linalg.fill ins(%cst_607 : f32) outs(%898 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %900 = tensor.empty() : tensor<384x512xf32>
    %901 = linalg.matmul ins(%collapsed_1327, %cst_316 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%899 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %902 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_680, %901 : tensor<512xf32>, tensor<384x512xf32>) outs(%900 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1328 = tensor.expand_shape %902 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %903 = tensor.empty() : tensor<1x384x512xf32>
    %904 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1328 : tensor<1x384x512xf32>) outs(%903 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1329 = tensor.collapse_shape %904 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %905 = tensor.empty() : tensor<384x128xf32>
    %906 = linalg.fill ins(%cst_607 : f32) outs(%905 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %907 = tensor.empty() : tensor<384x128xf32>
    %908 = linalg.matmul ins(%collapsed_1329, %cst_317 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%906 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %909 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_681, %908 : tensor<128xf32>, tensor<384x128xf32>) outs(%907 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1330 = tensor.expand_shape %909 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %910 = tensor.empty() : tensor<1x384x128xf32>
    %911 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1330, %897 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%910 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %912 = tensor.empty() : tensor<1x384x128xf32>
    %913 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%911, %cst_190 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%912 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %914 = tensor.empty() : tensor<1x384x128xf32>
    %915 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%913, %cst_189 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%914 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1331 = tensor.collapse_shape %911 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %916 = tensor.empty() : tensor<384x512xf32>
    %917 = linalg.fill ins(%cst_607 : f32) outs(%916 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %918 = tensor.empty() : tensor<384x512xf32>
    %919 = linalg.matmul ins(%collapsed_1331, %cst_318 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%917 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %920 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_682, %919 : tensor<512xf32>, tensor<384x512xf32>) outs(%918 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1332 = tensor.expand_shape %920 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %921 = tensor.empty() : tensor<1x384x512xf32>
    %922 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1332 : tensor<1x384x512xf32>) outs(%921 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1333 = tensor.collapse_shape %922 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %923 = tensor.empty() : tensor<384x128xf32>
    %924 = linalg.fill ins(%cst_607 : f32) outs(%923 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %925 = tensor.empty() : tensor<384x128xf32>
    %926 = linalg.matmul ins(%collapsed_1333, %cst_319 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%924 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %927 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_683, %926 : tensor<128xf32>, tensor<384x128xf32>) outs(%925 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1334 = tensor.expand_shape %927 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %928 = tensor.empty() : tensor<1x384x128xf32>
    %929 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1334, %915 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%928 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1335 = tensor.collapse_shape %929 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %930 = tensor.empty() : tensor<384x512xf32>
    %931 = linalg.fill ins(%cst_607 : f32) outs(%930 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %932 = tensor.empty() : tensor<384x512xf32>
    %933 = linalg.matmul ins(%collapsed_1335, %cst_320 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%931 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %934 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_684, %933 : tensor<512xf32>, tensor<384x512xf32>) outs(%932 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1336 = tensor.expand_shape %934 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %935 = tensor.empty() : tensor<1x384x512xf32>
    %936 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1336, %757 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%935 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %937 = tensor.empty() : tensor<1x384x512xf32>
    %938 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%936, %cst_188 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%937 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %939 = tensor.empty() : tensor<1x384x512xf32>
    %940 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%938, %cst_187 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%939 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1337 = tensor.collapse_shape %936 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %941 = tensor.empty() : tensor<384x128xf32>
    %942 = linalg.fill ins(%cst_607 : f32) outs(%941 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %943 = tensor.empty() : tensor<384x128xf32>
    %944 = linalg.matmul ins(%collapsed_1337, %cst_321 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%942 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %945 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_685, %944 : tensor<128xf32>, tensor<384x128xf32>) outs(%943 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1338 = tensor.expand_shape %945 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1339 = tensor.collapse_shape %936 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %946 = tensor.empty() : tensor<384x128xf32>
    %947 = linalg.fill ins(%cst_607 : f32) outs(%946 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %948 = tensor.empty() : tensor<384x128xf32>
    %949 = linalg.matmul ins(%collapsed_1339, %cst_322 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%947 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %950 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_686, %949 : tensor<128xf32>, tensor<384x128xf32>) outs(%948 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1340 = tensor.expand_shape %950 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1341 = tensor.collapse_shape %940 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %951 = tensor.empty() : tensor<384x128xf32>
    %952 = linalg.fill ins(%cst_607 : f32) outs(%951 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %953 = tensor.empty() : tensor<384x128xf32>
    %954 = linalg.matmul ins(%collapsed_1341, %cst_323 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%952 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %955 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %954 : tensor<128xf32>, tensor<384x128xf32>) outs(%953 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %956 = tensor.empty() : tensor<384x128xf32>
    %957 = linalg.fill ins(%cst_607 : f32) outs(%956 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %958 = tensor.empty() : tensor<384x128xf32>
    %959 = linalg.matmul ins(%955, %cst_324 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%957 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %960 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_687, %959 : tensor<128xf32>, tensor<384x128xf32>) outs(%958 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1342 = tensor.expand_shape %960 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %961 = tensor.empty() : tensor<384x128xf32>
    %962 = linalg.fill ins(%cst_607 : f32) outs(%961 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %963 = tensor.empty() : tensor<384x128xf32>
    %964 = linalg.matmul ins(%955, %cst_325 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%962 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %965 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_688, %964 : tensor<128xf32>, tensor<384x128xf32>) outs(%963 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1343 = tensor.expand_shape %965 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %966 = tensor.empty() : tensor<1x4x384x32xf32>
    %967 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1342 : tensor<1x384x4x32xf32>) outs(%966 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %968 = tensor.empty() : tensor<1x4x32x384xf32>
    %969 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1343 : tensor<1x384x4x32xf32>) outs(%968 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1344 = tensor.collapse_shape %967 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1345 = tensor.extract_slice %collapsed_1344[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1346 = tensor.extract_slice %collapsed_1344[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1347 = tensor.extract_slice %collapsed_1344[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1348 = tensor.extract_slice %collapsed_1344[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1349 = tensor.collapse_shape %969 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1350 = tensor.extract_slice %collapsed_1349[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1351 = tensor.extract_slice %collapsed_1349[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1352 = tensor.extract_slice %collapsed_1349[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1353 = tensor.extract_slice %collapsed_1349[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1354 = tensor.collapse_shape %extracted_slice_1350 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1355 = tensor.collapse_shape %extracted_slice_1351 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1356 = tensor.collapse_shape %extracted_slice_1352 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1357 = tensor.collapse_shape %extracted_slice_1353 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1358 = tensor.collapse_shape %extracted_slice_1345 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %970 = tensor.empty() : tensor<384x384xf32>
    %971 = linalg.fill ins(%cst_607 : f32) outs(%970 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %972 = tensor.empty() : tensor<384x384xf32>
    %973 = linalg.matmul ins(%collapsed_1358, %collapsed_1354 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%971 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %974 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %973 : tensor<384xf32>, tensor<384x384xf32>) outs(%972 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1359 = tensor.collapse_shape %extracted_slice_1346 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %975 = tensor.empty() : tensor<384x384xf32>
    %976 = linalg.fill ins(%cst_607 : f32) outs(%975 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %977 = tensor.empty() : tensor<384x384xf32>
    %978 = linalg.matmul ins(%collapsed_1359, %collapsed_1355 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%976 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %979 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %978 : tensor<384xf32>, tensor<384x384xf32>) outs(%977 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1360 = tensor.collapse_shape %extracted_slice_1347 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %980 = tensor.empty() : tensor<384x384xf32>
    %981 = linalg.fill ins(%cst_607 : f32) outs(%980 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %982 = tensor.empty() : tensor<384x384xf32>
    %983 = linalg.matmul ins(%collapsed_1360, %collapsed_1356 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%981 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %984 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %983 : tensor<384xf32>, tensor<384x384xf32>) outs(%982 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1361 = tensor.collapse_shape %extracted_slice_1348 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %985 = tensor.empty() : tensor<384x384xf32>
    %986 = linalg.fill ins(%cst_607 : f32) outs(%985 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %987 = tensor.empty() : tensor<384x384xf32>
    %988 = linalg.matmul ins(%collapsed_1361, %collapsed_1357 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%986 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %989 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %988 : tensor<384xf32>, tensor<384x384xf32>) outs(%987 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %990 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1362 = tensor.insert_slice %974 into %990[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1363 = tensor.insert_slice %979 into %inserted_slice_1362[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1364 = tensor.insert_slice %984 into %inserted_slice_1363[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1365 = tensor.insert_slice %989 into %inserted_slice_1364[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1366 = tensor.expand_shape %inserted_slice_1365 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %991 = tensor.empty() : tensor<1x4x384x384xf32>
    %992 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1366 : tensor<1x4x384x384xf32>) outs(%991 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %993 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1367 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %994 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%992, %collapsed_1367 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%993 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %995 = tensor.empty() : tensor<1x4x384xf32>
    %996 = linalg.fill ins(%cst_241 : f32) outs(%995 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %997 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%994 : tensor<1x4x384x384xf32>) outs(%996 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %998 = tensor.empty() : tensor<1x4x384x384xf32>
    %999 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%994, %997 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%998 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1000 = tensor.empty() : tensor<1x4x384x384xf32>
    %1001 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%999 : tensor<1x4x384x384xf32>) outs(%1000 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1002 = tensor.empty() : tensor<1x4x384xf32>
    %1003 = linalg.fill ins(%cst_607 : f32) outs(%1002 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1004 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1001 : tensor<1x4x384x384xf32>) outs(%1003 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1368 = tensor.expand_shape %1004 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1005 = tensor.empty() : tensor<1x4x384x1xf32>
    %1006 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1368 : tensor<1x4x384x1xf32>) outs(%1005 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %1007 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1369 = tensor.collapse_shape %1006 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %1008 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1001, %collapsed_1369 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1007 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1009 = tensor.empty() : tensor<1x4x384x32xf32>
    %1010 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1338 : tensor<1x384x4x32xf32>) outs(%1009 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1370 = tensor.collapse_shape %1008 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1371 = tensor.extract_slice %collapsed_1370[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1372 = tensor.extract_slice %collapsed_1370[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1373 = tensor.extract_slice %collapsed_1370[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1374 = tensor.extract_slice %collapsed_1370[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1375 = tensor.collapse_shape %1010 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1376 = tensor.extract_slice %collapsed_1375[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1377 = tensor.extract_slice %collapsed_1375[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1378 = tensor.extract_slice %collapsed_1375[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1379 = tensor.extract_slice %collapsed_1375[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1380 = tensor.collapse_shape %extracted_slice_1376 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1381 = tensor.collapse_shape %extracted_slice_1377 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1382 = tensor.collapse_shape %extracted_slice_1378 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1383 = tensor.collapse_shape %extracted_slice_1379 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1384 = tensor.collapse_shape %extracted_slice_1371 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1011 = tensor.empty() : tensor<384x32xf32>
    %1012 = linalg.fill ins(%cst_607 : f32) outs(%1011 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1013 = tensor.empty() : tensor<384x32xf32>
    %1014 = linalg.matmul ins(%collapsed_1384, %collapsed_1380 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1012 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1015 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1014 : tensor<32xf32>, tensor<384x32xf32>) outs(%1013 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1385 = tensor.collapse_shape %extracted_slice_1372 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1016 = tensor.empty() : tensor<384x32xf32>
    %1017 = linalg.fill ins(%cst_607 : f32) outs(%1016 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1018 = tensor.empty() : tensor<384x32xf32>
    %1019 = linalg.matmul ins(%collapsed_1385, %collapsed_1381 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1017 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1020 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1019 : tensor<32xf32>, tensor<384x32xf32>) outs(%1018 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1386 = tensor.collapse_shape %extracted_slice_1373 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1021 = tensor.empty() : tensor<384x32xf32>
    %1022 = linalg.fill ins(%cst_607 : f32) outs(%1021 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1023 = tensor.empty() : tensor<384x32xf32>
    %1024 = linalg.matmul ins(%collapsed_1386, %collapsed_1382 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1022 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1025 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1024 : tensor<32xf32>, tensor<384x32xf32>) outs(%1023 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1387 = tensor.collapse_shape %extracted_slice_1374 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1026 = tensor.empty() : tensor<384x32xf32>
    %1027 = linalg.fill ins(%cst_607 : f32) outs(%1026 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1028 = tensor.empty() : tensor<384x32xf32>
    %1029 = linalg.matmul ins(%collapsed_1387, %collapsed_1383 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1027 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1030 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1029 : tensor<32xf32>, tensor<384x32xf32>) outs(%1028 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %1031 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1388 = tensor.insert_slice %1015 into %1031[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1389 = tensor.insert_slice %1020 into %inserted_slice_1388[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1390 = tensor.insert_slice %1025 into %inserted_slice_1389[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1391 = tensor.insert_slice %1030 into %inserted_slice_1390[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1392 = tensor.expand_shape %inserted_slice_1391 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %1032 = tensor.empty() : tensor<1x384x4x32xf32>
    %1033 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1392 : tensor<1x4x384x32xf32>) outs(%1032 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1393 = tensor.collapse_shape %1033 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %1034 = tensor.empty() : tensor<384x128xf32>
    %1035 = linalg.fill ins(%cst_607 : f32) outs(%1034 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1036 = tensor.empty() : tensor<384x128xf32>
    %1037 = linalg.matmul ins(%collapsed_1393, %cst_326 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1035 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1038 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_689, %1037 : tensor<128xf32>, tensor<384x128xf32>) outs(%1036 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1394 = tensor.expand_shape %1038 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1039 = tensor.empty() : tensor<1x384x128xf32>
    %1040 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1394, %expanded_1340 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1039 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1041 = tensor.empty() : tensor<1x384x128xf32>
    %1042 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1040, %cst_186 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1041 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1043 = tensor.empty() : tensor<1x384x128xf32>
    %1044 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1042, %cst_185 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1043 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1395 = tensor.collapse_shape %1040 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1045 = tensor.empty() : tensor<384x512xf32>
    %1046 = linalg.fill ins(%cst_607 : f32) outs(%1045 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1047 = tensor.empty() : tensor<384x512xf32>
    %1048 = linalg.matmul ins(%collapsed_1395, %cst_327 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1046 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1049 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_690, %1048 : tensor<512xf32>, tensor<384x512xf32>) outs(%1047 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1396 = tensor.expand_shape %1049 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1050 = tensor.empty() : tensor<1x384x512xf32>
    %1051 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1396 : tensor<1x384x512xf32>) outs(%1050 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1397 = tensor.collapse_shape %1051 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1052 = tensor.empty() : tensor<384x128xf32>
    %1053 = linalg.fill ins(%cst_607 : f32) outs(%1052 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1054 = tensor.empty() : tensor<384x128xf32>
    %1055 = linalg.matmul ins(%collapsed_1397, %cst_328 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1053 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1056 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_691, %1055 : tensor<128xf32>, tensor<384x128xf32>) outs(%1054 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1398 = tensor.expand_shape %1056 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1057 = tensor.empty() : tensor<1x384x128xf32>
    %1058 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1398, %1044 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1057 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1059 = tensor.empty() : tensor<1x384x128xf32>
    %1060 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1058, %cst_184 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1059 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1061 = tensor.empty() : tensor<1x384x128xf32>
    %1062 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1060, %cst_183 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1061 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1399 = tensor.collapse_shape %1058 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1063 = tensor.empty() : tensor<384x512xf32>
    %1064 = linalg.fill ins(%cst_607 : f32) outs(%1063 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1065 = tensor.empty() : tensor<384x512xf32>
    %1066 = linalg.matmul ins(%collapsed_1399, %cst_329 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1064 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1067 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_692, %1066 : tensor<512xf32>, tensor<384x512xf32>) outs(%1065 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1400 = tensor.expand_shape %1067 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1068 = tensor.empty() : tensor<1x384x512xf32>
    %1069 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1400 : tensor<1x384x512xf32>) outs(%1068 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1401 = tensor.collapse_shape %1069 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1070 = tensor.empty() : tensor<384x128xf32>
    %1071 = linalg.fill ins(%cst_607 : f32) outs(%1070 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1072 = tensor.empty() : tensor<384x128xf32>
    %1073 = linalg.matmul ins(%collapsed_1401, %cst_330 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1071 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1074 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_693, %1073 : tensor<128xf32>, tensor<384x128xf32>) outs(%1072 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1402 = tensor.expand_shape %1074 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1075 = tensor.empty() : tensor<1x384x128xf32>
    %1076 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1402, %1062 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1075 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1077 = tensor.empty() : tensor<1x384x128xf32>
    %1078 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1076, %cst_182 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1077 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1079 = tensor.empty() : tensor<1x384x128xf32>
    %1080 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1078, %cst_181 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1079 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1403 = tensor.collapse_shape %1076 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1081 = tensor.empty() : tensor<384x512xf32>
    %1082 = linalg.fill ins(%cst_607 : f32) outs(%1081 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1083 = tensor.empty() : tensor<384x512xf32>
    %1084 = linalg.matmul ins(%collapsed_1403, %cst_331 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1082 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1085 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_694, %1084 : tensor<512xf32>, tensor<384x512xf32>) outs(%1083 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1404 = tensor.expand_shape %1085 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1086 = tensor.empty() : tensor<1x384x512xf32>
    %1087 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1404 : tensor<1x384x512xf32>) outs(%1086 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1405 = tensor.collapse_shape %1087 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1088 = tensor.empty() : tensor<384x128xf32>
    %1089 = linalg.fill ins(%cst_607 : f32) outs(%1088 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1090 = tensor.empty() : tensor<384x128xf32>
    %1091 = linalg.matmul ins(%collapsed_1405, %cst_332 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1089 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1092 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_695, %1091 : tensor<128xf32>, tensor<384x128xf32>) outs(%1090 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1406 = tensor.expand_shape %1092 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1093 = tensor.empty() : tensor<1x384x128xf32>
    %1094 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1406, %1080 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1093 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1095 = tensor.empty() : tensor<1x384x128xf32>
    %1096 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1094, %cst_180 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1095 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1097 = tensor.empty() : tensor<1x384x128xf32>
    %1098 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1096, %cst_179 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1097 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1407 = tensor.collapse_shape %1094 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1099 = tensor.empty() : tensor<384x512xf32>
    %1100 = linalg.fill ins(%cst_607 : f32) outs(%1099 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1101 = tensor.empty() : tensor<384x512xf32>
    %1102 = linalg.matmul ins(%collapsed_1407, %cst_333 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1100 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1103 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_696, %1102 : tensor<512xf32>, tensor<384x512xf32>) outs(%1101 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1408 = tensor.expand_shape %1103 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1104 = tensor.empty() : tensor<1x384x512xf32>
    %1105 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1408 : tensor<1x384x512xf32>) outs(%1104 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1409 = tensor.collapse_shape %1105 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1106 = tensor.empty() : tensor<384x128xf32>
    %1107 = linalg.fill ins(%cst_607 : f32) outs(%1106 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1108 = tensor.empty() : tensor<384x128xf32>
    %1109 = linalg.matmul ins(%collapsed_1409, %cst_334 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1107 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1110 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_697, %1109 : tensor<128xf32>, tensor<384x128xf32>) outs(%1108 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1410 = tensor.expand_shape %1110 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1111 = tensor.empty() : tensor<1x384x128xf32>
    %1112 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1410, %1098 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1111 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1411 = tensor.collapse_shape %1112 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1113 = tensor.empty() : tensor<384x512xf32>
    %1114 = linalg.fill ins(%cst_607 : f32) outs(%1113 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1115 = tensor.empty() : tensor<384x512xf32>
    %1116 = linalg.matmul ins(%collapsed_1411, %cst_335 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1114 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1117 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_698, %1116 : tensor<512xf32>, tensor<384x512xf32>) outs(%1115 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1412 = tensor.expand_shape %1117 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1118 = tensor.empty() : tensor<1x384x512xf32>
    %1119 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1412, %940 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1118 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %1120 = tensor.empty() : tensor<1x384x512xf32>
    %1121 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1119, %cst_178 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%1120 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %1122 = tensor.empty() : tensor<1x384x512xf32>
    %1123 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1121, %cst_177 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%1122 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1413 = tensor.collapse_shape %1119 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1124 = tensor.empty() : tensor<384x128xf32>
    %1125 = linalg.fill ins(%cst_607 : f32) outs(%1124 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1126 = tensor.empty() : tensor<384x128xf32>
    %1127 = linalg.matmul ins(%collapsed_1413, %cst_336 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1125 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1128 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_699, %1127 : tensor<128xf32>, tensor<384x128xf32>) outs(%1126 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1414 = tensor.expand_shape %1128 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1415 = tensor.collapse_shape %1119 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1129 = tensor.empty() : tensor<384x128xf32>
    %1130 = linalg.fill ins(%cst_607 : f32) outs(%1129 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1131 = tensor.empty() : tensor<384x128xf32>
    %1132 = linalg.matmul ins(%collapsed_1415, %cst_337 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1130 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1133 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_700, %1132 : tensor<128xf32>, tensor<384x128xf32>) outs(%1131 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1416 = tensor.expand_shape %1133 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1417 = tensor.collapse_shape %1123 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1134 = tensor.empty() : tensor<384x128xf32>
    %1135 = linalg.fill ins(%cst_607 : f32) outs(%1134 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1136 = tensor.empty() : tensor<384x128xf32>
    %1137 = linalg.matmul ins(%collapsed_1417, %cst_338 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1135 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1138 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %1137 : tensor<128xf32>, tensor<384x128xf32>) outs(%1136 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %1139 = tensor.empty() : tensor<384x128xf32>
    %1140 = linalg.fill ins(%cst_607 : f32) outs(%1139 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1141 = tensor.empty() : tensor<384x128xf32>
    %1142 = linalg.matmul ins(%1138, %cst_339 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1140 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1143 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_701, %1142 : tensor<128xf32>, tensor<384x128xf32>) outs(%1141 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1418 = tensor.expand_shape %1143 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1144 = tensor.empty() : tensor<384x128xf32>
    %1145 = linalg.fill ins(%cst_607 : f32) outs(%1144 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1146 = tensor.empty() : tensor<384x128xf32>
    %1147 = linalg.matmul ins(%1138, %cst_340 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1145 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1148 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_702, %1147 : tensor<128xf32>, tensor<384x128xf32>) outs(%1146 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1419 = tensor.expand_shape %1148 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1149 = tensor.empty() : tensor<1x4x384x32xf32>
    %1150 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1418 : tensor<1x384x4x32xf32>) outs(%1149 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %1151 = tensor.empty() : tensor<1x4x32x384xf32>
    %1152 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1419 : tensor<1x384x4x32xf32>) outs(%1151 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1420 = tensor.collapse_shape %1150 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1421 = tensor.extract_slice %collapsed_1420[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1422 = tensor.extract_slice %collapsed_1420[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1423 = tensor.extract_slice %collapsed_1420[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1424 = tensor.extract_slice %collapsed_1420[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1425 = tensor.collapse_shape %1152 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1426 = tensor.extract_slice %collapsed_1425[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1427 = tensor.extract_slice %collapsed_1425[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1428 = tensor.extract_slice %collapsed_1425[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1429 = tensor.extract_slice %collapsed_1425[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1430 = tensor.collapse_shape %extracted_slice_1426 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1431 = tensor.collapse_shape %extracted_slice_1427 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1432 = tensor.collapse_shape %extracted_slice_1428 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1433 = tensor.collapse_shape %extracted_slice_1429 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1434 = tensor.collapse_shape %extracted_slice_1421 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1153 = tensor.empty() : tensor<384x384xf32>
    %1154 = linalg.fill ins(%cst_607 : f32) outs(%1153 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1155 = tensor.empty() : tensor<384x384xf32>
    %1156 = linalg.matmul ins(%collapsed_1434, %collapsed_1430 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1154 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1157 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1156 : tensor<384xf32>, tensor<384x384xf32>) outs(%1155 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1435 = tensor.collapse_shape %extracted_slice_1422 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1158 = tensor.empty() : tensor<384x384xf32>
    %1159 = linalg.fill ins(%cst_607 : f32) outs(%1158 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1160 = tensor.empty() : tensor<384x384xf32>
    %1161 = linalg.matmul ins(%collapsed_1435, %collapsed_1431 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1159 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1162 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1161 : tensor<384xf32>, tensor<384x384xf32>) outs(%1160 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1436 = tensor.collapse_shape %extracted_slice_1423 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1163 = tensor.empty() : tensor<384x384xf32>
    %1164 = linalg.fill ins(%cst_607 : f32) outs(%1163 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1165 = tensor.empty() : tensor<384x384xf32>
    %1166 = linalg.matmul ins(%collapsed_1436, %collapsed_1432 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1164 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1167 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1166 : tensor<384xf32>, tensor<384x384xf32>) outs(%1165 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1437 = tensor.collapse_shape %extracted_slice_1424 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1168 = tensor.empty() : tensor<384x384xf32>
    %1169 = linalg.fill ins(%cst_607 : f32) outs(%1168 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1170 = tensor.empty() : tensor<384x384xf32>
    %1171 = linalg.matmul ins(%collapsed_1437, %collapsed_1433 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1169 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1172 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1171 : tensor<384xf32>, tensor<384x384xf32>) outs(%1170 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %1173 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1438 = tensor.insert_slice %1157 into %1173[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1439 = tensor.insert_slice %1162 into %inserted_slice_1438[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1440 = tensor.insert_slice %1167 into %inserted_slice_1439[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1441 = tensor.insert_slice %1172 into %inserted_slice_1440[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1442 = tensor.expand_shape %inserted_slice_1441 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %1174 = tensor.empty() : tensor<1x4x384x384xf32>
    %1175 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1442 : tensor<1x4x384x384xf32>) outs(%1174 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %1176 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1443 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %1177 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1175, %collapsed_1443 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%1176 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1178 = tensor.empty() : tensor<1x4x384xf32>
    %1179 = linalg.fill ins(%cst_241 : f32) outs(%1178 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1180 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1177 : tensor<1x4x384x384xf32>) outs(%1179 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %1181 = tensor.empty() : tensor<1x4x384x384xf32>
    %1182 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1177, %1180 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1181 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1183 = tensor.empty() : tensor<1x4x384x384xf32>
    %1184 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1182 : tensor<1x4x384x384xf32>) outs(%1183 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1185 = tensor.empty() : tensor<1x4x384xf32>
    %1186 = linalg.fill ins(%cst_607 : f32) outs(%1185 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1187 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1184 : tensor<1x4x384x384xf32>) outs(%1186 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1444 = tensor.expand_shape %1187 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1188 = tensor.empty() : tensor<1x4x384x1xf32>
    %1189 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1444 : tensor<1x4x384x1xf32>) outs(%1188 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %1190 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1445 = tensor.collapse_shape %1189 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %1191 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1184, %collapsed_1445 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1190 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1192 = tensor.empty() : tensor<1x4x384x32xf32>
    %1193 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1414 : tensor<1x384x4x32xf32>) outs(%1192 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1446 = tensor.collapse_shape %1191 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1447 = tensor.extract_slice %collapsed_1446[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1448 = tensor.extract_slice %collapsed_1446[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1449 = tensor.extract_slice %collapsed_1446[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1450 = tensor.extract_slice %collapsed_1446[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1451 = tensor.collapse_shape %1193 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1452 = tensor.extract_slice %collapsed_1451[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1453 = tensor.extract_slice %collapsed_1451[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1454 = tensor.extract_slice %collapsed_1451[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1455 = tensor.extract_slice %collapsed_1451[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1456 = tensor.collapse_shape %extracted_slice_1452 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1457 = tensor.collapse_shape %extracted_slice_1453 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1458 = tensor.collapse_shape %extracted_slice_1454 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1459 = tensor.collapse_shape %extracted_slice_1455 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1460 = tensor.collapse_shape %extracted_slice_1447 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1194 = tensor.empty() : tensor<384x32xf32>
    %1195 = linalg.fill ins(%cst_607 : f32) outs(%1194 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1196 = tensor.empty() : tensor<384x32xf32>
    %1197 = linalg.matmul ins(%collapsed_1460, %collapsed_1456 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1195 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1198 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1197 : tensor<32xf32>, tensor<384x32xf32>) outs(%1196 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1461 = tensor.collapse_shape %extracted_slice_1448 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1199 = tensor.empty() : tensor<384x32xf32>
    %1200 = linalg.fill ins(%cst_607 : f32) outs(%1199 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1201 = tensor.empty() : tensor<384x32xf32>
    %1202 = linalg.matmul ins(%collapsed_1461, %collapsed_1457 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1200 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1203 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1202 : tensor<32xf32>, tensor<384x32xf32>) outs(%1201 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1462 = tensor.collapse_shape %extracted_slice_1449 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1204 = tensor.empty() : tensor<384x32xf32>
    %1205 = linalg.fill ins(%cst_607 : f32) outs(%1204 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1206 = tensor.empty() : tensor<384x32xf32>
    %1207 = linalg.matmul ins(%collapsed_1462, %collapsed_1458 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1205 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1208 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1207 : tensor<32xf32>, tensor<384x32xf32>) outs(%1206 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1463 = tensor.collapse_shape %extracted_slice_1450 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1209 = tensor.empty() : tensor<384x32xf32>
    %1210 = linalg.fill ins(%cst_607 : f32) outs(%1209 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1211 = tensor.empty() : tensor<384x32xf32>
    %1212 = linalg.matmul ins(%collapsed_1463, %collapsed_1459 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1210 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1213 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1212 : tensor<32xf32>, tensor<384x32xf32>) outs(%1211 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %1214 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1464 = tensor.insert_slice %1198 into %1214[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1465 = tensor.insert_slice %1203 into %inserted_slice_1464[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1466 = tensor.insert_slice %1208 into %inserted_slice_1465[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1467 = tensor.insert_slice %1213 into %inserted_slice_1466[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1468 = tensor.expand_shape %inserted_slice_1467 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %1215 = tensor.empty() : tensor<1x384x4x32xf32>
    %1216 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1468 : tensor<1x4x384x32xf32>) outs(%1215 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1469 = tensor.collapse_shape %1216 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %1217 = tensor.empty() : tensor<384x128xf32>
    %1218 = linalg.fill ins(%cst_607 : f32) outs(%1217 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1219 = tensor.empty() : tensor<384x128xf32>
    %1220 = linalg.matmul ins(%collapsed_1469, %cst_341 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1218 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1221 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_703, %1220 : tensor<128xf32>, tensor<384x128xf32>) outs(%1219 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1470 = tensor.expand_shape %1221 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1222 = tensor.empty() : tensor<1x384x128xf32>
    %1223 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1470, %expanded_1416 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1222 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1224 = tensor.empty() : tensor<1x384x128xf32>
    %1225 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1223, %cst_176 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1224 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1226 = tensor.empty() : tensor<1x384x128xf32>
    %1227 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1225, %cst_175 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1226 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1471 = tensor.collapse_shape %1223 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1228 = tensor.empty() : tensor<384x512xf32>
    %1229 = linalg.fill ins(%cst_607 : f32) outs(%1228 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1230 = tensor.empty() : tensor<384x512xf32>
    %1231 = linalg.matmul ins(%collapsed_1471, %cst_342 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1229 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1232 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_704, %1231 : tensor<512xf32>, tensor<384x512xf32>) outs(%1230 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1472 = tensor.expand_shape %1232 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1233 = tensor.empty() : tensor<1x384x512xf32>
    %1234 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1472 : tensor<1x384x512xf32>) outs(%1233 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1473 = tensor.collapse_shape %1234 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1235 = tensor.empty() : tensor<384x128xf32>
    %1236 = linalg.fill ins(%cst_607 : f32) outs(%1235 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1237 = tensor.empty() : tensor<384x128xf32>
    %1238 = linalg.matmul ins(%collapsed_1473, %cst_343 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1236 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1239 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_705, %1238 : tensor<128xf32>, tensor<384x128xf32>) outs(%1237 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1474 = tensor.expand_shape %1239 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1240 = tensor.empty() : tensor<1x384x128xf32>
    %1241 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1474, %1227 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1240 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1242 = tensor.empty() : tensor<1x384x128xf32>
    %1243 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1241, %cst_174 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1242 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1244 = tensor.empty() : tensor<1x384x128xf32>
    %1245 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1243, %cst_173 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1244 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1475 = tensor.collapse_shape %1241 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1246 = tensor.empty() : tensor<384x512xf32>
    %1247 = linalg.fill ins(%cst_607 : f32) outs(%1246 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1248 = tensor.empty() : tensor<384x512xf32>
    %1249 = linalg.matmul ins(%collapsed_1475, %cst_344 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1247 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1250 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_706, %1249 : tensor<512xf32>, tensor<384x512xf32>) outs(%1248 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1476 = tensor.expand_shape %1250 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1251 = tensor.empty() : tensor<1x384x512xf32>
    %1252 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1476 : tensor<1x384x512xf32>) outs(%1251 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1477 = tensor.collapse_shape %1252 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1253 = tensor.empty() : tensor<384x128xf32>
    %1254 = linalg.fill ins(%cst_607 : f32) outs(%1253 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1255 = tensor.empty() : tensor<384x128xf32>
    %1256 = linalg.matmul ins(%collapsed_1477, %cst_345 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1254 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1257 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_707, %1256 : tensor<128xf32>, tensor<384x128xf32>) outs(%1255 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1478 = tensor.expand_shape %1257 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1258 = tensor.empty() : tensor<1x384x128xf32>
    %1259 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1478, %1245 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1258 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1260 = tensor.empty() : tensor<1x384x128xf32>
    %1261 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1259, %cst_172 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1260 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1262 = tensor.empty() : tensor<1x384x128xf32>
    %1263 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1261, %cst_171 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1262 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1479 = tensor.collapse_shape %1259 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1264 = tensor.empty() : tensor<384x512xf32>
    %1265 = linalg.fill ins(%cst_607 : f32) outs(%1264 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1266 = tensor.empty() : tensor<384x512xf32>
    %1267 = linalg.matmul ins(%collapsed_1479, %cst_346 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1265 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1268 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_708, %1267 : tensor<512xf32>, tensor<384x512xf32>) outs(%1266 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1480 = tensor.expand_shape %1268 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1269 = tensor.empty() : tensor<1x384x512xf32>
    %1270 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1480 : tensor<1x384x512xf32>) outs(%1269 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1481 = tensor.collapse_shape %1270 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1271 = tensor.empty() : tensor<384x128xf32>
    %1272 = linalg.fill ins(%cst_607 : f32) outs(%1271 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1273 = tensor.empty() : tensor<384x128xf32>
    %1274 = linalg.matmul ins(%collapsed_1481, %cst_347 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1272 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1275 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_709, %1274 : tensor<128xf32>, tensor<384x128xf32>) outs(%1273 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1482 = tensor.expand_shape %1275 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1276 = tensor.empty() : tensor<1x384x128xf32>
    %1277 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1482, %1263 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1276 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1278 = tensor.empty() : tensor<1x384x128xf32>
    %1279 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1277, %cst_170 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1278 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1280 = tensor.empty() : tensor<1x384x128xf32>
    %1281 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1279, %cst_169 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1280 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1483 = tensor.collapse_shape %1277 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1282 = tensor.empty() : tensor<384x512xf32>
    %1283 = linalg.fill ins(%cst_607 : f32) outs(%1282 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1284 = tensor.empty() : tensor<384x512xf32>
    %1285 = linalg.matmul ins(%collapsed_1483, %cst_348 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1283 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1286 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_710, %1285 : tensor<512xf32>, tensor<384x512xf32>) outs(%1284 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1484 = tensor.expand_shape %1286 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1287 = tensor.empty() : tensor<1x384x512xf32>
    %1288 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1484 : tensor<1x384x512xf32>) outs(%1287 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1485 = tensor.collapse_shape %1288 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1289 = tensor.empty() : tensor<384x128xf32>
    %1290 = linalg.fill ins(%cst_607 : f32) outs(%1289 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1291 = tensor.empty() : tensor<384x128xf32>
    %1292 = linalg.matmul ins(%collapsed_1485, %cst_349 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1290 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1293 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_711, %1292 : tensor<128xf32>, tensor<384x128xf32>) outs(%1291 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1486 = tensor.expand_shape %1293 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1294 = tensor.empty() : tensor<1x384x128xf32>
    %1295 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1486, %1281 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1294 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1487 = tensor.collapse_shape %1295 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1296 = tensor.empty() : tensor<384x512xf32>
    %1297 = linalg.fill ins(%cst_607 : f32) outs(%1296 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1298 = tensor.empty() : tensor<384x512xf32>
    %1299 = linalg.matmul ins(%collapsed_1487, %cst_350 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1297 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1300 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_712, %1299 : tensor<512xf32>, tensor<384x512xf32>) outs(%1298 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1488 = tensor.expand_shape %1300 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1301 = tensor.empty() : tensor<1x384x512xf32>
    %1302 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1488, %1123 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1301 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %1303 = tensor.empty() : tensor<1x384x512xf32>
    %1304 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1302, %cst_168 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%1303 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %1305 = tensor.empty() : tensor<1x384x512xf32>
    %1306 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1304, %cst_167 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%1305 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1489 = tensor.collapse_shape %1302 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1307 = tensor.empty() : tensor<384x128xf32>
    %1308 = linalg.fill ins(%cst_607 : f32) outs(%1307 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1309 = tensor.empty() : tensor<384x128xf32>
    %1310 = linalg.matmul ins(%collapsed_1489, %cst_351 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1308 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1311 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_713, %1310 : tensor<128xf32>, tensor<384x128xf32>) outs(%1309 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1490 = tensor.expand_shape %1311 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1491 = tensor.collapse_shape %1302 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1312 = tensor.empty() : tensor<384x128xf32>
    %1313 = linalg.fill ins(%cst_607 : f32) outs(%1312 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1314 = tensor.empty() : tensor<384x128xf32>
    %1315 = linalg.matmul ins(%collapsed_1491, %cst_352 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1313 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1316 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_714, %1315 : tensor<128xf32>, tensor<384x128xf32>) outs(%1314 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1492 = tensor.expand_shape %1316 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1493 = tensor.collapse_shape %1306 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1317 = tensor.empty() : tensor<384x128xf32>
    %1318 = linalg.fill ins(%cst_607 : f32) outs(%1317 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1319 = tensor.empty() : tensor<384x128xf32>
    %1320 = linalg.matmul ins(%collapsed_1493, %cst_353 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1318 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1321 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %1320 : tensor<128xf32>, tensor<384x128xf32>) outs(%1319 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %1322 = tensor.empty() : tensor<384x128xf32>
    %1323 = linalg.fill ins(%cst_607 : f32) outs(%1322 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1324 = tensor.empty() : tensor<384x128xf32>
    %1325 = linalg.matmul ins(%1321, %cst_354 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1323 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1326 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_715, %1325 : tensor<128xf32>, tensor<384x128xf32>) outs(%1324 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1494 = tensor.expand_shape %1326 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1327 = tensor.empty() : tensor<384x128xf32>
    %1328 = linalg.fill ins(%cst_607 : f32) outs(%1327 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1329 = tensor.empty() : tensor<384x128xf32>
    %1330 = linalg.matmul ins(%1321, %cst_355 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1328 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1331 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_716, %1330 : tensor<128xf32>, tensor<384x128xf32>) outs(%1329 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1495 = tensor.expand_shape %1331 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1332 = tensor.empty() : tensor<1x4x384x32xf32>
    %1333 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1494 : tensor<1x384x4x32xf32>) outs(%1332 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %1334 = tensor.empty() : tensor<1x4x32x384xf32>
    %1335 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1495 : tensor<1x384x4x32xf32>) outs(%1334 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1496 = tensor.collapse_shape %1333 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1497 = tensor.extract_slice %collapsed_1496[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1498 = tensor.extract_slice %collapsed_1496[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1499 = tensor.extract_slice %collapsed_1496[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1500 = tensor.extract_slice %collapsed_1496[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1501 = tensor.collapse_shape %1335 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1502 = tensor.extract_slice %collapsed_1501[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1503 = tensor.extract_slice %collapsed_1501[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1504 = tensor.extract_slice %collapsed_1501[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1505 = tensor.extract_slice %collapsed_1501[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1506 = tensor.collapse_shape %extracted_slice_1502 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1507 = tensor.collapse_shape %extracted_slice_1503 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1508 = tensor.collapse_shape %extracted_slice_1504 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1509 = tensor.collapse_shape %extracted_slice_1505 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1510 = tensor.collapse_shape %extracted_slice_1497 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1336 = tensor.empty() : tensor<384x384xf32>
    %1337 = linalg.fill ins(%cst_607 : f32) outs(%1336 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1338 = tensor.empty() : tensor<384x384xf32>
    %1339 = linalg.matmul ins(%collapsed_1510, %collapsed_1506 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1337 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1340 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1339 : tensor<384xf32>, tensor<384x384xf32>) outs(%1338 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1511 = tensor.collapse_shape %extracted_slice_1498 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1341 = tensor.empty() : tensor<384x384xf32>
    %1342 = linalg.fill ins(%cst_607 : f32) outs(%1341 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1343 = tensor.empty() : tensor<384x384xf32>
    %1344 = linalg.matmul ins(%collapsed_1511, %collapsed_1507 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1342 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1345 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1344 : tensor<384xf32>, tensor<384x384xf32>) outs(%1343 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1512 = tensor.collapse_shape %extracted_slice_1499 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1346 = tensor.empty() : tensor<384x384xf32>
    %1347 = linalg.fill ins(%cst_607 : f32) outs(%1346 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1348 = tensor.empty() : tensor<384x384xf32>
    %1349 = linalg.matmul ins(%collapsed_1512, %collapsed_1508 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1347 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1350 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1349 : tensor<384xf32>, tensor<384x384xf32>) outs(%1348 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1513 = tensor.collapse_shape %extracted_slice_1500 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1351 = tensor.empty() : tensor<384x384xf32>
    %1352 = linalg.fill ins(%cst_607 : f32) outs(%1351 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1353 = tensor.empty() : tensor<384x384xf32>
    %1354 = linalg.matmul ins(%collapsed_1513, %collapsed_1509 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1352 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1355 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1354 : tensor<384xf32>, tensor<384x384xf32>) outs(%1353 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %1356 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1514 = tensor.insert_slice %1340 into %1356[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1515 = tensor.insert_slice %1345 into %inserted_slice_1514[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1516 = tensor.insert_slice %1350 into %inserted_slice_1515[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1517 = tensor.insert_slice %1355 into %inserted_slice_1516[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1518 = tensor.expand_shape %inserted_slice_1517 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %1357 = tensor.empty() : tensor<1x4x384x384xf32>
    %1358 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1518 : tensor<1x4x384x384xf32>) outs(%1357 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %1359 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1519 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %1360 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1358, %collapsed_1519 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%1359 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1361 = tensor.empty() : tensor<1x4x384xf32>
    %1362 = linalg.fill ins(%cst_241 : f32) outs(%1361 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1363 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1360 : tensor<1x4x384x384xf32>) outs(%1362 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %1364 = tensor.empty() : tensor<1x4x384x384xf32>
    %1365 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1360, %1363 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1364 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1366 = tensor.empty() : tensor<1x4x384x384xf32>
    %1367 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1365 : tensor<1x4x384x384xf32>) outs(%1366 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1368 = tensor.empty() : tensor<1x4x384xf32>
    %1369 = linalg.fill ins(%cst_607 : f32) outs(%1368 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1370 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1367 : tensor<1x4x384x384xf32>) outs(%1369 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1520 = tensor.expand_shape %1370 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1371 = tensor.empty() : tensor<1x4x384x1xf32>
    %1372 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1520 : tensor<1x4x384x1xf32>) outs(%1371 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %1373 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1521 = tensor.collapse_shape %1372 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %1374 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1367, %collapsed_1521 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1373 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1375 = tensor.empty() : tensor<1x4x384x32xf32>
    %1376 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1490 : tensor<1x384x4x32xf32>) outs(%1375 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1522 = tensor.collapse_shape %1374 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1523 = tensor.extract_slice %collapsed_1522[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1524 = tensor.extract_slice %collapsed_1522[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1525 = tensor.extract_slice %collapsed_1522[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1526 = tensor.extract_slice %collapsed_1522[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1527 = tensor.collapse_shape %1376 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1528 = tensor.extract_slice %collapsed_1527[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1529 = tensor.extract_slice %collapsed_1527[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1530 = tensor.extract_slice %collapsed_1527[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1531 = tensor.extract_slice %collapsed_1527[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1532 = tensor.collapse_shape %extracted_slice_1528 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1533 = tensor.collapse_shape %extracted_slice_1529 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1534 = tensor.collapse_shape %extracted_slice_1530 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1535 = tensor.collapse_shape %extracted_slice_1531 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1536 = tensor.collapse_shape %extracted_slice_1523 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1377 = tensor.empty() : tensor<384x32xf32>
    %1378 = linalg.fill ins(%cst_607 : f32) outs(%1377 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1379 = tensor.empty() : tensor<384x32xf32>
    %1380 = linalg.matmul ins(%collapsed_1536, %collapsed_1532 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1378 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1381 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1380 : tensor<32xf32>, tensor<384x32xf32>) outs(%1379 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1537 = tensor.collapse_shape %extracted_slice_1524 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1382 = tensor.empty() : tensor<384x32xf32>
    %1383 = linalg.fill ins(%cst_607 : f32) outs(%1382 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1384 = tensor.empty() : tensor<384x32xf32>
    %1385 = linalg.matmul ins(%collapsed_1537, %collapsed_1533 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1383 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1386 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1385 : tensor<32xf32>, tensor<384x32xf32>) outs(%1384 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1538 = tensor.collapse_shape %extracted_slice_1525 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1387 = tensor.empty() : tensor<384x32xf32>
    %1388 = linalg.fill ins(%cst_607 : f32) outs(%1387 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1389 = tensor.empty() : tensor<384x32xf32>
    %1390 = linalg.matmul ins(%collapsed_1538, %collapsed_1534 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1388 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1391 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1390 : tensor<32xf32>, tensor<384x32xf32>) outs(%1389 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1539 = tensor.collapse_shape %extracted_slice_1526 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1392 = tensor.empty() : tensor<384x32xf32>
    %1393 = linalg.fill ins(%cst_607 : f32) outs(%1392 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1394 = tensor.empty() : tensor<384x32xf32>
    %1395 = linalg.matmul ins(%collapsed_1539, %collapsed_1535 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1393 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1396 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1395 : tensor<32xf32>, tensor<384x32xf32>) outs(%1394 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %1397 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1540 = tensor.insert_slice %1381 into %1397[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1541 = tensor.insert_slice %1386 into %inserted_slice_1540[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1542 = tensor.insert_slice %1391 into %inserted_slice_1541[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1543 = tensor.insert_slice %1396 into %inserted_slice_1542[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1544 = tensor.expand_shape %inserted_slice_1543 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %1398 = tensor.empty() : tensor<1x384x4x32xf32>
    %1399 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1544 : tensor<1x4x384x32xf32>) outs(%1398 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1545 = tensor.collapse_shape %1399 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %1400 = tensor.empty() : tensor<384x128xf32>
    %1401 = linalg.fill ins(%cst_607 : f32) outs(%1400 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1402 = tensor.empty() : tensor<384x128xf32>
    %1403 = linalg.matmul ins(%collapsed_1545, %cst_356 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1401 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1404 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_717, %1403 : tensor<128xf32>, tensor<384x128xf32>) outs(%1402 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1546 = tensor.expand_shape %1404 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1405 = tensor.empty() : tensor<1x384x128xf32>
    %1406 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1546, %expanded_1492 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1405 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1407 = tensor.empty() : tensor<1x384x128xf32>
    %1408 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1406, %cst_166 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1407 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1409 = tensor.empty() : tensor<1x384x128xf32>
    %1410 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1408, %cst_165 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1409 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1547 = tensor.collapse_shape %1406 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1411 = tensor.empty() : tensor<384x512xf32>
    %1412 = linalg.fill ins(%cst_607 : f32) outs(%1411 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1413 = tensor.empty() : tensor<384x512xf32>
    %1414 = linalg.matmul ins(%collapsed_1547, %cst_357 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1412 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1415 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_718, %1414 : tensor<512xf32>, tensor<384x512xf32>) outs(%1413 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1548 = tensor.expand_shape %1415 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1416 = tensor.empty() : tensor<1x384x512xf32>
    %1417 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1548 : tensor<1x384x512xf32>) outs(%1416 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1549 = tensor.collapse_shape %1417 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1418 = tensor.empty() : tensor<384x128xf32>
    %1419 = linalg.fill ins(%cst_607 : f32) outs(%1418 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1420 = tensor.empty() : tensor<384x128xf32>
    %1421 = linalg.matmul ins(%collapsed_1549, %cst_358 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1419 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1422 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_719, %1421 : tensor<128xf32>, tensor<384x128xf32>) outs(%1420 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1550 = tensor.expand_shape %1422 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1423 = tensor.empty() : tensor<1x384x128xf32>
    %1424 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1550, %1410 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1423 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1425 = tensor.empty() : tensor<1x384x128xf32>
    %1426 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1424, %cst_164 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1425 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1427 = tensor.empty() : tensor<1x384x128xf32>
    %1428 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1426, %cst_163 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1427 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1551 = tensor.collapse_shape %1424 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1429 = tensor.empty() : tensor<384x512xf32>
    %1430 = linalg.fill ins(%cst_607 : f32) outs(%1429 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1431 = tensor.empty() : tensor<384x512xf32>
    %1432 = linalg.matmul ins(%collapsed_1551, %cst_359 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1430 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1433 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_720, %1432 : tensor<512xf32>, tensor<384x512xf32>) outs(%1431 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1552 = tensor.expand_shape %1433 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1434 = tensor.empty() : tensor<1x384x512xf32>
    %1435 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1552 : tensor<1x384x512xf32>) outs(%1434 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1553 = tensor.collapse_shape %1435 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1436 = tensor.empty() : tensor<384x128xf32>
    %1437 = linalg.fill ins(%cst_607 : f32) outs(%1436 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1438 = tensor.empty() : tensor<384x128xf32>
    %1439 = linalg.matmul ins(%collapsed_1553, %cst_360 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1437 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1440 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_721, %1439 : tensor<128xf32>, tensor<384x128xf32>) outs(%1438 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1554 = tensor.expand_shape %1440 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1441 = tensor.empty() : tensor<1x384x128xf32>
    %1442 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1554, %1428 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1441 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1443 = tensor.empty() : tensor<1x384x128xf32>
    %1444 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1442, %cst_162 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1443 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1445 = tensor.empty() : tensor<1x384x128xf32>
    %1446 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1444, %cst_161 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1445 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1555 = tensor.collapse_shape %1442 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1447 = tensor.empty() : tensor<384x512xf32>
    %1448 = linalg.fill ins(%cst_607 : f32) outs(%1447 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1449 = tensor.empty() : tensor<384x512xf32>
    %1450 = linalg.matmul ins(%collapsed_1555, %cst_361 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1448 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1451 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_722, %1450 : tensor<512xf32>, tensor<384x512xf32>) outs(%1449 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1556 = tensor.expand_shape %1451 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1452 = tensor.empty() : tensor<1x384x512xf32>
    %1453 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1556 : tensor<1x384x512xf32>) outs(%1452 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1557 = tensor.collapse_shape %1453 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1454 = tensor.empty() : tensor<384x128xf32>
    %1455 = linalg.fill ins(%cst_607 : f32) outs(%1454 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1456 = tensor.empty() : tensor<384x128xf32>
    %1457 = linalg.matmul ins(%collapsed_1557, %cst_362 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1455 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1458 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_723, %1457 : tensor<128xf32>, tensor<384x128xf32>) outs(%1456 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1558 = tensor.expand_shape %1458 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1459 = tensor.empty() : tensor<1x384x128xf32>
    %1460 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1558, %1446 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1459 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1461 = tensor.empty() : tensor<1x384x128xf32>
    %1462 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1460, %cst_160 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1461 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1463 = tensor.empty() : tensor<1x384x128xf32>
    %1464 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1462, %cst_159 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1463 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1559 = tensor.collapse_shape %1460 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1465 = tensor.empty() : tensor<384x512xf32>
    %1466 = linalg.fill ins(%cst_607 : f32) outs(%1465 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1467 = tensor.empty() : tensor<384x512xf32>
    %1468 = linalg.matmul ins(%collapsed_1559, %cst_363 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1466 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1469 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_724, %1468 : tensor<512xf32>, tensor<384x512xf32>) outs(%1467 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1560 = tensor.expand_shape %1469 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1470 = tensor.empty() : tensor<1x384x512xf32>
    %1471 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1560 : tensor<1x384x512xf32>) outs(%1470 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1561 = tensor.collapse_shape %1471 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1472 = tensor.empty() : tensor<384x128xf32>
    %1473 = linalg.fill ins(%cst_607 : f32) outs(%1472 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1474 = tensor.empty() : tensor<384x128xf32>
    %1475 = linalg.matmul ins(%collapsed_1561, %cst_364 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1473 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1476 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_725, %1475 : tensor<128xf32>, tensor<384x128xf32>) outs(%1474 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1562 = tensor.expand_shape %1476 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1477 = tensor.empty() : tensor<1x384x128xf32>
    %1478 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1562, %1464 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1477 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1563 = tensor.collapse_shape %1478 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1479 = tensor.empty() : tensor<384x512xf32>
    %1480 = linalg.fill ins(%cst_607 : f32) outs(%1479 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1481 = tensor.empty() : tensor<384x512xf32>
    %1482 = linalg.matmul ins(%collapsed_1563, %cst_365 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1480 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1483 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_726, %1482 : tensor<512xf32>, tensor<384x512xf32>) outs(%1481 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1564 = tensor.expand_shape %1483 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1484 = tensor.empty() : tensor<1x384x512xf32>
    %1485 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1564, %1306 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1484 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %1486 = tensor.empty() : tensor<1x384x512xf32>
    %1487 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1485, %cst_158 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%1486 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %1488 = tensor.empty() : tensor<1x384x512xf32>
    %1489 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1487, %cst_157 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%1488 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1565 = tensor.collapse_shape %1485 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1490 = tensor.empty() : tensor<384x128xf32>
    %1491 = linalg.fill ins(%cst_607 : f32) outs(%1490 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1492 = tensor.empty() : tensor<384x128xf32>
    %1493 = linalg.matmul ins(%collapsed_1565, %cst_366 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1491 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1494 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_727, %1493 : tensor<128xf32>, tensor<384x128xf32>) outs(%1492 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1566 = tensor.expand_shape %1494 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1567 = tensor.collapse_shape %1485 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1495 = tensor.empty() : tensor<384x128xf32>
    %1496 = linalg.fill ins(%cst_607 : f32) outs(%1495 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1497 = tensor.empty() : tensor<384x128xf32>
    %1498 = linalg.matmul ins(%collapsed_1567, %cst_367 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1496 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1499 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_728, %1498 : tensor<128xf32>, tensor<384x128xf32>) outs(%1497 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1568 = tensor.expand_shape %1499 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1569 = tensor.collapse_shape %1489 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1500 = tensor.empty() : tensor<384x128xf32>
    %1501 = linalg.fill ins(%cst_607 : f32) outs(%1500 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1502 = tensor.empty() : tensor<384x128xf32>
    %1503 = linalg.matmul ins(%collapsed_1569, %cst_368 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1501 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1504 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %1503 : tensor<128xf32>, tensor<384x128xf32>) outs(%1502 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %1505 = tensor.empty() : tensor<384x128xf32>
    %1506 = linalg.fill ins(%cst_607 : f32) outs(%1505 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1507 = tensor.empty() : tensor<384x128xf32>
    %1508 = linalg.matmul ins(%1504, %cst_369 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1506 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1509 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_729, %1508 : tensor<128xf32>, tensor<384x128xf32>) outs(%1507 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1570 = tensor.expand_shape %1509 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1510 = tensor.empty() : tensor<384x128xf32>
    %1511 = linalg.fill ins(%cst_607 : f32) outs(%1510 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1512 = tensor.empty() : tensor<384x128xf32>
    %1513 = linalg.matmul ins(%1504, %cst_370 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1511 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1514 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_730, %1513 : tensor<128xf32>, tensor<384x128xf32>) outs(%1512 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1571 = tensor.expand_shape %1514 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1515 = tensor.empty() : tensor<1x4x384x32xf32>
    %1516 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1570 : tensor<1x384x4x32xf32>) outs(%1515 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %1517 = tensor.empty() : tensor<1x4x32x384xf32>
    %1518 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1571 : tensor<1x384x4x32xf32>) outs(%1517 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1572 = tensor.collapse_shape %1516 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1573 = tensor.extract_slice %collapsed_1572[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1574 = tensor.extract_slice %collapsed_1572[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1575 = tensor.extract_slice %collapsed_1572[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1576 = tensor.extract_slice %collapsed_1572[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1577 = tensor.collapse_shape %1518 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1578 = tensor.extract_slice %collapsed_1577[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1579 = tensor.extract_slice %collapsed_1577[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1580 = tensor.extract_slice %collapsed_1577[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1581 = tensor.extract_slice %collapsed_1577[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1582 = tensor.collapse_shape %extracted_slice_1578 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1583 = tensor.collapse_shape %extracted_slice_1579 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1584 = tensor.collapse_shape %extracted_slice_1580 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1585 = tensor.collapse_shape %extracted_slice_1581 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1586 = tensor.collapse_shape %extracted_slice_1573 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1519 = tensor.empty() : tensor<384x384xf32>
    %1520 = linalg.fill ins(%cst_607 : f32) outs(%1519 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1521 = tensor.empty() : tensor<384x384xf32>
    %1522 = linalg.matmul ins(%collapsed_1586, %collapsed_1582 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1520 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1523 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1522 : tensor<384xf32>, tensor<384x384xf32>) outs(%1521 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1587 = tensor.collapse_shape %extracted_slice_1574 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1524 = tensor.empty() : tensor<384x384xf32>
    %1525 = linalg.fill ins(%cst_607 : f32) outs(%1524 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1526 = tensor.empty() : tensor<384x384xf32>
    %1527 = linalg.matmul ins(%collapsed_1587, %collapsed_1583 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1525 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1528 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1527 : tensor<384xf32>, tensor<384x384xf32>) outs(%1526 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1588 = tensor.collapse_shape %extracted_slice_1575 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1529 = tensor.empty() : tensor<384x384xf32>
    %1530 = linalg.fill ins(%cst_607 : f32) outs(%1529 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1531 = tensor.empty() : tensor<384x384xf32>
    %1532 = linalg.matmul ins(%collapsed_1588, %collapsed_1584 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1530 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1533 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1532 : tensor<384xf32>, tensor<384x384xf32>) outs(%1531 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1589 = tensor.collapse_shape %extracted_slice_1576 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1534 = tensor.empty() : tensor<384x384xf32>
    %1535 = linalg.fill ins(%cst_607 : f32) outs(%1534 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1536 = tensor.empty() : tensor<384x384xf32>
    %1537 = linalg.matmul ins(%collapsed_1589, %collapsed_1585 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1535 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1538 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1537 : tensor<384xf32>, tensor<384x384xf32>) outs(%1536 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %1539 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1590 = tensor.insert_slice %1523 into %1539[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1591 = tensor.insert_slice %1528 into %inserted_slice_1590[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1592 = tensor.insert_slice %1533 into %inserted_slice_1591[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1593 = tensor.insert_slice %1538 into %inserted_slice_1592[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1594 = tensor.expand_shape %inserted_slice_1593 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %1540 = tensor.empty() : tensor<1x4x384x384xf32>
    %1541 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1594 : tensor<1x4x384x384xf32>) outs(%1540 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %1542 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1595 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %1543 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1541, %collapsed_1595 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%1542 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1544 = tensor.empty() : tensor<1x4x384xf32>
    %1545 = linalg.fill ins(%cst_241 : f32) outs(%1544 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1546 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1543 : tensor<1x4x384x384xf32>) outs(%1545 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %1547 = tensor.empty() : tensor<1x4x384x384xf32>
    %1548 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1543, %1546 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1547 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1549 = tensor.empty() : tensor<1x4x384x384xf32>
    %1550 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1548 : tensor<1x4x384x384xf32>) outs(%1549 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1551 = tensor.empty() : tensor<1x4x384xf32>
    %1552 = linalg.fill ins(%cst_607 : f32) outs(%1551 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1553 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1550 : tensor<1x4x384x384xf32>) outs(%1552 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1596 = tensor.expand_shape %1553 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1554 = tensor.empty() : tensor<1x4x384x1xf32>
    %1555 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1596 : tensor<1x4x384x1xf32>) outs(%1554 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %1556 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1597 = tensor.collapse_shape %1555 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %1557 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1550, %collapsed_1597 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1556 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1558 = tensor.empty() : tensor<1x4x384x32xf32>
    %1559 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1566 : tensor<1x384x4x32xf32>) outs(%1558 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1598 = tensor.collapse_shape %1557 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1599 = tensor.extract_slice %collapsed_1598[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1600 = tensor.extract_slice %collapsed_1598[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1601 = tensor.extract_slice %collapsed_1598[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1602 = tensor.extract_slice %collapsed_1598[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1603 = tensor.collapse_shape %1559 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1604 = tensor.extract_slice %collapsed_1603[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1605 = tensor.extract_slice %collapsed_1603[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1606 = tensor.extract_slice %collapsed_1603[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1607 = tensor.extract_slice %collapsed_1603[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1608 = tensor.collapse_shape %extracted_slice_1604 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1609 = tensor.collapse_shape %extracted_slice_1605 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1610 = tensor.collapse_shape %extracted_slice_1606 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1611 = tensor.collapse_shape %extracted_slice_1607 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1612 = tensor.collapse_shape %extracted_slice_1599 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1560 = tensor.empty() : tensor<384x32xf32>
    %1561 = linalg.fill ins(%cst_607 : f32) outs(%1560 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1562 = tensor.empty() : tensor<384x32xf32>
    %1563 = linalg.matmul ins(%collapsed_1612, %collapsed_1608 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1561 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1564 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1563 : tensor<32xf32>, tensor<384x32xf32>) outs(%1562 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1613 = tensor.collapse_shape %extracted_slice_1600 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1565 = tensor.empty() : tensor<384x32xf32>
    %1566 = linalg.fill ins(%cst_607 : f32) outs(%1565 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1567 = tensor.empty() : tensor<384x32xf32>
    %1568 = linalg.matmul ins(%collapsed_1613, %collapsed_1609 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1566 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1569 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1568 : tensor<32xf32>, tensor<384x32xf32>) outs(%1567 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1614 = tensor.collapse_shape %extracted_slice_1601 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1570 = tensor.empty() : tensor<384x32xf32>
    %1571 = linalg.fill ins(%cst_607 : f32) outs(%1570 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1572 = tensor.empty() : tensor<384x32xf32>
    %1573 = linalg.matmul ins(%collapsed_1614, %collapsed_1610 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1571 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1574 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1573 : tensor<32xf32>, tensor<384x32xf32>) outs(%1572 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1615 = tensor.collapse_shape %extracted_slice_1602 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1575 = tensor.empty() : tensor<384x32xf32>
    %1576 = linalg.fill ins(%cst_607 : f32) outs(%1575 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1577 = tensor.empty() : tensor<384x32xf32>
    %1578 = linalg.matmul ins(%collapsed_1615, %collapsed_1611 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1576 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1579 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1578 : tensor<32xf32>, tensor<384x32xf32>) outs(%1577 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %1580 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1616 = tensor.insert_slice %1564 into %1580[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1617 = tensor.insert_slice %1569 into %inserted_slice_1616[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1618 = tensor.insert_slice %1574 into %inserted_slice_1617[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1619 = tensor.insert_slice %1579 into %inserted_slice_1618[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1620 = tensor.expand_shape %inserted_slice_1619 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %1581 = tensor.empty() : tensor<1x384x4x32xf32>
    %1582 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1620 : tensor<1x4x384x32xf32>) outs(%1581 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1621 = tensor.collapse_shape %1582 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %1583 = tensor.empty() : tensor<384x128xf32>
    %1584 = linalg.fill ins(%cst_607 : f32) outs(%1583 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1585 = tensor.empty() : tensor<384x128xf32>
    %1586 = linalg.matmul ins(%collapsed_1621, %cst_371 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1584 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1587 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_731, %1586 : tensor<128xf32>, tensor<384x128xf32>) outs(%1585 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1622 = tensor.expand_shape %1587 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1588 = tensor.empty() : tensor<1x384x128xf32>
    %1589 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1622, %expanded_1568 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1588 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1590 = tensor.empty() : tensor<1x384x128xf32>
    %1591 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1589, %cst_156 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1590 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1592 = tensor.empty() : tensor<1x384x128xf32>
    %1593 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1591, %cst_155 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1592 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1623 = tensor.collapse_shape %1589 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1594 = tensor.empty() : tensor<384x512xf32>
    %1595 = linalg.fill ins(%cst_607 : f32) outs(%1594 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1596 = tensor.empty() : tensor<384x512xf32>
    %1597 = linalg.matmul ins(%collapsed_1623, %cst_372 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1595 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1598 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_732, %1597 : tensor<512xf32>, tensor<384x512xf32>) outs(%1596 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1624 = tensor.expand_shape %1598 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1599 = tensor.empty() : tensor<1x384x512xf32>
    %1600 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1624 : tensor<1x384x512xf32>) outs(%1599 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1625 = tensor.collapse_shape %1600 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1601 = tensor.empty() : tensor<384x128xf32>
    %1602 = linalg.fill ins(%cst_607 : f32) outs(%1601 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1603 = tensor.empty() : tensor<384x128xf32>
    %1604 = linalg.matmul ins(%collapsed_1625, %cst_373 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1602 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1605 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_733, %1604 : tensor<128xf32>, tensor<384x128xf32>) outs(%1603 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1626 = tensor.expand_shape %1605 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1606 = tensor.empty() : tensor<1x384x128xf32>
    %1607 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1626, %1593 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1606 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1608 = tensor.empty() : tensor<1x384x128xf32>
    %1609 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1607, %cst_154 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1608 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1610 = tensor.empty() : tensor<1x384x128xf32>
    %1611 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1609, %cst_153 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1610 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1627 = tensor.collapse_shape %1607 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1612 = tensor.empty() : tensor<384x512xf32>
    %1613 = linalg.fill ins(%cst_607 : f32) outs(%1612 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1614 = tensor.empty() : tensor<384x512xf32>
    %1615 = linalg.matmul ins(%collapsed_1627, %cst_374 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1613 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1616 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_734, %1615 : tensor<512xf32>, tensor<384x512xf32>) outs(%1614 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1628 = tensor.expand_shape %1616 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1617 = tensor.empty() : tensor<1x384x512xf32>
    %1618 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1628 : tensor<1x384x512xf32>) outs(%1617 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1629 = tensor.collapse_shape %1618 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1619 = tensor.empty() : tensor<384x128xf32>
    %1620 = linalg.fill ins(%cst_607 : f32) outs(%1619 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1621 = tensor.empty() : tensor<384x128xf32>
    %1622 = linalg.matmul ins(%collapsed_1629, %cst_375 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1620 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1623 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_735, %1622 : tensor<128xf32>, tensor<384x128xf32>) outs(%1621 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1630 = tensor.expand_shape %1623 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1624 = tensor.empty() : tensor<1x384x128xf32>
    %1625 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1630, %1611 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1624 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1626 = tensor.empty() : tensor<1x384x128xf32>
    %1627 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1625, %cst_152 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1626 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1628 = tensor.empty() : tensor<1x384x128xf32>
    %1629 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1627, %cst_151 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1628 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1631 = tensor.collapse_shape %1625 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1630 = tensor.empty() : tensor<384x512xf32>
    %1631 = linalg.fill ins(%cst_607 : f32) outs(%1630 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1632 = tensor.empty() : tensor<384x512xf32>
    %1633 = linalg.matmul ins(%collapsed_1631, %cst_376 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1631 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1634 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_736, %1633 : tensor<512xf32>, tensor<384x512xf32>) outs(%1632 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1632 = tensor.expand_shape %1634 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1635 = tensor.empty() : tensor<1x384x512xf32>
    %1636 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1632 : tensor<1x384x512xf32>) outs(%1635 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1633 = tensor.collapse_shape %1636 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1637 = tensor.empty() : tensor<384x128xf32>
    %1638 = linalg.fill ins(%cst_607 : f32) outs(%1637 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1639 = tensor.empty() : tensor<384x128xf32>
    %1640 = linalg.matmul ins(%collapsed_1633, %cst_377 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1638 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1641 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_737, %1640 : tensor<128xf32>, tensor<384x128xf32>) outs(%1639 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1634 = tensor.expand_shape %1641 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1642 = tensor.empty() : tensor<1x384x128xf32>
    %1643 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1634, %1629 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1642 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1644 = tensor.empty() : tensor<1x384x128xf32>
    %1645 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1643, %cst_150 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1644 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1646 = tensor.empty() : tensor<1x384x128xf32>
    %1647 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1645, %cst_149 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1646 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1635 = tensor.collapse_shape %1643 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1648 = tensor.empty() : tensor<384x512xf32>
    %1649 = linalg.fill ins(%cst_607 : f32) outs(%1648 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1650 = tensor.empty() : tensor<384x512xf32>
    %1651 = linalg.matmul ins(%collapsed_1635, %cst_378 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1649 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1652 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_738, %1651 : tensor<512xf32>, tensor<384x512xf32>) outs(%1650 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1636 = tensor.expand_shape %1652 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1653 = tensor.empty() : tensor<1x384x512xf32>
    %1654 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1636 : tensor<1x384x512xf32>) outs(%1653 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1637 = tensor.collapse_shape %1654 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1655 = tensor.empty() : tensor<384x128xf32>
    %1656 = linalg.fill ins(%cst_607 : f32) outs(%1655 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1657 = tensor.empty() : tensor<384x128xf32>
    %1658 = linalg.matmul ins(%collapsed_1637, %cst_379 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1656 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1659 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_739, %1658 : tensor<128xf32>, tensor<384x128xf32>) outs(%1657 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1638 = tensor.expand_shape %1659 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1660 = tensor.empty() : tensor<1x384x128xf32>
    %1661 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1638, %1647 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1660 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1639 = tensor.collapse_shape %1661 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1662 = tensor.empty() : tensor<384x512xf32>
    %1663 = linalg.fill ins(%cst_607 : f32) outs(%1662 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1664 = tensor.empty() : tensor<384x512xf32>
    %1665 = linalg.matmul ins(%collapsed_1639, %cst_380 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1663 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1666 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_740, %1665 : tensor<512xf32>, tensor<384x512xf32>) outs(%1664 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1640 = tensor.expand_shape %1666 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1667 = tensor.empty() : tensor<1x384x512xf32>
    %1668 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1640, %1489 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1667 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %1669 = tensor.empty() : tensor<1x384x512xf32>
    %1670 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1668, %cst_148 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%1669 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %1671 = tensor.empty() : tensor<1x384x512xf32>
    %1672 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1670, %cst_147 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%1671 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1641 = tensor.collapse_shape %1668 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1673 = tensor.empty() : tensor<384x128xf32>
    %1674 = linalg.fill ins(%cst_607 : f32) outs(%1673 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1675 = tensor.empty() : tensor<384x128xf32>
    %1676 = linalg.matmul ins(%collapsed_1641, %cst_381 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1674 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1677 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_741, %1676 : tensor<128xf32>, tensor<384x128xf32>) outs(%1675 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1642 = tensor.expand_shape %1677 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1643 = tensor.collapse_shape %1668 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1678 = tensor.empty() : tensor<384x128xf32>
    %1679 = linalg.fill ins(%cst_607 : f32) outs(%1678 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1680 = tensor.empty() : tensor<384x128xf32>
    %1681 = linalg.matmul ins(%collapsed_1643, %cst_382 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1679 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1682 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_742, %1681 : tensor<128xf32>, tensor<384x128xf32>) outs(%1680 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1644 = tensor.expand_shape %1682 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1645 = tensor.collapse_shape %1672 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1683 = tensor.empty() : tensor<384x128xf32>
    %1684 = linalg.fill ins(%cst_607 : f32) outs(%1683 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1685 = tensor.empty() : tensor<384x128xf32>
    %1686 = linalg.matmul ins(%collapsed_1645, %cst_383 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1684 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1687 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %1686 : tensor<128xf32>, tensor<384x128xf32>) outs(%1685 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %1688 = tensor.empty() : tensor<384x128xf32>
    %1689 = linalg.fill ins(%cst_607 : f32) outs(%1688 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1690 = tensor.empty() : tensor<384x128xf32>
    %1691 = linalg.matmul ins(%1687, %cst_384 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1689 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1692 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_743, %1691 : tensor<128xf32>, tensor<384x128xf32>) outs(%1690 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1646 = tensor.expand_shape %1692 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1693 = tensor.empty() : tensor<384x128xf32>
    %1694 = linalg.fill ins(%cst_607 : f32) outs(%1693 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1695 = tensor.empty() : tensor<384x128xf32>
    %1696 = linalg.matmul ins(%1687, %cst_385 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1694 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1697 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_744, %1696 : tensor<128xf32>, tensor<384x128xf32>) outs(%1695 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1647 = tensor.expand_shape %1697 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1698 = tensor.empty() : tensor<1x4x384x32xf32>
    %1699 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1646 : tensor<1x384x4x32xf32>) outs(%1698 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %1700 = tensor.empty() : tensor<1x4x32x384xf32>
    %1701 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1647 : tensor<1x384x4x32xf32>) outs(%1700 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1648 = tensor.collapse_shape %1699 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1649 = tensor.extract_slice %collapsed_1648[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1650 = tensor.extract_slice %collapsed_1648[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1651 = tensor.extract_slice %collapsed_1648[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1652 = tensor.extract_slice %collapsed_1648[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1653 = tensor.collapse_shape %1701 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1654 = tensor.extract_slice %collapsed_1653[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1655 = tensor.extract_slice %collapsed_1653[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1656 = tensor.extract_slice %collapsed_1653[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1657 = tensor.extract_slice %collapsed_1653[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1658 = tensor.collapse_shape %extracted_slice_1654 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1659 = tensor.collapse_shape %extracted_slice_1655 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1660 = tensor.collapse_shape %extracted_slice_1656 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1661 = tensor.collapse_shape %extracted_slice_1657 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1662 = tensor.collapse_shape %extracted_slice_1649 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1702 = tensor.empty() : tensor<384x384xf32>
    %1703 = linalg.fill ins(%cst_607 : f32) outs(%1702 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1704 = tensor.empty() : tensor<384x384xf32>
    %1705 = linalg.matmul ins(%collapsed_1662, %collapsed_1658 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1703 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1706 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1705 : tensor<384xf32>, tensor<384x384xf32>) outs(%1704 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1663 = tensor.collapse_shape %extracted_slice_1650 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1707 = tensor.empty() : tensor<384x384xf32>
    %1708 = linalg.fill ins(%cst_607 : f32) outs(%1707 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1709 = tensor.empty() : tensor<384x384xf32>
    %1710 = linalg.matmul ins(%collapsed_1663, %collapsed_1659 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1708 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1711 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1710 : tensor<384xf32>, tensor<384x384xf32>) outs(%1709 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1664 = tensor.collapse_shape %extracted_slice_1651 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1712 = tensor.empty() : tensor<384x384xf32>
    %1713 = linalg.fill ins(%cst_607 : f32) outs(%1712 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1714 = tensor.empty() : tensor<384x384xf32>
    %1715 = linalg.matmul ins(%collapsed_1664, %collapsed_1660 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1713 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1716 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1715 : tensor<384xf32>, tensor<384x384xf32>) outs(%1714 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1665 = tensor.collapse_shape %extracted_slice_1652 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1717 = tensor.empty() : tensor<384x384xf32>
    %1718 = linalg.fill ins(%cst_607 : f32) outs(%1717 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1719 = tensor.empty() : tensor<384x384xf32>
    %1720 = linalg.matmul ins(%collapsed_1665, %collapsed_1661 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1718 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1721 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1720 : tensor<384xf32>, tensor<384x384xf32>) outs(%1719 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %1722 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1666 = tensor.insert_slice %1706 into %1722[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1667 = tensor.insert_slice %1711 into %inserted_slice_1666[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1668 = tensor.insert_slice %1716 into %inserted_slice_1667[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1669 = tensor.insert_slice %1721 into %inserted_slice_1668[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1670 = tensor.expand_shape %inserted_slice_1669 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %1723 = tensor.empty() : tensor<1x4x384x384xf32>
    %1724 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1670 : tensor<1x4x384x384xf32>) outs(%1723 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %1725 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1671 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %1726 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1724, %collapsed_1671 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%1725 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1727 = tensor.empty() : tensor<1x4x384xf32>
    %1728 = linalg.fill ins(%cst_241 : f32) outs(%1727 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1729 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1726 : tensor<1x4x384x384xf32>) outs(%1728 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %1730 = tensor.empty() : tensor<1x4x384x384xf32>
    %1731 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1726, %1729 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1730 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1732 = tensor.empty() : tensor<1x4x384x384xf32>
    %1733 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1731 : tensor<1x4x384x384xf32>) outs(%1732 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1734 = tensor.empty() : tensor<1x4x384xf32>
    %1735 = linalg.fill ins(%cst_607 : f32) outs(%1734 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1736 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1733 : tensor<1x4x384x384xf32>) outs(%1735 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1672 = tensor.expand_shape %1736 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1737 = tensor.empty() : tensor<1x4x384x1xf32>
    %1738 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1672 : tensor<1x4x384x1xf32>) outs(%1737 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %1739 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1673 = tensor.collapse_shape %1738 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %1740 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1733, %collapsed_1673 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1739 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1741 = tensor.empty() : tensor<1x4x384x32xf32>
    %1742 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1642 : tensor<1x384x4x32xf32>) outs(%1741 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1674 = tensor.collapse_shape %1740 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1675 = tensor.extract_slice %collapsed_1674[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1676 = tensor.extract_slice %collapsed_1674[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1677 = tensor.extract_slice %collapsed_1674[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1678 = tensor.extract_slice %collapsed_1674[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1679 = tensor.collapse_shape %1742 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1680 = tensor.extract_slice %collapsed_1679[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1681 = tensor.extract_slice %collapsed_1679[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1682 = tensor.extract_slice %collapsed_1679[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1683 = tensor.extract_slice %collapsed_1679[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1684 = tensor.collapse_shape %extracted_slice_1680 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1685 = tensor.collapse_shape %extracted_slice_1681 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1686 = tensor.collapse_shape %extracted_slice_1682 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1687 = tensor.collapse_shape %extracted_slice_1683 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1688 = tensor.collapse_shape %extracted_slice_1675 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1743 = tensor.empty() : tensor<384x32xf32>
    %1744 = linalg.fill ins(%cst_607 : f32) outs(%1743 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1745 = tensor.empty() : tensor<384x32xf32>
    %1746 = linalg.matmul ins(%collapsed_1688, %collapsed_1684 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1744 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1747 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1746 : tensor<32xf32>, tensor<384x32xf32>) outs(%1745 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1689 = tensor.collapse_shape %extracted_slice_1676 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1748 = tensor.empty() : tensor<384x32xf32>
    %1749 = linalg.fill ins(%cst_607 : f32) outs(%1748 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1750 = tensor.empty() : tensor<384x32xf32>
    %1751 = linalg.matmul ins(%collapsed_1689, %collapsed_1685 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1749 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1752 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1751 : tensor<32xf32>, tensor<384x32xf32>) outs(%1750 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1690 = tensor.collapse_shape %extracted_slice_1677 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1753 = tensor.empty() : tensor<384x32xf32>
    %1754 = linalg.fill ins(%cst_607 : f32) outs(%1753 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1755 = tensor.empty() : tensor<384x32xf32>
    %1756 = linalg.matmul ins(%collapsed_1690, %collapsed_1686 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1754 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1757 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1756 : tensor<32xf32>, tensor<384x32xf32>) outs(%1755 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1691 = tensor.collapse_shape %extracted_slice_1678 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1758 = tensor.empty() : tensor<384x32xf32>
    %1759 = linalg.fill ins(%cst_607 : f32) outs(%1758 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1760 = tensor.empty() : tensor<384x32xf32>
    %1761 = linalg.matmul ins(%collapsed_1691, %collapsed_1687 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1759 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1762 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1761 : tensor<32xf32>, tensor<384x32xf32>) outs(%1760 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %1763 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1692 = tensor.insert_slice %1747 into %1763[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1693 = tensor.insert_slice %1752 into %inserted_slice_1692[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1694 = tensor.insert_slice %1757 into %inserted_slice_1693[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1695 = tensor.insert_slice %1762 into %inserted_slice_1694[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1696 = tensor.expand_shape %inserted_slice_1695 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %1764 = tensor.empty() : tensor<1x384x4x32xf32>
    %1765 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1696 : tensor<1x4x384x32xf32>) outs(%1764 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1697 = tensor.collapse_shape %1765 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %1766 = tensor.empty() : tensor<384x128xf32>
    %1767 = linalg.fill ins(%cst_607 : f32) outs(%1766 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1768 = tensor.empty() : tensor<384x128xf32>
    %1769 = linalg.matmul ins(%collapsed_1697, %cst_386 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1767 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1770 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_745, %1769 : tensor<128xf32>, tensor<384x128xf32>) outs(%1768 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1698 = tensor.expand_shape %1770 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1771 = tensor.empty() : tensor<1x384x128xf32>
    %1772 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1698, %expanded_1644 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1771 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1773 = tensor.empty() : tensor<1x384x128xf32>
    %1774 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1772, %cst_146 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1773 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1775 = tensor.empty() : tensor<1x384x128xf32>
    %1776 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1774, %cst_145 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1775 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1699 = tensor.collapse_shape %1772 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1777 = tensor.empty() : tensor<384x512xf32>
    %1778 = linalg.fill ins(%cst_607 : f32) outs(%1777 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1779 = tensor.empty() : tensor<384x512xf32>
    %1780 = linalg.matmul ins(%collapsed_1699, %cst_387 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1778 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1781 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_746, %1780 : tensor<512xf32>, tensor<384x512xf32>) outs(%1779 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1700 = tensor.expand_shape %1781 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1782 = tensor.empty() : tensor<1x384x512xf32>
    %1783 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1700 : tensor<1x384x512xf32>) outs(%1782 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1701 = tensor.collapse_shape %1783 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1784 = tensor.empty() : tensor<384x128xf32>
    %1785 = linalg.fill ins(%cst_607 : f32) outs(%1784 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1786 = tensor.empty() : tensor<384x128xf32>
    %1787 = linalg.matmul ins(%collapsed_1701, %cst_388 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1785 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1788 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_747, %1787 : tensor<128xf32>, tensor<384x128xf32>) outs(%1786 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1702 = tensor.expand_shape %1788 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1789 = tensor.empty() : tensor<1x384x128xf32>
    %1790 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1702, %1776 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1789 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1791 = tensor.empty() : tensor<1x384x128xf32>
    %1792 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1790, %cst_144 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1791 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1793 = tensor.empty() : tensor<1x384x128xf32>
    %1794 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1792, %cst_143 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1793 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1703 = tensor.collapse_shape %1790 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1795 = tensor.empty() : tensor<384x512xf32>
    %1796 = linalg.fill ins(%cst_607 : f32) outs(%1795 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1797 = tensor.empty() : tensor<384x512xf32>
    %1798 = linalg.matmul ins(%collapsed_1703, %cst_389 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1796 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1799 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_748, %1798 : tensor<512xf32>, tensor<384x512xf32>) outs(%1797 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1704 = tensor.expand_shape %1799 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1800 = tensor.empty() : tensor<1x384x512xf32>
    %1801 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1704 : tensor<1x384x512xf32>) outs(%1800 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1705 = tensor.collapse_shape %1801 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1802 = tensor.empty() : tensor<384x128xf32>
    %1803 = linalg.fill ins(%cst_607 : f32) outs(%1802 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1804 = tensor.empty() : tensor<384x128xf32>
    %1805 = linalg.matmul ins(%collapsed_1705, %cst_390 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1803 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1806 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_749, %1805 : tensor<128xf32>, tensor<384x128xf32>) outs(%1804 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1706 = tensor.expand_shape %1806 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1807 = tensor.empty() : tensor<1x384x128xf32>
    %1808 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1706, %1794 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1807 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1809 = tensor.empty() : tensor<1x384x128xf32>
    %1810 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1808, %cst_142 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1809 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1811 = tensor.empty() : tensor<1x384x128xf32>
    %1812 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1810, %cst_141 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1811 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1707 = tensor.collapse_shape %1808 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1813 = tensor.empty() : tensor<384x512xf32>
    %1814 = linalg.fill ins(%cst_607 : f32) outs(%1813 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1815 = tensor.empty() : tensor<384x512xf32>
    %1816 = linalg.matmul ins(%collapsed_1707, %cst_391 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1814 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1817 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_750, %1816 : tensor<512xf32>, tensor<384x512xf32>) outs(%1815 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1708 = tensor.expand_shape %1817 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1818 = tensor.empty() : tensor<1x384x512xf32>
    %1819 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1708 : tensor<1x384x512xf32>) outs(%1818 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1709 = tensor.collapse_shape %1819 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1820 = tensor.empty() : tensor<384x128xf32>
    %1821 = linalg.fill ins(%cst_607 : f32) outs(%1820 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1822 = tensor.empty() : tensor<384x128xf32>
    %1823 = linalg.matmul ins(%collapsed_1709, %cst_392 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1821 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1824 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_751, %1823 : tensor<128xf32>, tensor<384x128xf32>) outs(%1822 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1710 = tensor.expand_shape %1824 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1825 = tensor.empty() : tensor<1x384x128xf32>
    %1826 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1710, %1812 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1825 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1827 = tensor.empty() : tensor<1x384x128xf32>
    %1828 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1826, %cst_140 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1827 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1829 = tensor.empty() : tensor<1x384x128xf32>
    %1830 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1828, %cst_139 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1829 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1711 = tensor.collapse_shape %1826 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1831 = tensor.empty() : tensor<384x512xf32>
    %1832 = linalg.fill ins(%cst_607 : f32) outs(%1831 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1833 = tensor.empty() : tensor<384x512xf32>
    %1834 = linalg.matmul ins(%collapsed_1711, %cst_393 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1832 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1835 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_752, %1834 : tensor<512xf32>, tensor<384x512xf32>) outs(%1833 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1712 = tensor.expand_shape %1835 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1836 = tensor.empty() : tensor<1x384x512xf32>
    %1837 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1712 : tensor<1x384x512xf32>) outs(%1836 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1713 = tensor.collapse_shape %1837 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1838 = tensor.empty() : tensor<384x128xf32>
    %1839 = linalg.fill ins(%cst_607 : f32) outs(%1838 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1840 = tensor.empty() : tensor<384x128xf32>
    %1841 = linalg.matmul ins(%collapsed_1713, %cst_394 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1839 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1842 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_753, %1841 : tensor<128xf32>, tensor<384x128xf32>) outs(%1840 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1714 = tensor.expand_shape %1842 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1843 = tensor.empty() : tensor<1x384x128xf32>
    %1844 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1714, %1830 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1843 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1715 = tensor.collapse_shape %1844 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1845 = tensor.empty() : tensor<384x512xf32>
    %1846 = linalg.fill ins(%cst_607 : f32) outs(%1845 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1847 = tensor.empty() : tensor<384x512xf32>
    %1848 = linalg.matmul ins(%collapsed_1715, %cst_395 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1846 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1849 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_754, %1848 : tensor<512xf32>, tensor<384x512xf32>) outs(%1847 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1716 = tensor.expand_shape %1849 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1850 = tensor.empty() : tensor<1x384x512xf32>
    %1851 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1716, %1672 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1850 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %1852 = tensor.empty() : tensor<1x384x512xf32>
    %1853 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1851, %cst_138 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%1852 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %1854 = tensor.empty() : tensor<1x384x512xf32>
    %1855 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1853, %cst_137 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%1854 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1717 = tensor.collapse_shape %1851 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1856 = tensor.empty() : tensor<384x128xf32>
    %1857 = linalg.fill ins(%cst_607 : f32) outs(%1856 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1858 = tensor.empty() : tensor<384x128xf32>
    %1859 = linalg.matmul ins(%collapsed_1717, %cst_396 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1857 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1860 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_755, %1859 : tensor<128xf32>, tensor<384x128xf32>) outs(%1858 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1718 = tensor.expand_shape %1860 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1719 = tensor.collapse_shape %1851 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1861 = tensor.empty() : tensor<384x128xf32>
    %1862 = linalg.fill ins(%cst_607 : f32) outs(%1861 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1863 = tensor.empty() : tensor<384x128xf32>
    %1864 = linalg.matmul ins(%collapsed_1719, %cst_397 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1862 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1865 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_756, %1864 : tensor<128xf32>, tensor<384x128xf32>) outs(%1863 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1720 = tensor.expand_shape %1865 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1721 = tensor.collapse_shape %1855 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1866 = tensor.empty() : tensor<384x128xf32>
    %1867 = linalg.fill ins(%cst_607 : f32) outs(%1866 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1868 = tensor.empty() : tensor<384x128xf32>
    %1869 = linalg.matmul ins(%collapsed_1721, %cst_398 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1867 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1870 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %1869 : tensor<128xf32>, tensor<384x128xf32>) outs(%1868 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %1871 = tensor.empty() : tensor<384x128xf32>
    %1872 = linalg.fill ins(%cst_607 : f32) outs(%1871 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1873 = tensor.empty() : tensor<384x128xf32>
    %1874 = linalg.matmul ins(%1870, %cst_399 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1872 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1875 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_757, %1874 : tensor<128xf32>, tensor<384x128xf32>) outs(%1873 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1722 = tensor.expand_shape %1875 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1876 = tensor.empty() : tensor<384x128xf32>
    %1877 = linalg.fill ins(%cst_607 : f32) outs(%1876 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1878 = tensor.empty() : tensor<384x128xf32>
    %1879 = linalg.matmul ins(%1870, %cst_400 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1877 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1880 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_758, %1879 : tensor<128xf32>, tensor<384x128xf32>) outs(%1878 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1723 = tensor.expand_shape %1880 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1881 = tensor.empty() : tensor<1x4x384x32xf32>
    %1882 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1722 : tensor<1x384x4x32xf32>) outs(%1881 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %1883 = tensor.empty() : tensor<1x4x32x384xf32>
    %1884 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1723 : tensor<1x384x4x32xf32>) outs(%1883 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1724 = tensor.collapse_shape %1882 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1725 = tensor.extract_slice %collapsed_1724[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1726 = tensor.extract_slice %collapsed_1724[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1727 = tensor.extract_slice %collapsed_1724[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1728 = tensor.extract_slice %collapsed_1724[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1729 = tensor.collapse_shape %1884 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1730 = tensor.extract_slice %collapsed_1729[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1731 = tensor.extract_slice %collapsed_1729[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1732 = tensor.extract_slice %collapsed_1729[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1733 = tensor.extract_slice %collapsed_1729[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1734 = tensor.collapse_shape %extracted_slice_1730 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1735 = tensor.collapse_shape %extracted_slice_1731 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1736 = tensor.collapse_shape %extracted_slice_1732 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1737 = tensor.collapse_shape %extracted_slice_1733 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1738 = tensor.collapse_shape %extracted_slice_1725 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1885 = tensor.empty() : tensor<384x384xf32>
    %1886 = linalg.fill ins(%cst_607 : f32) outs(%1885 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1887 = tensor.empty() : tensor<384x384xf32>
    %1888 = linalg.matmul ins(%collapsed_1738, %collapsed_1734 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1886 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1889 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1888 : tensor<384xf32>, tensor<384x384xf32>) outs(%1887 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1739 = tensor.collapse_shape %extracted_slice_1726 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1890 = tensor.empty() : tensor<384x384xf32>
    %1891 = linalg.fill ins(%cst_607 : f32) outs(%1890 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1892 = tensor.empty() : tensor<384x384xf32>
    %1893 = linalg.matmul ins(%collapsed_1739, %collapsed_1735 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1891 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1894 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1893 : tensor<384xf32>, tensor<384x384xf32>) outs(%1892 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1740 = tensor.collapse_shape %extracted_slice_1727 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1895 = tensor.empty() : tensor<384x384xf32>
    %1896 = linalg.fill ins(%cst_607 : f32) outs(%1895 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1897 = tensor.empty() : tensor<384x384xf32>
    %1898 = linalg.matmul ins(%collapsed_1740, %collapsed_1736 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1896 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1899 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1898 : tensor<384xf32>, tensor<384x384xf32>) outs(%1897 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1741 = tensor.collapse_shape %extracted_slice_1728 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %1900 = tensor.empty() : tensor<384x384xf32>
    %1901 = linalg.fill ins(%cst_607 : f32) outs(%1900 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1902 = tensor.empty() : tensor<384x384xf32>
    %1903 = linalg.matmul ins(%collapsed_1741, %collapsed_1737 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1901 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %1904 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %1903 : tensor<384xf32>, tensor<384x384xf32>) outs(%1902 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %1905 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1742 = tensor.insert_slice %1889 into %1905[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1743 = tensor.insert_slice %1894 into %inserted_slice_1742[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1744 = tensor.insert_slice %1899 into %inserted_slice_1743[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1745 = tensor.insert_slice %1904 into %inserted_slice_1744[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1746 = tensor.expand_shape %inserted_slice_1745 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %1906 = tensor.empty() : tensor<1x4x384x384xf32>
    %1907 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1746 : tensor<1x4x384x384xf32>) outs(%1906 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %1908 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1747 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %1909 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1907, %collapsed_1747 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%1908 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1910 = tensor.empty() : tensor<1x4x384xf32>
    %1911 = linalg.fill ins(%cst_241 : f32) outs(%1910 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1912 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1909 : tensor<1x4x384x384xf32>) outs(%1911 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %1913 = tensor.empty() : tensor<1x4x384x384xf32>
    %1914 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1909, %1912 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1913 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1915 = tensor.empty() : tensor<1x4x384x384xf32>
    %1916 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1914 : tensor<1x4x384x384xf32>) outs(%1915 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1917 = tensor.empty() : tensor<1x4x384xf32>
    %1918 = linalg.fill ins(%cst_607 : f32) outs(%1917 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %1919 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1916 : tensor<1x4x384x384xf32>) outs(%1918 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1748 = tensor.expand_shape %1919 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1920 = tensor.empty() : tensor<1x4x384x1xf32>
    %1921 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1748 : tensor<1x4x384x1xf32>) outs(%1920 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %1922 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1749 = tensor.collapse_shape %1921 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %1923 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1916, %collapsed_1749 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%1922 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %1924 = tensor.empty() : tensor<1x4x384x32xf32>
    %1925 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1718 : tensor<1x384x4x32xf32>) outs(%1924 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1750 = tensor.collapse_shape %1923 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1751 = tensor.extract_slice %collapsed_1750[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1752 = tensor.extract_slice %collapsed_1750[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1753 = tensor.extract_slice %collapsed_1750[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1754 = tensor.extract_slice %collapsed_1750[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1755 = tensor.collapse_shape %1925 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1756 = tensor.extract_slice %collapsed_1755[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1757 = tensor.extract_slice %collapsed_1755[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1758 = tensor.extract_slice %collapsed_1755[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1759 = tensor.extract_slice %collapsed_1755[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1760 = tensor.collapse_shape %extracted_slice_1756 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1761 = tensor.collapse_shape %extracted_slice_1757 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1762 = tensor.collapse_shape %extracted_slice_1758 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1763 = tensor.collapse_shape %extracted_slice_1759 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1764 = tensor.collapse_shape %extracted_slice_1751 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1926 = tensor.empty() : tensor<384x32xf32>
    %1927 = linalg.fill ins(%cst_607 : f32) outs(%1926 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1928 = tensor.empty() : tensor<384x32xf32>
    %1929 = linalg.matmul ins(%collapsed_1764, %collapsed_1760 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1927 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1930 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1929 : tensor<32xf32>, tensor<384x32xf32>) outs(%1928 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1765 = tensor.collapse_shape %extracted_slice_1752 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1931 = tensor.empty() : tensor<384x32xf32>
    %1932 = linalg.fill ins(%cst_607 : f32) outs(%1931 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1933 = tensor.empty() : tensor<384x32xf32>
    %1934 = linalg.matmul ins(%collapsed_1765, %collapsed_1761 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1932 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1935 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1934 : tensor<32xf32>, tensor<384x32xf32>) outs(%1933 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1766 = tensor.collapse_shape %extracted_slice_1753 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1936 = tensor.empty() : tensor<384x32xf32>
    %1937 = linalg.fill ins(%cst_607 : f32) outs(%1936 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1938 = tensor.empty() : tensor<384x32xf32>
    %1939 = linalg.matmul ins(%collapsed_1766, %collapsed_1762 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1937 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1940 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1939 : tensor<32xf32>, tensor<384x32xf32>) outs(%1938 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1767 = tensor.collapse_shape %extracted_slice_1754 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %1941 = tensor.empty() : tensor<384x32xf32>
    %1942 = linalg.fill ins(%cst_607 : f32) outs(%1941 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1943 = tensor.empty() : tensor<384x32xf32>
    %1944 = linalg.matmul ins(%collapsed_1767, %collapsed_1763 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1942 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %1945 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %1944 : tensor<32xf32>, tensor<384x32xf32>) outs(%1943 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %1946 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1768 = tensor.insert_slice %1930 into %1946[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1769 = tensor.insert_slice %1935 into %inserted_slice_1768[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1770 = tensor.insert_slice %1940 into %inserted_slice_1769[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1771 = tensor.insert_slice %1945 into %inserted_slice_1770[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1772 = tensor.expand_shape %inserted_slice_1771 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %1947 = tensor.empty() : tensor<1x384x4x32xf32>
    %1948 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1772 : tensor<1x4x384x32xf32>) outs(%1947 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1773 = tensor.collapse_shape %1948 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %1949 = tensor.empty() : tensor<384x128xf32>
    %1950 = linalg.fill ins(%cst_607 : f32) outs(%1949 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1951 = tensor.empty() : tensor<384x128xf32>
    %1952 = linalg.matmul ins(%collapsed_1773, %cst_401 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1950 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1953 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_759, %1952 : tensor<128xf32>, tensor<384x128xf32>) outs(%1951 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1774 = tensor.expand_shape %1953 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1954 = tensor.empty() : tensor<1x384x128xf32>
    %1955 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1774, %expanded_1720 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1954 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1956 = tensor.empty() : tensor<1x384x128xf32>
    %1957 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1955, %cst_136 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1956 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1958 = tensor.empty() : tensor<1x384x128xf32>
    %1959 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1957, %cst_135 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1958 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1775 = tensor.collapse_shape %1955 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1960 = tensor.empty() : tensor<384x512xf32>
    %1961 = linalg.fill ins(%cst_607 : f32) outs(%1960 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1962 = tensor.empty() : tensor<384x512xf32>
    %1963 = linalg.matmul ins(%collapsed_1775, %cst_402 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1961 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1964 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_760, %1963 : tensor<512xf32>, tensor<384x512xf32>) outs(%1962 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1776 = tensor.expand_shape %1964 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1965 = tensor.empty() : tensor<1x384x512xf32>
    %1966 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1776 : tensor<1x384x512xf32>) outs(%1965 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1777 = tensor.collapse_shape %1966 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1967 = tensor.empty() : tensor<384x128xf32>
    %1968 = linalg.fill ins(%cst_607 : f32) outs(%1967 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1969 = tensor.empty() : tensor<384x128xf32>
    %1970 = linalg.matmul ins(%collapsed_1777, %cst_403 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1968 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1971 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_761, %1970 : tensor<128xf32>, tensor<384x128xf32>) outs(%1969 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1778 = tensor.expand_shape %1971 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1972 = tensor.empty() : tensor<1x384x128xf32>
    %1973 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1778, %1959 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1972 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1974 = tensor.empty() : tensor<1x384x128xf32>
    %1975 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1973, %cst_134 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1974 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1976 = tensor.empty() : tensor<1x384x128xf32>
    %1977 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1975, %cst_133 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1976 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1779 = tensor.collapse_shape %1973 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1978 = tensor.empty() : tensor<384x512xf32>
    %1979 = linalg.fill ins(%cst_607 : f32) outs(%1978 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1980 = tensor.empty() : tensor<384x512xf32>
    %1981 = linalg.matmul ins(%collapsed_1779, %cst_404 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1979 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1982 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_762, %1981 : tensor<512xf32>, tensor<384x512xf32>) outs(%1980 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1780 = tensor.expand_shape %1982 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1983 = tensor.empty() : tensor<1x384x512xf32>
    %1984 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1780 : tensor<1x384x512xf32>) outs(%1983 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1781 = tensor.collapse_shape %1984 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %1985 = tensor.empty() : tensor<384x128xf32>
    %1986 = linalg.fill ins(%cst_607 : f32) outs(%1985 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1987 = tensor.empty() : tensor<384x128xf32>
    %1988 = linalg.matmul ins(%collapsed_1781, %cst_405 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1986 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %1989 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_763, %1988 : tensor<128xf32>, tensor<384x128xf32>) outs(%1987 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1782 = tensor.expand_shape %1989 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1990 = tensor.empty() : tensor<1x384x128xf32>
    %1991 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1782, %1977 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1990 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1992 = tensor.empty() : tensor<1x384x128xf32>
    %1993 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1991, %cst_132 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1992 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %1994 = tensor.empty() : tensor<1x384x128xf32>
    %1995 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1993, %cst_131 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%1994 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1783 = tensor.collapse_shape %1991 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %1996 = tensor.empty() : tensor<384x512xf32>
    %1997 = linalg.fill ins(%cst_607 : f32) outs(%1996 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1998 = tensor.empty() : tensor<384x512xf32>
    %1999 = linalg.matmul ins(%collapsed_1783, %cst_406 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1997 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2000 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_764, %1999 : tensor<512xf32>, tensor<384x512xf32>) outs(%1998 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1784 = tensor.expand_shape %2000 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2001 = tensor.empty() : tensor<1x384x512xf32>
    %2002 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1784 : tensor<1x384x512xf32>) outs(%2001 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1785 = tensor.collapse_shape %2002 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2003 = tensor.empty() : tensor<384x128xf32>
    %2004 = linalg.fill ins(%cst_607 : f32) outs(%2003 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2005 = tensor.empty() : tensor<384x128xf32>
    %2006 = linalg.matmul ins(%collapsed_1785, %cst_407 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2004 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2007 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_765, %2006 : tensor<128xf32>, tensor<384x128xf32>) outs(%2005 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1786 = tensor.expand_shape %2007 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2008 = tensor.empty() : tensor<1x384x128xf32>
    %2009 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1786, %1995 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2008 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2010 = tensor.empty() : tensor<1x384x128xf32>
    %2011 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2009, %cst_130 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2010 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2012 = tensor.empty() : tensor<1x384x128xf32>
    %2013 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2011, %cst_129 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2012 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1787 = tensor.collapse_shape %2009 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2014 = tensor.empty() : tensor<384x512xf32>
    %2015 = linalg.fill ins(%cst_607 : f32) outs(%2014 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2016 = tensor.empty() : tensor<384x512xf32>
    %2017 = linalg.matmul ins(%collapsed_1787, %cst_408 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2015 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2018 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_766, %2017 : tensor<512xf32>, tensor<384x512xf32>) outs(%2016 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1788 = tensor.expand_shape %2018 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2019 = tensor.empty() : tensor<1x384x512xf32>
    %2020 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1788 : tensor<1x384x512xf32>) outs(%2019 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1789 = tensor.collapse_shape %2020 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2021 = tensor.empty() : tensor<384x128xf32>
    %2022 = linalg.fill ins(%cst_607 : f32) outs(%2021 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2023 = tensor.empty() : tensor<384x128xf32>
    %2024 = linalg.matmul ins(%collapsed_1789, %cst_409 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2022 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2025 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_767, %2024 : tensor<128xf32>, tensor<384x128xf32>) outs(%2023 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1790 = tensor.expand_shape %2025 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2026 = tensor.empty() : tensor<1x384x128xf32>
    %2027 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1790, %2013 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2026 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1791 = tensor.collapse_shape %2027 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2028 = tensor.empty() : tensor<384x512xf32>
    %2029 = linalg.fill ins(%cst_607 : f32) outs(%2028 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2030 = tensor.empty() : tensor<384x512xf32>
    %2031 = linalg.matmul ins(%collapsed_1791, %cst_410 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2029 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2032 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_768, %2031 : tensor<512xf32>, tensor<384x512xf32>) outs(%2030 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1792 = tensor.expand_shape %2032 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2033 = tensor.empty() : tensor<1x384x512xf32>
    %2034 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1792, %1855 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2033 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2035 = tensor.empty() : tensor<1x384x512xf32>
    %2036 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2034, %cst_128 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2035 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2037 = tensor.empty() : tensor<1x384x512xf32>
    %2038 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2036, %cst_127 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2037 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1793 = tensor.collapse_shape %2034 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2039 = tensor.empty() : tensor<384x128xf32>
    %2040 = linalg.fill ins(%cst_607 : f32) outs(%2039 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2041 = tensor.empty() : tensor<384x128xf32>
    %2042 = linalg.matmul ins(%collapsed_1793, %cst_411 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2040 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2043 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_769, %2042 : tensor<128xf32>, tensor<384x128xf32>) outs(%2041 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1794 = tensor.expand_shape %2043 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1795 = tensor.collapse_shape %2034 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2044 = tensor.empty() : tensor<384x128xf32>
    %2045 = linalg.fill ins(%cst_607 : f32) outs(%2044 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2046 = tensor.empty() : tensor<384x128xf32>
    %2047 = linalg.matmul ins(%collapsed_1795, %cst_412 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2045 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2048 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_770, %2047 : tensor<128xf32>, tensor<384x128xf32>) outs(%2046 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1796 = tensor.expand_shape %2048 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1797 = tensor.collapse_shape %2038 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2049 = tensor.empty() : tensor<384x128xf32>
    %2050 = linalg.fill ins(%cst_607 : f32) outs(%2049 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2051 = tensor.empty() : tensor<384x128xf32>
    %2052 = linalg.matmul ins(%collapsed_1797, %cst_413 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2050 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2053 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %2052 : tensor<128xf32>, tensor<384x128xf32>) outs(%2051 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %2054 = tensor.empty() : tensor<384x128xf32>
    %2055 = linalg.fill ins(%cst_607 : f32) outs(%2054 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2056 = tensor.empty() : tensor<384x128xf32>
    %2057 = linalg.matmul ins(%2053, %cst_414 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2055 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2058 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_771, %2057 : tensor<128xf32>, tensor<384x128xf32>) outs(%2056 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1798 = tensor.expand_shape %2058 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2059 = tensor.empty() : tensor<384x128xf32>
    %2060 = linalg.fill ins(%cst_607 : f32) outs(%2059 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2061 = tensor.empty() : tensor<384x128xf32>
    %2062 = linalg.matmul ins(%2053, %cst_415 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2060 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2063 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_772, %2062 : tensor<128xf32>, tensor<384x128xf32>) outs(%2061 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1799 = tensor.expand_shape %2063 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2064 = tensor.empty() : tensor<1x4x384x32xf32>
    %2065 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1798 : tensor<1x384x4x32xf32>) outs(%2064 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %2066 = tensor.empty() : tensor<1x4x32x384xf32>
    %2067 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1799 : tensor<1x384x4x32xf32>) outs(%2066 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1800 = tensor.collapse_shape %2065 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1801 = tensor.extract_slice %collapsed_1800[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1802 = tensor.extract_slice %collapsed_1800[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1803 = tensor.extract_slice %collapsed_1800[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1804 = tensor.extract_slice %collapsed_1800[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1805 = tensor.collapse_shape %2067 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1806 = tensor.extract_slice %collapsed_1805[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1807 = tensor.extract_slice %collapsed_1805[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1808 = tensor.extract_slice %collapsed_1805[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1809 = tensor.extract_slice %collapsed_1805[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1810 = tensor.collapse_shape %extracted_slice_1806 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1811 = tensor.collapse_shape %extracted_slice_1807 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1812 = tensor.collapse_shape %extracted_slice_1808 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1813 = tensor.collapse_shape %extracted_slice_1809 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1814 = tensor.collapse_shape %extracted_slice_1801 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2068 = tensor.empty() : tensor<384x384xf32>
    %2069 = linalg.fill ins(%cst_607 : f32) outs(%2068 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2070 = tensor.empty() : tensor<384x384xf32>
    %2071 = linalg.matmul ins(%collapsed_1814, %collapsed_1810 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2069 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2072 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2071 : tensor<384xf32>, tensor<384x384xf32>) outs(%2070 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1815 = tensor.collapse_shape %extracted_slice_1802 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2073 = tensor.empty() : tensor<384x384xf32>
    %2074 = linalg.fill ins(%cst_607 : f32) outs(%2073 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2075 = tensor.empty() : tensor<384x384xf32>
    %2076 = linalg.matmul ins(%collapsed_1815, %collapsed_1811 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2074 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2077 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2076 : tensor<384xf32>, tensor<384x384xf32>) outs(%2075 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1816 = tensor.collapse_shape %extracted_slice_1803 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2078 = tensor.empty() : tensor<384x384xf32>
    %2079 = linalg.fill ins(%cst_607 : f32) outs(%2078 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2080 = tensor.empty() : tensor<384x384xf32>
    %2081 = linalg.matmul ins(%collapsed_1816, %collapsed_1812 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2079 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2082 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2081 : tensor<384xf32>, tensor<384x384xf32>) outs(%2080 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1817 = tensor.collapse_shape %extracted_slice_1804 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2083 = tensor.empty() : tensor<384x384xf32>
    %2084 = linalg.fill ins(%cst_607 : f32) outs(%2083 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2085 = tensor.empty() : tensor<384x384xf32>
    %2086 = linalg.matmul ins(%collapsed_1817, %collapsed_1813 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2084 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2087 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2086 : tensor<384xf32>, tensor<384x384xf32>) outs(%2085 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %2088 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1818 = tensor.insert_slice %2072 into %2088[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1819 = tensor.insert_slice %2077 into %inserted_slice_1818[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1820 = tensor.insert_slice %2082 into %inserted_slice_1819[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1821 = tensor.insert_slice %2087 into %inserted_slice_1820[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1822 = tensor.expand_shape %inserted_slice_1821 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %2089 = tensor.empty() : tensor<1x4x384x384xf32>
    %2090 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1822 : tensor<1x4x384x384xf32>) outs(%2089 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %2091 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1823 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %2092 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2090, %collapsed_1823 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%2091 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2093 = tensor.empty() : tensor<1x4x384xf32>
    %2094 = linalg.fill ins(%cst_241 : f32) outs(%2093 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %2095 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2092 : tensor<1x4x384x384xf32>) outs(%2094 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %2096 = tensor.empty() : tensor<1x4x384x384xf32>
    %2097 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2092, %2095 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%2096 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2098 = tensor.empty() : tensor<1x4x384x384xf32>
    %2099 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2097 : tensor<1x4x384x384xf32>) outs(%2098 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2100 = tensor.empty() : tensor<1x4x384xf32>
    %2101 = linalg.fill ins(%cst_607 : f32) outs(%2100 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %2102 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2099 : tensor<1x4x384x384xf32>) outs(%2101 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1824 = tensor.expand_shape %2102 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2103 = tensor.empty() : tensor<1x4x384x1xf32>
    %2104 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1824 : tensor<1x4x384x1xf32>) outs(%2103 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %2105 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1825 = tensor.collapse_shape %2104 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %2106 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2099, %collapsed_1825 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%2105 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2107 = tensor.empty() : tensor<1x4x384x32xf32>
    %2108 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1794 : tensor<1x384x4x32xf32>) outs(%2107 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1826 = tensor.collapse_shape %2106 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1827 = tensor.extract_slice %collapsed_1826[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1828 = tensor.extract_slice %collapsed_1826[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1829 = tensor.extract_slice %collapsed_1826[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1830 = tensor.extract_slice %collapsed_1826[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1831 = tensor.collapse_shape %2108 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1832 = tensor.extract_slice %collapsed_1831[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1833 = tensor.extract_slice %collapsed_1831[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1834 = tensor.extract_slice %collapsed_1831[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1835 = tensor.extract_slice %collapsed_1831[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1836 = tensor.collapse_shape %extracted_slice_1832 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1837 = tensor.collapse_shape %extracted_slice_1833 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1838 = tensor.collapse_shape %extracted_slice_1834 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1839 = tensor.collapse_shape %extracted_slice_1835 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1840 = tensor.collapse_shape %extracted_slice_1827 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2109 = tensor.empty() : tensor<384x32xf32>
    %2110 = linalg.fill ins(%cst_607 : f32) outs(%2109 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2111 = tensor.empty() : tensor<384x32xf32>
    %2112 = linalg.matmul ins(%collapsed_1840, %collapsed_1836 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2110 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2113 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2112 : tensor<32xf32>, tensor<384x32xf32>) outs(%2111 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1841 = tensor.collapse_shape %extracted_slice_1828 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2114 = tensor.empty() : tensor<384x32xf32>
    %2115 = linalg.fill ins(%cst_607 : f32) outs(%2114 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2116 = tensor.empty() : tensor<384x32xf32>
    %2117 = linalg.matmul ins(%collapsed_1841, %collapsed_1837 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2115 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2118 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2117 : tensor<32xf32>, tensor<384x32xf32>) outs(%2116 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1842 = tensor.collapse_shape %extracted_slice_1829 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2119 = tensor.empty() : tensor<384x32xf32>
    %2120 = linalg.fill ins(%cst_607 : f32) outs(%2119 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2121 = tensor.empty() : tensor<384x32xf32>
    %2122 = linalg.matmul ins(%collapsed_1842, %collapsed_1838 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2120 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2123 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2122 : tensor<32xf32>, tensor<384x32xf32>) outs(%2121 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1843 = tensor.collapse_shape %extracted_slice_1830 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2124 = tensor.empty() : tensor<384x32xf32>
    %2125 = linalg.fill ins(%cst_607 : f32) outs(%2124 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2126 = tensor.empty() : tensor<384x32xf32>
    %2127 = linalg.matmul ins(%collapsed_1843, %collapsed_1839 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2125 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2128 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2127 : tensor<32xf32>, tensor<384x32xf32>) outs(%2126 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %2129 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1844 = tensor.insert_slice %2113 into %2129[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1845 = tensor.insert_slice %2118 into %inserted_slice_1844[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1846 = tensor.insert_slice %2123 into %inserted_slice_1845[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1847 = tensor.insert_slice %2128 into %inserted_slice_1846[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1848 = tensor.expand_shape %inserted_slice_1847 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %2130 = tensor.empty() : tensor<1x384x4x32xf32>
    %2131 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1848 : tensor<1x4x384x32xf32>) outs(%2130 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1849 = tensor.collapse_shape %2131 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %2132 = tensor.empty() : tensor<384x128xf32>
    %2133 = linalg.fill ins(%cst_607 : f32) outs(%2132 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2134 = tensor.empty() : tensor<384x128xf32>
    %2135 = linalg.matmul ins(%collapsed_1849, %cst_416 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2133 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2136 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_773, %2135 : tensor<128xf32>, tensor<384x128xf32>) outs(%2134 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1850 = tensor.expand_shape %2136 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2137 = tensor.empty() : tensor<1x384x128xf32>
    %2138 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1850, %expanded_1796 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2137 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2139 = tensor.empty() : tensor<1x384x128xf32>
    %2140 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2138, %cst_126 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2139 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2141 = tensor.empty() : tensor<1x384x128xf32>
    %2142 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2140, %cst_125 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2141 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1851 = tensor.collapse_shape %2138 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2143 = tensor.empty() : tensor<384x512xf32>
    %2144 = linalg.fill ins(%cst_607 : f32) outs(%2143 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2145 = tensor.empty() : tensor<384x512xf32>
    %2146 = linalg.matmul ins(%collapsed_1851, %cst_417 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2144 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2147 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_774, %2146 : tensor<512xf32>, tensor<384x512xf32>) outs(%2145 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1852 = tensor.expand_shape %2147 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2148 = tensor.empty() : tensor<1x384x512xf32>
    %2149 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1852 : tensor<1x384x512xf32>) outs(%2148 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1853 = tensor.collapse_shape %2149 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2150 = tensor.empty() : tensor<384x128xf32>
    %2151 = linalg.fill ins(%cst_607 : f32) outs(%2150 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2152 = tensor.empty() : tensor<384x128xf32>
    %2153 = linalg.matmul ins(%collapsed_1853, %cst_418 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2151 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2154 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_775, %2153 : tensor<128xf32>, tensor<384x128xf32>) outs(%2152 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1854 = tensor.expand_shape %2154 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2155 = tensor.empty() : tensor<1x384x128xf32>
    %2156 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1854, %2142 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2155 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2157 = tensor.empty() : tensor<1x384x128xf32>
    %2158 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2156, %cst_124 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2157 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2159 = tensor.empty() : tensor<1x384x128xf32>
    %2160 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2158, %cst_123 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2159 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1855 = tensor.collapse_shape %2156 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2161 = tensor.empty() : tensor<384x512xf32>
    %2162 = linalg.fill ins(%cst_607 : f32) outs(%2161 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2163 = tensor.empty() : tensor<384x512xf32>
    %2164 = linalg.matmul ins(%collapsed_1855, %cst_419 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2162 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2165 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_776, %2164 : tensor<512xf32>, tensor<384x512xf32>) outs(%2163 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1856 = tensor.expand_shape %2165 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2166 = tensor.empty() : tensor<1x384x512xf32>
    %2167 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1856 : tensor<1x384x512xf32>) outs(%2166 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1857 = tensor.collapse_shape %2167 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2168 = tensor.empty() : tensor<384x128xf32>
    %2169 = linalg.fill ins(%cst_607 : f32) outs(%2168 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2170 = tensor.empty() : tensor<384x128xf32>
    %2171 = linalg.matmul ins(%collapsed_1857, %cst_420 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2169 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2172 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_777, %2171 : tensor<128xf32>, tensor<384x128xf32>) outs(%2170 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1858 = tensor.expand_shape %2172 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2173 = tensor.empty() : tensor<1x384x128xf32>
    %2174 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1858, %2160 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2173 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2175 = tensor.empty() : tensor<1x384x128xf32>
    %2176 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2174, %cst_122 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2175 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2177 = tensor.empty() : tensor<1x384x128xf32>
    %2178 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2176, %cst_121 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2177 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1859 = tensor.collapse_shape %2174 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2179 = tensor.empty() : tensor<384x512xf32>
    %2180 = linalg.fill ins(%cst_607 : f32) outs(%2179 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2181 = tensor.empty() : tensor<384x512xf32>
    %2182 = linalg.matmul ins(%collapsed_1859, %cst_421 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2180 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2183 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_778, %2182 : tensor<512xf32>, tensor<384x512xf32>) outs(%2181 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1860 = tensor.expand_shape %2183 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2184 = tensor.empty() : tensor<1x384x512xf32>
    %2185 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1860 : tensor<1x384x512xf32>) outs(%2184 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1861 = tensor.collapse_shape %2185 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2186 = tensor.empty() : tensor<384x128xf32>
    %2187 = linalg.fill ins(%cst_607 : f32) outs(%2186 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2188 = tensor.empty() : tensor<384x128xf32>
    %2189 = linalg.matmul ins(%collapsed_1861, %cst_422 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2187 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2190 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_779, %2189 : tensor<128xf32>, tensor<384x128xf32>) outs(%2188 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1862 = tensor.expand_shape %2190 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2191 = tensor.empty() : tensor<1x384x128xf32>
    %2192 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1862, %2178 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2191 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2193 = tensor.empty() : tensor<1x384x128xf32>
    %2194 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2192, %cst_120 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2193 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2195 = tensor.empty() : tensor<1x384x128xf32>
    %2196 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2194, %cst_119 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2195 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1863 = tensor.collapse_shape %2192 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2197 = tensor.empty() : tensor<384x512xf32>
    %2198 = linalg.fill ins(%cst_607 : f32) outs(%2197 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2199 = tensor.empty() : tensor<384x512xf32>
    %2200 = linalg.matmul ins(%collapsed_1863, %cst_423 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2198 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2201 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_780, %2200 : tensor<512xf32>, tensor<384x512xf32>) outs(%2199 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1864 = tensor.expand_shape %2201 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2202 = tensor.empty() : tensor<1x384x512xf32>
    %2203 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1864 : tensor<1x384x512xf32>) outs(%2202 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1865 = tensor.collapse_shape %2203 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2204 = tensor.empty() : tensor<384x128xf32>
    %2205 = linalg.fill ins(%cst_607 : f32) outs(%2204 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2206 = tensor.empty() : tensor<384x128xf32>
    %2207 = linalg.matmul ins(%collapsed_1865, %cst_424 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2205 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2208 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_781, %2207 : tensor<128xf32>, tensor<384x128xf32>) outs(%2206 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1866 = tensor.expand_shape %2208 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2209 = tensor.empty() : tensor<1x384x128xf32>
    %2210 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1866, %2196 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2209 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1867 = tensor.collapse_shape %2210 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2211 = tensor.empty() : tensor<384x512xf32>
    %2212 = linalg.fill ins(%cst_607 : f32) outs(%2211 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2213 = tensor.empty() : tensor<384x512xf32>
    %2214 = linalg.matmul ins(%collapsed_1867, %cst_425 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2212 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2215 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_782, %2214 : tensor<512xf32>, tensor<384x512xf32>) outs(%2213 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1868 = tensor.expand_shape %2215 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2216 = tensor.empty() : tensor<1x384x512xf32>
    %2217 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1868, %2038 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2216 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2218 = tensor.empty() : tensor<1x384x512xf32>
    %2219 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2217, %cst_118 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2218 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2220 = tensor.empty() : tensor<1x384x512xf32>
    %2221 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2219, %cst_117 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2220 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1869 = tensor.collapse_shape %2217 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2222 = tensor.empty() : tensor<384x128xf32>
    %2223 = linalg.fill ins(%cst_607 : f32) outs(%2222 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2224 = tensor.empty() : tensor<384x128xf32>
    %2225 = linalg.matmul ins(%collapsed_1869, %cst_426 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2223 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2226 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_783, %2225 : tensor<128xf32>, tensor<384x128xf32>) outs(%2224 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1870 = tensor.expand_shape %2226 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1871 = tensor.collapse_shape %2217 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2227 = tensor.empty() : tensor<384x128xf32>
    %2228 = linalg.fill ins(%cst_607 : f32) outs(%2227 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2229 = tensor.empty() : tensor<384x128xf32>
    %2230 = linalg.matmul ins(%collapsed_1871, %cst_427 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2228 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2231 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_784, %2230 : tensor<128xf32>, tensor<384x128xf32>) outs(%2229 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1872 = tensor.expand_shape %2231 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1873 = tensor.collapse_shape %2221 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2232 = tensor.empty() : tensor<384x128xf32>
    %2233 = linalg.fill ins(%cst_607 : f32) outs(%2232 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2234 = tensor.empty() : tensor<384x128xf32>
    %2235 = linalg.matmul ins(%collapsed_1873, %cst_428 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2233 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2236 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %2235 : tensor<128xf32>, tensor<384x128xf32>) outs(%2234 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %2237 = tensor.empty() : tensor<384x128xf32>
    %2238 = linalg.fill ins(%cst_607 : f32) outs(%2237 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2239 = tensor.empty() : tensor<384x128xf32>
    %2240 = linalg.matmul ins(%2236, %cst_429 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2238 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2241 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_785, %2240 : tensor<128xf32>, tensor<384x128xf32>) outs(%2239 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1874 = tensor.expand_shape %2241 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2242 = tensor.empty() : tensor<384x128xf32>
    %2243 = linalg.fill ins(%cst_607 : f32) outs(%2242 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2244 = tensor.empty() : tensor<384x128xf32>
    %2245 = linalg.matmul ins(%2236, %cst_430 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2243 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2246 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_786, %2245 : tensor<128xf32>, tensor<384x128xf32>) outs(%2244 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1875 = tensor.expand_shape %2246 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2247 = tensor.empty() : tensor<1x4x384x32xf32>
    %2248 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1874 : tensor<1x384x4x32xf32>) outs(%2247 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %2249 = tensor.empty() : tensor<1x4x32x384xf32>
    %2250 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1875 : tensor<1x384x4x32xf32>) outs(%2249 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1876 = tensor.collapse_shape %2248 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1877 = tensor.extract_slice %collapsed_1876[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1878 = tensor.extract_slice %collapsed_1876[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1879 = tensor.extract_slice %collapsed_1876[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1880 = tensor.extract_slice %collapsed_1876[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1881 = tensor.collapse_shape %2250 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1882 = tensor.extract_slice %collapsed_1881[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1883 = tensor.extract_slice %collapsed_1881[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1884 = tensor.extract_slice %collapsed_1881[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1885 = tensor.extract_slice %collapsed_1881[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1886 = tensor.collapse_shape %extracted_slice_1882 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1887 = tensor.collapse_shape %extracted_slice_1883 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1888 = tensor.collapse_shape %extracted_slice_1884 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1889 = tensor.collapse_shape %extracted_slice_1885 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1890 = tensor.collapse_shape %extracted_slice_1877 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2251 = tensor.empty() : tensor<384x384xf32>
    %2252 = linalg.fill ins(%cst_607 : f32) outs(%2251 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2253 = tensor.empty() : tensor<384x384xf32>
    %2254 = linalg.matmul ins(%collapsed_1890, %collapsed_1886 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2252 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2255 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2254 : tensor<384xf32>, tensor<384x384xf32>) outs(%2253 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1891 = tensor.collapse_shape %extracted_slice_1878 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2256 = tensor.empty() : tensor<384x384xf32>
    %2257 = linalg.fill ins(%cst_607 : f32) outs(%2256 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2258 = tensor.empty() : tensor<384x384xf32>
    %2259 = linalg.matmul ins(%collapsed_1891, %collapsed_1887 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2257 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2260 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2259 : tensor<384xf32>, tensor<384x384xf32>) outs(%2258 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1892 = tensor.collapse_shape %extracted_slice_1879 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2261 = tensor.empty() : tensor<384x384xf32>
    %2262 = linalg.fill ins(%cst_607 : f32) outs(%2261 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2263 = tensor.empty() : tensor<384x384xf32>
    %2264 = linalg.matmul ins(%collapsed_1892, %collapsed_1888 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2262 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2265 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2264 : tensor<384xf32>, tensor<384x384xf32>) outs(%2263 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1893 = tensor.collapse_shape %extracted_slice_1880 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2266 = tensor.empty() : tensor<384x384xf32>
    %2267 = linalg.fill ins(%cst_607 : f32) outs(%2266 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2268 = tensor.empty() : tensor<384x384xf32>
    %2269 = linalg.matmul ins(%collapsed_1893, %collapsed_1889 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2267 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2270 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2269 : tensor<384xf32>, tensor<384x384xf32>) outs(%2268 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %2271 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1894 = tensor.insert_slice %2255 into %2271[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1895 = tensor.insert_slice %2260 into %inserted_slice_1894[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1896 = tensor.insert_slice %2265 into %inserted_slice_1895[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1897 = tensor.insert_slice %2270 into %inserted_slice_1896[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1898 = tensor.expand_shape %inserted_slice_1897 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %2272 = tensor.empty() : tensor<1x4x384x384xf32>
    %2273 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1898 : tensor<1x4x384x384xf32>) outs(%2272 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %2274 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1899 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %2275 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2273, %collapsed_1899 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%2274 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2276 = tensor.empty() : tensor<1x4x384xf32>
    %2277 = linalg.fill ins(%cst_241 : f32) outs(%2276 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %2278 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2275 : tensor<1x4x384x384xf32>) outs(%2277 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %2279 = tensor.empty() : tensor<1x4x384x384xf32>
    %2280 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2275, %2278 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%2279 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2281 = tensor.empty() : tensor<1x4x384x384xf32>
    %2282 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2280 : tensor<1x4x384x384xf32>) outs(%2281 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2283 = tensor.empty() : tensor<1x4x384xf32>
    %2284 = linalg.fill ins(%cst_607 : f32) outs(%2283 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %2285 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2282 : tensor<1x4x384x384xf32>) outs(%2284 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1900 = tensor.expand_shape %2285 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2286 = tensor.empty() : tensor<1x4x384x1xf32>
    %2287 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1900 : tensor<1x4x384x1xf32>) outs(%2286 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %2288 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1901 = tensor.collapse_shape %2287 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %2289 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2282, %collapsed_1901 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%2288 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2290 = tensor.empty() : tensor<1x4x384x32xf32>
    %2291 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1870 : tensor<1x384x4x32xf32>) outs(%2290 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1902 = tensor.collapse_shape %2289 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1903 = tensor.extract_slice %collapsed_1902[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1904 = tensor.extract_slice %collapsed_1902[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1905 = tensor.extract_slice %collapsed_1902[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1906 = tensor.extract_slice %collapsed_1902[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1907 = tensor.collapse_shape %2291 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1908 = tensor.extract_slice %collapsed_1907[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1909 = tensor.extract_slice %collapsed_1907[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1910 = tensor.extract_slice %collapsed_1907[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1911 = tensor.extract_slice %collapsed_1907[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1912 = tensor.collapse_shape %extracted_slice_1908 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1913 = tensor.collapse_shape %extracted_slice_1909 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1914 = tensor.collapse_shape %extracted_slice_1910 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1915 = tensor.collapse_shape %extracted_slice_1911 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1916 = tensor.collapse_shape %extracted_slice_1903 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2292 = tensor.empty() : tensor<384x32xf32>
    %2293 = linalg.fill ins(%cst_607 : f32) outs(%2292 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2294 = tensor.empty() : tensor<384x32xf32>
    %2295 = linalg.matmul ins(%collapsed_1916, %collapsed_1912 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2293 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2296 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2295 : tensor<32xf32>, tensor<384x32xf32>) outs(%2294 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1917 = tensor.collapse_shape %extracted_slice_1904 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2297 = tensor.empty() : tensor<384x32xf32>
    %2298 = linalg.fill ins(%cst_607 : f32) outs(%2297 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2299 = tensor.empty() : tensor<384x32xf32>
    %2300 = linalg.matmul ins(%collapsed_1917, %collapsed_1913 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2298 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2301 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2300 : tensor<32xf32>, tensor<384x32xf32>) outs(%2299 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1918 = tensor.collapse_shape %extracted_slice_1905 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2302 = tensor.empty() : tensor<384x32xf32>
    %2303 = linalg.fill ins(%cst_607 : f32) outs(%2302 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2304 = tensor.empty() : tensor<384x32xf32>
    %2305 = linalg.matmul ins(%collapsed_1918, %collapsed_1914 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2303 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2306 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2305 : tensor<32xf32>, tensor<384x32xf32>) outs(%2304 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1919 = tensor.collapse_shape %extracted_slice_1906 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2307 = tensor.empty() : tensor<384x32xf32>
    %2308 = linalg.fill ins(%cst_607 : f32) outs(%2307 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2309 = tensor.empty() : tensor<384x32xf32>
    %2310 = linalg.matmul ins(%collapsed_1919, %collapsed_1915 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2308 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2311 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2310 : tensor<32xf32>, tensor<384x32xf32>) outs(%2309 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %2312 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1920 = tensor.insert_slice %2296 into %2312[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1921 = tensor.insert_slice %2301 into %inserted_slice_1920[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1922 = tensor.insert_slice %2306 into %inserted_slice_1921[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1923 = tensor.insert_slice %2311 into %inserted_slice_1922[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1924 = tensor.expand_shape %inserted_slice_1923 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %2313 = tensor.empty() : tensor<1x384x4x32xf32>
    %2314 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1924 : tensor<1x4x384x32xf32>) outs(%2313 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_1925 = tensor.collapse_shape %2314 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %2315 = tensor.empty() : tensor<384x128xf32>
    %2316 = linalg.fill ins(%cst_607 : f32) outs(%2315 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2317 = tensor.empty() : tensor<384x128xf32>
    %2318 = linalg.matmul ins(%collapsed_1925, %cst_431 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2316 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2319 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_787, %2318 : tensor<128xf32>, tensor<384x128xf32>) outs(%2317 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1926 = tensor.expand_shape %2319 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2320 = tensor.empty() : tensor<1x384x128xf32>
    %2321 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1926, %expanded_1872 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2320 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2322 = tensor.empty() : tensor<1x384x128xf32>
    %2323 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2321, %cst_116 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2322 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2324 = tensor.empty() : tensor<1x384x128xf32>
    %2325 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2323, %cst_115 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2324 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1927 = tensor.collapse_shape %2321 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2326 = tensor.empty() : tensor<384x512xf32>
    %2327 = linalg.fill ins(%cst_607 : f32) outs(%2326 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2328 = tensor.empty() : tensor<384x512xf32>
    %2329 = linalg.matmul ins(%collapsed_1927, %cst_432 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2327 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2330 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_788, %2329 : tensor<512xf32>, tensor<384x512xf32>) outs(%2328 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1928 = tensor.expand_shape %2330 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2331 = tensor.empty() : tensor<1x384x512xf32>
    %2332 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1928 : tensor<1x384x512xf32>) outs(%2331 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1929 = tensor.collapse_shape %2332 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2333 = tensor.empty() : tensor<384x128xf32>
    %2334 = linalg.fill ins(%cst_607 : f32) outs(%2333 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2335 = tensor.empty() : tensor<384x128xf32>
    %2336 = linalg.matmul ins(%collapsed_1929, %cst_433 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2334 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2337 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_789, %2336 : tensor<128xf32>, tensor<384x128xf32>) outs(%2335 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1930 = tensor.expand_shape %2337 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2338 = tensor.empty() : tensor<1x384x128xf32>
    %2339 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1930, %2325 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2338 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2340 = tensor.empty() : tensor<1x384x128xf32>
    %2341 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2339, %cst_114 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2340 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2342 = tensor.empty() : tensor<1x384x128xf32>
    %2343 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2341, %cst_113 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2342 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1931 = tensor.collapse_shape %2339 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2344 = tensor.empty() : tensor<384x512xf32>
    %2345 = linalg.fill ins(%cst_607 : f32) outs(%2344 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2346 = tensor.empty() : tensor<384x512xf32>
    %2347 = linalg.matmul ins(%collapsed_1931, %cst_434 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2345 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2348 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_790, %2347 : tensor<512xf32>, tensor<384x512xf32>) outs(%2346 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1932 = tensor.expand_shape %2348 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2349 = tensor.empty() : tensor<1x384x512xf32>
    %2350 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1932 : tensor<1x384x512xf32>) outs(%2349 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1933 = tensor.collapse_shape %2350 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2351 = tensor.empty() : tensor<384x128xf32>
    %2352 = linalg.fill ins(%cst_607 : f32) outs(%2351 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2353 = tensor.empty() : tensor<384x128xf32>
    %2354 = linalg.matmul ins(%collapsed_1933, %cst_435 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2352 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2355 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_791, %2354 : tensor<128xf32>, tensor<384x128xf32>) outs(%2353 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1934 = tensor.expand_shape %2355 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2356 = tensor.empty() : tensor<1x384x128xf32>
    %2357 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1934, %2343 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2356 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2358 = tensor.empty() : tensor<1x384x128xf32>
    %2359 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2357, %cst_112 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2358 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2360 = tensor.empty() : tensor<1x384x128xf32>
    %2361 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2359, %cst_111 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2360 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1935 = tensor.collapse_shape %2357 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2362 = tensor.empty() : tensor<384x512xf32>
    %2363 = linalg.fill ins(%cst_607 : f32) outs(%2362 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2364 = tensor.empty() : tensor<384x512xf32>
    %2365 = linalg.matmul ins(%collapsed_1935, %cst_436 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2363 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2366 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_792, %2365 : tensor<512xf32>, tensor<384x512xf32>) outs(%2364 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1936 = tensor.expand_shape %2366 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2367 = tensor.empty() : tensor<1x384x512xf32>
    %2368 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1936 : tensor<1x384x512xf32>) outs(%2367 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1937 = tensor.collapse_shape %2368 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2369 = tensor.empty() : tensor<384x128xf32>
    %2370 = linalg.fill ins(%cst_607 : f32) outs(%2369 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2371 = tensor.empty() : tensor<384x128xf32>
    %2372 = linalg.matmul ins(%collapsed_1937, %cst_437 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2370 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2373 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_793, %2372 : tensor<128xf32>, tensor<384x128xf32>) outs(%2371 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1938 = tensor.expand_shape %2373 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2374 = tensor.empty() : tensor<1x384x128xf32>
    %2375 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1938, %2361 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2374 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2376 = tensor.empty() : tensor<1x384x128xf32>
    %2377 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2375, %cst_110 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2376 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2378 = tensor.empty() : tensor<1x384x128xf32>
    %2379 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2377, %cst_109 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2378 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1939 = tensor.collapse_shape %2375 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2380 = tensor.empty() : tensor<384x512xf32>
    %2381 = linalg.fill ins(%cst_607 : f32) outs(%2380 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2382 = tensor.empty() : tensor<384x512xf32>
    %2383 = linalg.matmul ins(%collapsed_1939, %cst_438 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2381 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2384 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_794, %2383 : tensor<512xf32>, tensor<384x512xf32>) outs(%2382 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1940 = tensor.expand_shape %2384 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2385 = tensor.empty() : tensor<1x384x512xf32>
    %2386 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1940 : tensor<1x384x512xf32>) outs(%2385 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1941 = tensor.collapse_shape %2386 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2387 = tensor.empty() : tensor<384x128xf32>
    %2388 = linalg.fill ins(%cst_607 : f32) outs(%2387 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2389 = tensor.empty() : tensor<384x128xf32>
    %2390 = linalg.matmul ins(%collapsed_1941, %cst_439 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2388 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2391 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_795, %2390 : tensor<128xf32>, tensor<384x128xf32>) outs(%2389 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1942 = tensor.expand_shape %2391 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2392 = tensor.empty() : tensor<1x384x128xf32>
    %2393 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1942, %2379 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2392 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1943 = tensor.collapse_shape %2393 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2394 = tensor.empty() : tensor<384x512xf32>
    %2395 = linalg.fill ins(%cst_607 : f32) outs(%2394 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2396 = tensor.empty() : tensor<384x512xf32>
    %2397 = linalg.matmul ins(%collapsed_1943, %cst_440 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2395 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2398 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_796, %2397 : tensor<512xf32>, tensor<384x512xf32>) outs(%2396 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_1944 = tensor.expand_shape %2398 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2399 = tensor.empty() : tensor<1x384x512xf32>
    %2400 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1944, %2221 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2399 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2401 = tensor.empty() : tensor<1x384x512xf32>
    %2402 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2400, %cst_108 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2401 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2403 = tensor.empty() : tensor<1x384x512xf32>
    %2404 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2402, %cst_107 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2403 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1945 = tensor.collapse_shape %2400 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2405 = tensor.empty() : tensor<384x128xf32>
    %2406 = linalg.fill ins(%cst_607 : f32) outs(%2405 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2407 = tensor.empty() : tensor<384x128xf32>
    %2408 = linalg.matmul ins(%collapsed_1945, %cst_441 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2406 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2409 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_797, %2408 : tensor<128xf32>, tensor<384x128xf32>) outs(%2407 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1946 = tensor.expand_shape %2409 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_1947 = tensor.collapse_shape %2400 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2410 = tensor.empty() : tensor<384x128xf32>
    %2411 = linalg.fill ins(%cst_607 : f32) outs(%2410 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2412 = tensor.empty() : tensor<384x128xf32>
    %2413 = linalg.matmul ins(%collapsed_1947, %cst_442 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2411 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2414 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_798, %2413 : tensor<128xf32>, tensor<384x128xf32>) outs(%2412 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1948 = tensor.expand_shape %2414 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_1949 = tensor.collapse_shape %2404 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2415 = tensor.empty() : tensor<384x128xf32>
    %2416 = linalg.fill ins(%cst_607 : f32) outs(%2415 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2417 = tensor.empty() : tensor<384x128xf32>
    %2418 = linalg.matmul ins(%collapsed_1949, %cst_443 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2416 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2419 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %2418 : tensor<128xf32>, tensor<384x128xf32>) outs(%2417 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %2420 = tensor.empty() : tensor<384x128xf32>
    %2421 = linalg.fill ins(%cst_607 : f32) outs(%2420 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2422 = tensor.empty() : tensor<384x128xf32>
    %2423 = linalg.matmul ins(%2419, %cst_444 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2421 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2424 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_799, %2423 : tensor<128xf32>, tensor<384x128xf32>) outs(%2422 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1950 = tensor.expand_shape %2424 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2425 = tensor.empty() : tensor<384x128xf32>
    %2426 = linalg.fill ins(%cst_607 : f32) outs(%2425 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2427 = tensor.empty() : tensor<384x128xf32>
    %2428 = linalg.matmul ins(%2419, %cst_445 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2426 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2429 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_800, %2428 : tensor<128xf32>, tensor<384x128xf32>) outs(%2427 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_1951 = tensor.expand_shape %2429 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2430 = tensor.empty() : tensor<1x4x384x32xf32>
    %2431 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1950 : tensor<1x384x4x32xf32>) outs(%2430 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %2432 = tensor.empty() : tensor<1x4x32x384xf32>
    %2433 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1951 : tensor<1x384x4x32xf32>) outs(%2432 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_1952 = tensor.collapse_shape %2431 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1953 = tensor.extract_slice %collapsed_1952[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1954 = tensor.extract_slice %collapsed_1952[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1955 = tensor.extract_slice %collapsed_1952[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1956 = tensor.extract_slice %collapsed_1952[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1957 = tensor.collapse_shape %2433 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1958 = tensor.extract_slice %collapsed_1957[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1959 = tensor.extract_slice %collapsed_1957[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1960 = tensor.extract_slice %collapsed_1957[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_1961 = tensor.extract_slice %collapsed_1957[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_1962 = tensor.collapse_shape %extracted_slice_1958 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1963 = tensor.collapse_shape %extracted_slice_1959 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1964 = tensor.collapse_shape %extracted_slice_1960 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1965 = tensor.collapse_shape %extracted_slice_1961 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_1966 = tensor.collapse_shape %extracted_slice_1953 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2434 = tensor.empty() : tensor<384x384xf32>
    %2435 = linalg.fill ins(%cst_607 : f32) outs(%2434 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2436 = tensor.empty() : tensor<384x384xf32>
    %2437 = linalg.matmul ins(%collapsed_1966, %collapsed_1962 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2435 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2438 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2437 : tensor<384xf32>, tensor<384x384xf32>) outs(%2436 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1967 = tensor.collapse_shape %extracted_slice_1954 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2439 = tensor.empty() : tensor<384x384xf32>
    %2440 = linalg.fill ins(%cst_607 : f32) outs(%2439 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2441 = tensor.empty() : tensor<384x384xf32>
    %2442 = linalg.matmul ins(%collapsed_1967, %collapsed_1963 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2440 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2443 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2442 : tensor<384xf32>, tensor<384x384xf32>) outs(%2441 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1968 = tensor.collapse_shape %extracted_slice_1955 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2444 = tensor.empty() : tensor<384x384xf32>
    %2445 = linalg.fill ins(%cst_607 : f32) outs(%2444 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2446 = tensor.empty() : tensor<384x384xf32>
    %2447 = linalg.matmul ins(%collapsed_1968, %collapsed_1964 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2445 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2448 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2447 : tensor<384xf32>, tensor<384x384xf32>) outs(%2446 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_1969 = tensor.collapse_shape %extracted_slice_1956 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2449 = tensor.empty() : tensor<384x384xf32>
    %2450 = linalg.fill ins(%cst_607 : f32) outs(%2449 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2451 = tensor.empty() : tensor<384x384xf32>
    %2452 = linalg.matmul ins(%collapsed_1969, %collapsed_1965 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2450 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2453 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2452 : tensor<384xf32>, tensor<384x384xf32>) outs(%2451 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %2454 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1970 = tensor.insert_slice %2438 into %2454[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1971 = tensor.insert_slice %2443 into %inserted_slice_1970[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1972 = tensor.insert_slice %2448 into %inserted_slice_1971[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1973 = tensor.insert_slice %2453 into %inserted_slice_1972[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1974 = tensor.expand_shape %inserted_slice_1973 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %2455 = tensor.empty() : tensor<1x4x384x384xf32>
    %2456 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1974 : tensor<1x4x384x384xf32>) outs(%2455 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %2457 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1975 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %2458 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2456, %collapsed_1975 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%2457 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2459 = tensor.empty() : tensor<1x4x384xf32>
    %2460 = linalg.fill ins(%cst_241 : f32) outs(%2459 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %2461 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2458 : tensor<1x4x384x384xf32>) outs(%2460 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %2462 = tensor.empty() : tensor<1x4x384x384xf32>
    %2463 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2458, %2461 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%2462 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2464 = tensor.empty() : tensor<1x4x384x384xf32>
    %2465 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2463 : tensor<1x4x384x384xf32>) outs(%2464 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2466 = tensor.empty() : tensor<1x4x384xf32>
    %2467 = linalg.fill ins(%cst_607 : f32) outs(%2466 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %2468 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2465 : tensor<1x4x384x384xf32>) outs(%2467 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_1976 = tensor.expand_shape %2468 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2469 = tensor.empty() : tensor<1x4x384x1xf32>
    %2470 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1976 : tensor<1x4x384x1xf32>) outs(%2469 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %2471 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_1977 = tensor.collapse_shape %2470 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %2472 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2465, %collapsed_1977 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%2471 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2473 = tensor.empty() : tensor<1x4x384x32xf32>
    %2474 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1946 : tensor<1x384x4x32xf32>) outs(%2473 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_1978 = tensor.collapse_shape %2472 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1979 = tensor.extract_slice %collapsed_1978[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1980 = tensor.extract_slice %collapsed_1978[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1981 = tensor.extract_slice %collapsed_1978[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1982 = tensor.extract_slice %collapsed_1978[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1983 = tensor.collapse_shape %2474 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1984 = tensor.extract_slice %collapsed_1983[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1985 = tensor.extract_slice %collapsed_1983[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1986 = tensor.extract_slice %collapsed_1983[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1987 = tensor.extract_slice %collapsed_1983[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1988 = tensor.collapse_shape %extracted_slice_1984 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1989 = tensor.collapse_shape %extracted_slice_1985 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1990 = tensor.collapse_shape %extracted_slice_1986 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1991 = tensor.collapse_shape %extracted_slice_1987 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_1992 = tensor.collapse_shape %extracted_slice_1979 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2475 = tensor.empty() : tensor<384x32xf32>
    %2476 = linalg.fill ins(%cst_607 : f32) outs(%2475 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2477 = tensor.empty() : tensor<384x32xf32>
    %2478 = linalg.matmul ins(%collapsed_1992, %collapsed_1988 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2476 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2479 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2478 : tensor<32xf32>, tensor<384x32xf32>) outs(%2477 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1993 = tensor.collapse_shape %extracted_slice_1980 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2480 = tensor.empty() : tensor<384x32xf32>
    %2481 = linalg.fill ins(%cst_607 : f32) outs(%2480 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2482 = tensor.empty() : tensor<384x32xf32>
    %2483 = linalg.matmul ins(%collapsed_1993, %collapsed_1989 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2481 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2484 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2483 : tensor<32xf32>, tensor<384x32xf32>) outs(%2482 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1994 = tensor.collapse_shape %extracted_slice_1981 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2485 = tensor.empty() : tensor<384x32xf32>
    %2486 = linalg.fill ins(%cst_607 : f32) outs(%2485 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2487 = tensor.empty() : tensor<384x32xf32>
    %2488 = linalg.matmul ins(%collapsed_1994, %collapsed_1990 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2486 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2489 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2488 : tensor<32xf32>, tensor<384x32xf32>) outs(%2487 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_1995 = tensor.collapse_shape %extracted_slice_1982 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2490 = tensor.empty() : tensor<384x32xf32>
    %2491 = linalg.fill ins(%cst_607 : f32) outs(%2490 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2492 = tensor.empty() : tensor<384x32xf32>
    %2493 = linalg.matmul ins(%collapsed_1995, %collapsed_1991 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2491 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2494 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2493 : tensor<32xf32>, tensor<384x32xf32>) outs(%2492 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %2495 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1996 = tensor.insert_slice %2479 into %2495[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1997 = tensor.insert_slice %2484 into %inserted_slice_1996[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1998 = tensor.insert_slice %2489 into %inserted_slice_1997[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1999 = tensor.insert_slice %2494 into %inserted_slice_1998[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2000 = tensor.expand_shape %inserted_slice_1999 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %2496 = tensor.empty() : tensor<1x384x4x32xf32>
    %2497 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2000 : tensor<1x4x384x32xf32>) outs(%2496 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2001 = tensor.collapse_shape %2497 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %2498 = tensor.empty() : tensor<384x128xf32>
    %2499 = linalg.fill ins(%cst_607 : f32) outs(%2498 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2500 = tensor.empty() : tensor<384x128xf32>
    %2501 = linalg.matmul ins(%collapsed_2001, %cst_446 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2499 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2502 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_801, %2501 : tensor<128xf32>, tensor<384x128xf32>) outs(%2500 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2002 = tensor.expand_shape %2502 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2503 = tensor.empty() : tensor<1x384x128xf32>
    %2504 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2002, %expanded_1948 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2503 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2505 = tensor.empty() : tensor<1x384x128xf32>
    %2506 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2504, %cst_106 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2505 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2507 = tensor.empty() : tensor<1x384x128xf32>
    %2508 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2506, %cst_105 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2507 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2003 = tensor.collapse_shape %2504 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2509 = tensor.empty() : tensor<384x512xf32>
    %2510 = linalg.fill ins(%cst_607 : f32) outs(%2509 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2511 = tensor.empty() : tensor<384x512xf32>
    %2512 = linalg.matmul ins(%collapsed_2003, %cst_447 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2510 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2513 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_802, %2512 : tensor<512xf32>, tensor<384x512xf32>) outs(%2511 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2004 = tensor.expand_shape %2513 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2514 = tensor.empty() : tensor<1x384x512xf32>
    %2515 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2004 : tensor<1x384x512xf32>) outs(%2514 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2005 = tensor.collapse_shape %2515 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2516 = tensor.empty() : tensor<384x128xf32>
    %2517 = linalg.fill ins(%cst_607 : f32) outs(%2516 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2518 = tensor.empty() : tensor<384x128xf32>
    %2519 = linalg.matmul ins(%collapsed_2005, %cst_448 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2517 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2520 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_803, %2519 : tensor<128xf32>, tensor<384x128xf32>) outs(%2518 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2006 = tensor.expand_shape %2520 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2521 = tensor.empty() : tensor<1x384x128xf32>
    %2522 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2006, %2508 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2521 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2523 = tensor.empty() : tensor<1x384x128xf32>
    %2524 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2522, %cst_104 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2523 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2525 = tensor.empty() : tensor<1x384x128xf32>
    %2526 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2524, %cst_103 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2525 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2007 = tensor.collapse_shape %2522 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2527 = tensor.empty() : tensor<384x512xf32>
    %2528 = linalg.fill ins(%cst_607 : f32) outs(%2527 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2529 = tensor.empty() : tensor<384x512xf32>
    %2530 = linalg.matmul ins(%collapsed_2007, %cst_449 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2528 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2531 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_804, %2530 : tensor<512xf32>, tensor<384x512xf32>) outs(%2529 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2008 = tensor.expand_shape %2531 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2532 = tensor.empty() : tensor<1x384x512xf32>
    %2533 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2008 : tensor<1x384x512xf32>) outs(%2532 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2009 = tensor.collapse_shape %2533 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2534 = tensor.empty() : tensor<384x128xf32>
    %2535 = linalg.fill ins(%cst_607 : f32) outs(%2534 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2536 = tensor.empty() : tensor<384x128xf32>
    %2537 = linalg.matmul ins(%collapsed_2009, %cst_450 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2535 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2538 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_805, %2537 : tensor<128xf32>, tensor<384x128xf32>) outs(%2536 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2010 = tensor.expand_shape %2538 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2539 = tensor.empty() : tensor<1x384x128xf32>
    %2540 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2010, %2526 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2539 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2541 = tensor.empty() : tensor<1x384x128xf32>
    %2542 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2540, %cst_102 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2541 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2543 = tensor.empty() : tensor<1x384x128xf32>
    %2544 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2542, %cst_101 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2543 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2011 = tensor.collapse_shape %2540 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2545 = tensor.empty() : tensor<384x512xf32>
    %2546 = linalg.fill ins(%cst_607 : f32) outs(%2545 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2547 = tensor.empty() : tensor<384x512xf32>
    %2548 = linalg.matmul ins(%collapsed_2011, %cst_451 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2546 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2549 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_806, %2548 : tensor<512xf32>, tensor<384x512xf32>) outs(%2547 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2012 = tensor.expand_shape %2549 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2550 = tensor.empty() : tensor<1x384x512xf32>
    %2551 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2012 : tensor<1x384x512xf32>) outs(%2550 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2013 = tensor.collapse_shape %2551 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2552 = tensor.empty() : tensor<384x128xf32>
    %2553 = linalg.fill ins(%cst_607 : f32) outs(%2552 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2554 = tensor.empty() : tensor<384x128xf32>
    %2555 = linalg.matmul ins(%collapsed_2013, %cst_452 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2553 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2556 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_807, %2555 : tensor<128xf32>, tensor<384x128xf32>) outs(%2554 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2014 = tensor.expand_shape %2556 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2557 = tensor.empty() : tensor<1x384x128xf32>
    %2558 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2014, %2544 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2557 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2559 = tensor.empty() : tensor<1x384x128xf32>
    %2560 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2558, %cst_100 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2559 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2561 = tensor.empty() : tensor<1x384x128xf32>
    %2562 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2560, %cst_99 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2561 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2015 = tensor.collapse_shape %2558 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2563 = tensor.empty() : tensor<384x512xf32>
    %2564 = linalg.fill ins(%cst_607 : f32) outs(%2563 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2565 = tensor.empty() : tensor<384x512xf32>
    %2566 = linalg.matmul ins(%collapsed_2015, %cst_453 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2564 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2567 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_808, %2566 : tensor<512xf32>, tensor<384x512xf32>) outs(%2565 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2016 = tensor.expand_shape %2567 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2568 = tensor.empty() : tensor<1x384x512xf32>
    %2569 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2016 : tensor<1x384x512xf32>) outs(%2568 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2017 = tensor.collapse_shape %2569 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2570 = tensor.empty() : tensor<384x128xf32>
    %2571 = linalg.fill ins(%cst_607 : f32) outs(%2570 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2572 = tensor.empty() : tensor<384x128xf32>
    %2573 = linalg.matmul ins(%collapsed_2017, %cst_454 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2571 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2574 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_809, %2573 : tensor<128xf32>, tensor<384x128xf32>) outs(%2572 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2018 = tensor.expand_shape %2574 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2575 = tensor.empty() : tensor<1x384x128xf32>
    %2576 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2018, %2562 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2575 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2019 = tensor.collapse_shape %2576 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2577 = tensor.empty() : tensor<384x512xf32>
    %2578 = linalg.fill ins(%cst_607 : f32) outs(%2577 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2579 = tensor.empty() : tensor<384x512xf32>
    %2580 = linalg.matmul ins(%collapsed_2019, %cst_455 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2578 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2581 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_810, %2580 : tensor<512xf32>, tensor<384x512xf32>) outs(%2579 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2020 = tensor.expand_shape %2581 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2582 = tensor.empty() : tensor<1x384x512xf32>
    %2583 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2020, %2404 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2582 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2584 = tensor.empty() : tensor<1x384x512xf32>
    %2585 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2583, %cst_98 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2584 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2586 = tensor.empty() : tensor<1x384x512xf32>
    %2587 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2585, %cst_97 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2586 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2021 = tensor.collapse_shape %2583 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2588 = tensor.empty() : tensor<384x128xf32>
    %2589 = linalg.fill ins(%cst_607 : f32) outs(%2588 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2590 = tensor.empty() : tensor<384x128xf32>
    %2591 = linalg.matmul ins(%collapsed_2021, %cst_456 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2589 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2592 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_811, %2591 : tensor<128xf32>, tensor<384x128xf32>) outs(%2590 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2022 = tensor.expand_shape %2592 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_2023 = tensor.collapse_shape %2583 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2593 = tensor.empty() : tensor<384x128xf32>
    %2594 = linalg.fill ins(%cst_607 : f32) outs(%2593 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2595 = tensor.empty() : tensor<384x128xf32>
    %2596 = linalg.matmul ins(%collapsed_2023, %cst_457 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2594 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2597 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_812, %2596 : tensor<128xf32>, tensor<384x128xf32>) outs(%2595 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2024 = tensor.expand_shape %2597 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_2025 = tensor.collapse_shape %2587 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2598 = tensor.empty() : tensor<384x128xf32>
    %2599 = linalg.fill ins(%cst_607 : f32) outs(%2598 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2600 = tensor.empty() : tensor<384x128xf32>
    %2601 = linalg.matmul ins(%collapsed_2025, %cst_458 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2599 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2602 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %2601 : tensor<128xf32>, tensor<384x128xf32>) outs(%2600 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %2603 = tensor.empty() : tensor<384x128xf32>
    %2604 = linalg.fill ins(%cst_607 : f32) outs(%2603 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2605 = tensor.empty() : tensor<384x128xf32>
    %2606 = linalg.matmul ins(%2602, %cst_459 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2604 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2607 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_813, %2606 : tensor<128xf32>, tensor<384x128xf32>) outs(%2605 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2026 = tensor.expand_shape %2607 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2608 = tensor.empty() : tensor<384x128xf32>
    %2609 = linalg.fill ins(%cst_607 : f32) outs(%2608 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2610 = tensor.empty() : tensor<384x128xf32>
    %2611 = linalg.matmul ins(%2602, %cst_460 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2609 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2612 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_814, %2611 : tensor<128xf32>, tensor<384x128xf32>) outs(%2610 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2027 = tensor.expand_shape %2612 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2613 = tensor.empty() : tensor<1x4x384x32xf32>
    %2614 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2026 : tensor<1x384x4x32xf32>) outs(%2613 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %2615 = tensor.empty() : tensor<1x4x32x384xf32>
    %2616 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2027 : tensor<1x384x4x32xf32>) outs(%2615 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_2028 = tensor.collapse_shape %2614 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2029 = tensor.extract_slice %collapsed_2028[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2030 = tensor.extract_slice %collapsed_2028[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2031 = tensor.extract_slice %collapsed_2028[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2032 = tensor.extract_slice %collapsed_2028[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2033 = tensor.collapse_shape %2616 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2034 = tensor.extract_slice %collapsed_2033[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2035 = tensor.extract_slice %collapsed_2033[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2036 = tensor.extract_slice %collapsed_2033[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2037 = tensor.extract_slice %collapsed_2033[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_2038 = tensor.collapse_shape %extracted_slice_2034 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2039 = tensor.collapse_shape %extracted_slice_2035 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2040 = tensor.collapse_shape %extracted_slice_2036 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2041 = tensor.collapse_shape %extracted_slice_2037 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2042 = tensor.collapse_shape %extracted_slice_2029 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2617 = tensor.empty() : tensor<384x384xf32>
    %2618 = linalg.fill ins(%cst_607 : f32) outs(%2617 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2619 = tensor.empty() : tensor<384x384xf32>
    %2620 = linalg.matmul ins(%collapsed_2042, %collapsed_2038 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2618 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2621 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2620 : tensor<384xf32>, tensor<384x384xf32>) outs(%2619 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2043 = tensor.collapse_shape %extracted_slice_2030 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2622 = tensor.empty() : tensor<384x384xf32>
    %2623 = linalg.fill ins(%cst_607 : f32) outs(%2622 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2624 = tensor.empty() : tensor<384x384xf32>
    %2625 = linalg.matmul ins(%collapsed_2043, %collapsed_2039 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2623 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2626 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2625 : tensor<384xf32>, tensor<384x384xf32>) outs(%2624 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2044 = tensor.collapse_shape %extracted_slice_2031 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2627 = tensor.empty() : tensor<384x384xf32>
    %2628 = linalg.fill ins(%cst_607 : f32) outs(%2627 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2629 = tensor.empty() : tensor<384x384xf32>
    %2630 = linalg.matmul ins(%collapsed_2044, %collapsed_2040 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2628 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2631 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2630 : tensor<384xf32>, tensor<384x384xf32>) outs(%2629 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2045 = tensor.collapse_shape %extracted_slice_2032 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2632 = tensor.empty() : tensor<384x384xf32>
    %2633 = linalg.fill ins(%cst_607 : f32) outs(%2632 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2634 = tensor.empty() : tensor<384x384xf32>
    %2635 = linalg.matmul ins(%collapsed_2045, %collapsed_2041 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2633 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2636 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2635 : tensor<384xf32>, tensor<384x384xf32>) outs(%2634 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %2637 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2046 = tensor.insert_slice %2621 into %2637[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2047 = tensor.insert_slice %2626 into %inserted_slice_2046[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2048 = tensor.insert_slice %2631 into %inserted_slice_2047[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2049 = tensor.insert_slice %2636 into %inserted_slice_2048[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2050 = tensor.expand_shape %inserted_slice_2049 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %2638 = tensor.empty() : tensor<1x4x384x384xf32>
    %2639 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2050 : tensor<1x4x384x384xf32>) outs(%2638 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %2640 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2051 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %2641 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2639, %collapsed_2051 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%2640 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2642 = tensor.empty() : tensor<1x4x384xf32>
    %2643 = linalg.fill ins(%cst_241 : f32) outs(%2642 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %2644 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2641 : tensor<1x4x384x384xf32>) outs(%2643 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %2645 = tensor.empty() : tensor<1x4x384x384xf32>
    %2646 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2641, %2644 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%2645 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2647 = tensor.empty() : tensor<1x4x384x384xf32>
    %2648 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2646 : tensor<1x4x384x384xf32>) outs(%2647 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2649 = tensor.empty() : tensor<1x4x384xf32>
    %2650 = linalg.fill ins(%cst_607 : f32) outs(%2649 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %2651 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2648 : tensor<1x4x384x384xf32>) outs(%2650 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_2052 = tensor.expand_shape %2651 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2652 = tensor.empty() : tensor<1x4x384x1xf32>
    %2653 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2052 : tensor<1x4x384x1xf32>) outs(%2652 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %2654 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2053 = tensor.collapse_shape %2653 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %2655 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2648, %collapsed_2053 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%2654 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2656 = tensor.empty() : tensor<1x4x384x32xf32>
    %2657 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2022 : tensor<1x384x4x32xf32>) outs(%2656 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_2054 = tensor.collapse_shape %2655 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2055 = tensor.extract_slice %collapsed_2054[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2056 = tensor.extract_slice %collapsed_2054[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2057 = tensor.extract_slice %collapsed_2054[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2058 = tensor.extract_slice %collapsed_2054[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2059 = tensor.collapse_shape %2657 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2060 = tensor.extract_slice %collapsed_2059[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2061 = tensor.extract_slice %collapsed_2059[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2062 = tensor.extract_slice %collapsed_2059[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2063 = tensor.extract_slice %collapsed_2059[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2064 = tensor.collapse_shape %extracted_slice_2060 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2065 = tensor.collapse_shape %extracted_slice_2061 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2066 = tensor.collapse_shape %extracted_slice_2062 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2067 = tensor.collapse_shape %extracted_slice_2063 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2068 = tensor.collapse_shape %extracted_slice_2055 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2658 = tensor.empty() : tensor<384x32xf32>
    %2659 = linalg.fill ins(%cst_607 : f32) outs(%2658 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2660 = tensor.empty() : tensor<384x32xf32>
    %2661 = linalg.matmul ins(%collapsed_2068, %collapsed_2064 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2659 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2662 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2661 : tensor<32xf32>, tensor<384x32xf32>) outs(%2660 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2069 = tensor.collapse_shape %extracted_slice_2056 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2663 = tensor.empty() : tensor<384x32xf32>
    %2664 = linalg.fill ins(%cst_607 : f32) outs(%2663 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2665 = tensor.empty() : tensor<384x32xf32>
    %2666 = linalg.matmul ins(%collapsed_2069, %collapsed_2065 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2664 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2667 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2666 : tensor<32xf32>, tensor<384x32xf32>) outs(%2665 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2070 = tensor.collapse_shape %extracted_slice_2057 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2668 = tensor.empty() : tensor<384x32xf32>
    %2669 = linalg.fill ins(%cst_607 : f32) outs(%2668 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2670 = tensor.empty() : tensor<384x32xf32>
    %2671 = linalg.matmul ins(%collapsed_2070, %collapsed_2066 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2669 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2672 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2671 : tensor<32xf32>, tensor<384x32xf32>) outs(%2670 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2071 = tensor.collapse_shape %extracted_slice_2058 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2673 = tensor.empty() : tensor<384x32xf32>
    %2674 = linalg.fill ins(%cst_607 : f32) outs(%2673 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2675 = tensor.empty() : tensor<384x32xf32>
    %2676 = linalg.matmul ins(%collapsed_2071, %collapsed_2067 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2674 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2677 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2676 : tensor<32xf32>, tensor<384x32xf32>) outs(%2675 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %2678 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2072 = tensor.insert_slice %2662 into %2678[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2073 = tensor.insert_slice %2667 into %inserted_slice_2072[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2074 = tensor.insert_slice %2672 into %inserted_slice_2073[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2075 = tensor.insert_slice %2677 into %inserted_slice_2074[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2076 = tensor.expand_shape %inserted_slice_2075 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %2679 = tensor.empty() : tensor<1x384x4x32xf32>
    %2680 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2076 : tensor<1x4x384x32xf32>) outs(%2679 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2077 = tensor.collapse_shape %2680 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %2681 = tensor.empty() : tensor<384x128xf32>
    %2682 = linalg.fill ins(%cst_607 : f32) outs(%2681 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2683 = tensor.empty() : tensor<384x128xf32>
    %2684 = linalg.matmul ins(%collapsed_2077, %cst_461 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2682 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2685 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_815, %2684 : tensor<128xf32>, tensor<384x128xf32>) outs(%2683 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2078 = tensor.expand_shape %2685 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2686 = tensor.empty() : tensor<1x384x128xf32>
    %2687 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2078, %expanded_2024 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2686 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2688 = tensor.empty() : tensor<1x384x128xf32>
    %2689 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2687, %cst_96 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2688 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2690 = tensor.empty() : tensor<1x384x128xf32>
    %2691 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2689, %cst_95 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2690 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2079 = tensor.collapse_shape %2687 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2692 = tensor.empty() : tensor<384x512xf32>
    %2693 = linalg.fill ins(%cst_607 : f32) outs(%2692 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2694 = tensor.empty() : tensor<384x512xf32>
    %2695 = linalg.matmul ins(%collapsed_2079, %cst_462 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2693 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2696 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_816, %2695 : tensor<512xf32>, tensor<384x512xf32>) outs(%2694 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2080 = tensor.expand_shape %2696 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2697 = tensor.empty() : tensor<1x384x512xf32>
    %2698 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2080 : tensor<1x384x512xf32>) outs(%2697 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2081 = tensor.collapse_shape %2698 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2699 = tensor.empty() : tensor<384x128xf32>
    %2700 = linalg.fill ins(%cst_607 : f32) outs(%2699 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2701 = tensor.empty() : tensor<384x128xf32>
    %2702 = linalg.matmul ins(%collapsed_2081, %cst_463 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2700 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2703 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_817, %2702 : tensor<128xf32>, tensor<384x128xf32>) outs(%2701 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2082 = tensor.expand_shape %2703 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2704 = tensor.empty() : tensor<1x384x128xf32>
    %2705 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2082, %2691 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2704 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2706 = tensor.empty() : tensor<1x384x128xf32>
    %2707 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2705, %cst_94 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2706 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2708 = tensor.empty() : tensor<1x384x128xf32>
    %2709 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2707, %cst_93 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2708 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2083 = tensor.collapse_shape %2705 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2710 = tensor.empty() : tensor<384x512xf32>
    %2711 = linalg.fill ins(%cst_607 : f32) outs(%2710 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2712 = tensor.empty() : tensor<384x512xf32>
    %2713 = linalg.matmul ins(%collapsed_2083, %cst_464 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2711 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2714 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_818, %2713 : tensor<512xf32>, tensor<384x512xf32>) outs(%2712 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2084 = tensor.expand_shape %2714 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2715 = tensor.empty() : tensor<1x384x512xf32>
    %2716 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2084 : tensor<1x384x512xf32>) outs(%2715 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2085 = tensor.collapse_shape %2716 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2717 = tensor.empty() : tensor<384x128xf32>
    %2718 = linalg.fill ins(%cst_607 : f32) outs(%2717 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2719 = tensor.empty() : tensor<384x128xf32>
    %2720 = linalg.matmul ins(%collapsed_2085, %cst_465 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2718 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2721 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_819, %2720 : tensor<128xf32>, tensor<384x128xf32>) outs(%2719 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2086 = tensor.expand_shape %2721 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2722 = tensor.empty() : tensor<1x384x128xf32>
    %2723 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2086, %2709 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2722 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2724 = tensor.empty() : tensor<1x384x128xf32>
    %2725 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2723, %cst_92 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2724 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2726 = tensor.empty() : tensor<1x384x128xf32>
    %2727 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2725, %cst_91 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2726 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2087 = tensor.collapse_shape %2723 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2728 = tensor.empty() : tensor<384x512xf32>
    %2729 = linalg.fill ins(%cst_607 : f32) outs(%2728 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2730 = tensor.empty() : tensor<384x512xf32>
    %2731 = linalg.matmul ins(%collapsed_2087, %cst_466 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2729 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2732 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_820, %2731 : tensor<512xf32>, tensor<384x512xf32>) outs(%2730 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2088 = tensor.expand_shape %2732 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2733 = tensor.empty() : tensor<1x384x512xf32>
    %2734 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2088 : tensor<1x384x512xf32>) outs(%2733 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2089 = tensor.collapse_shape %2734 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2735 = tensor.empty() : tensor<384x128xf32>
    %2736 = linalg.fill ins(%cst_607 : f32) outs(%2735 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2737 = tensor.empty() : tensor<384x128xf32>
    %2738 = linalg.matmul ins(%collapsed_2089, %cst_467 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2736 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2739 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_821, %2738 : tensor<128xf32>, tensor<384x128xf32>) outs(%2737 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2090 = tensor.expand_shape %2739 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2740 = tensor.empty() : tensor<1x384x128xf32>
    %2741 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2090, %2727 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2740 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2742 = tensor.empty() : tensor<1x384x128xf32>
    %2743 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2741, %cst_90 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2742 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2744 = tensor.empty() : tensor<1x384x128xf32>
    %2745 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2743, %cst_89 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2744 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2091 = tensor.collapse_shape %2741 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2746 = tensor.empty() : tensor<384x512xf32>
    %2747 = linalg.fill ins(%cst_607 : f32) outs(%2746 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2748 = tensor.empty() : tensor<384x512xf32>
    %2749 = linalg.matmul ins(%collapsed_2091, %cst_468 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2747 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2750 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_822, %2749 : tensor<512xf32>, tensor<384x512xf32>) outs(%2748 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2092 = tensor.expand_shape %2750 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2751 = tensor.empty() : tensor<1x384x512xf32>
    %2752 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2092 : tensor<1x384x512xf32>) outs(%2751 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2093 = tensor.collapse_shape %2752 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2753 = tensor.empty() : tensor<384x128xf32>
    %2754 = linalg.fill ins(%cst_607 : f32) outs(%2753 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2755 = tensor.empty() : tensor<384x128xf32>
    %2756 = linalg.matmul ins(%collapsed_2093, %cst_469 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2754 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2757 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_823, %2756 : tensor<128xf32>, tensor<384x128xf32>) outs(%2755 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2094 = tensor.expand_shape %2757 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2758 = tensor.empty() : tensor<1x384x128xf32>
    %2759 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2094, %2745 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2758 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2095 = tensor.collapse_shape %2759 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2760 = tensor.empty() : tensor<384x512xf32>
    %2761 = linalg.fill ins(%cst_607 : f32) outs(%2760 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2762 = tensor.empty() : tensor<384x512xf32>
    %2763 = linalg.matmul ins(%collapsed_2095, %cst_470 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2761 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2764 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_824, %2763 : tensor<512xf32>, tensor<384x512xf32>) outs(%2762 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2096 = tensor.expand_shape %2764 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2765 = tensor.empty() : tensor<1x384x512xf32>
    %2766 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2096, %2587 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2765 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2767 = tensor.empty() : tensor<1x384x512xf32>
    %2768 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2766, %cst_88 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2767 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2769 = tensor.empty() : tensor<1x384x512xf32>
    %2770 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2768, %cst_87 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2769 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2097 = tensor.collapse_shape %2766 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2771 = tensor.empty() : tensor<384x128xf32>
    %2772 = linalg.fill ins(%cst_607 : f32) outs(%2771 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2773 = tensor.empty() : tensor<384x128xf32>
    %2774 = linalg.matmul ins(%collapsed_2097, %cst_471 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2772 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2775 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_825, %2774 : tensor<128xf32>, tensor<384x128xf32>) outs(%2773 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2098 = tensor.expand_shape %2775 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_2099 = tensor.collapse_shape %2766 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2776 = tensor.empty() : tensor<384x128xf32>
    %2777 = linalg.fill ins(%cst_607 : f32) outs(%2776 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2778 = tensor.empty() : tensor<384x128xf32>
    %2779 = linalg.matmul ins(%collapsed_2099, %cst_472 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2777 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2780 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_826, %2779 : tensor<128xf32>, tensor<384x128xf32>) outs(%2778 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2100 = tensor.expand_shape %2780 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_2101 = tensor.collapse_shape %2770 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2781 = tensor.empty() : tensor<384x128xf32>
    %2782 = linalg.fill ins(%cst_607 : f32) outs(%2781 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2783 = tensor.empty() : tensor<384x128xf32>
    %2784 = linalg.matmul ins(%collapsed_2101, %cst_473 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2782 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2785 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %2784 : tensor<128xf32>, tensor<384x128xf32>) outs(%2783 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %2786 = tensor.empty() : tensor<384x128xf32>
    %2787 = linalg.fill ins(%cst_607 : f32) outs(%2786 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2788 = tensor.empty() : tensor<384x128xf32>
    %2789 = linalg.matmul ins(%2785, %cst_474 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2787 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2790 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_827, %2789 : tensor<128xf32>, tensor<384x128xf32>) outs(%2788 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2102 = tensor.expand_shape %2790 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2791 = tensor.empty() : tensor<384x128xf32>
    %2792 = linalg.fill ins(%cst_607 : f32) outs(%2791 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2793 = tensor.empty() : tensor<384x128xf32>
    %2794 = linalg.matmul ins(%2785, %cst_475 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2792 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2795 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_828, %2794 : tensor<128xf32>, tensor<384x128xf32>) outs(%2793 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2103 = tensor.expand_shape %2795 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2796 = tensor.empty() : tensor<1x4x384x32xf32>
    %2797 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2102 : tensor<1x384x4x32xf32>) outs(%2796 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %2798 = tensor.empty() : tensor<1x4x32x384xf32>
    %2799 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2103 : tensor<1x384x4x32xf32>) outs(%2798 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_2104 = tensor.collapse_shape %2797 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2105 = tensor.extract_slice %collapsed_2104[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2106 = tensor.extract_slice %collapsed_2104[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2107 = tensor.extract_slice %collapsed_2104[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2108 = tensor.extract_slice %collapsed_2104[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2109 = tensor.collapse_shape %2799 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2110 = tensor.extract_slice %collapsed_2109[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2111 = tensor.extract_slice %collapsed_2109[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2112 = tensor.extract_slice %collapsed_2109[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2113 = tensor.extract_slice %collapsed_2109[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_2114 = tensor.collapse_shape %extracted_slice_2110 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2115 = tensor.collapse_shape %extracted_slice_2111 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2116 = tensor.collapse_shape %extracted_slice_2112 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2117 = tensor.collapse_shape %extracted_slice_2113 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2118 = tensor.collapse_shape %extracted_slice_2105 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2800 = tensor.empty() : tensor<384x384xf32>
    %2801 = linalg.fill ins(%cst_607 : f32) outs(%2800 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2802 = tensor.empty() : tensor<384x384xf32>
    %2803 = linalg.matmul ins(%collapsed_2118, %collapsed_2114 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2801 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2804 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2803 : tensor<384xf32>, tensor<384x384xf32>) outs(%2802 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2119 = tensor.collapse_shape %extracted_slice_2106 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2805 = tensor.empty() : tensor<384x384xf32>
    %2806 = linalg.fill ins(%cst_607 : f32) outs(%2805 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2807 = tensor.empty() : tensor<384x384xf32>
    %2808 = linalg.matmul ins(%collapsed_2119, %collapsed_2115 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2806 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2809 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2808 : tensor<384xf32>, tensor<384x384xf32>) outs(%2807 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2120 = tensor.collapse_shape %extracted_slice_2107 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2810 = tensor.empty() : tensor<384x384xf32>
    %2811 = linalg.fill ins(%cst_607 : f32) outs(%2810 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2812 = tensor.empty() : tensor<384x384xf32>
    %2813 = linalg.matmul ins(%collapsed_2120, %collapsed_2116 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2811 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2814 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2813 : tensor<384xf32>, tensor<384x384xf32>) outs(%2812 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2121 = tensor.collapse_shape %extracted_slice_2108 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2815 = tensor.empty() : tensor<384x384xf32>
    %2816 = linalg.fill ins(%cst_607 : f32) outs(%2815 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2817 = tensor.empty() : tensor<384x384xf32>
    %2818 = linalg.matmul ins(%collapsed_2121, %collapsed_2117 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2816 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2819 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2818 : tensor<384xf32>, tensor<384x384xf32>) outs(%2817 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %2820 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2122 = tensor.insert_slice %2804 into %2820[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2123 = tensor.insert_slice %2809 into %inserted_slice_2122[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2124 = tensor.insert_slice %2814 into %inserted_slice_2123[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2125 = tensor.insert_slice %2819 into %inserted_slice_2124[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2126 = tensor.expand_shape %inserted_slice_2125 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %2821 = tensor.empty() : tensor<1x4x384x384xf32>
    %2822 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2126 : tensor<1x4x384x384xf32>) outs(%2821 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %2823 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2127 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %2824 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2822, %collapsed_2127 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%2823 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2825 = tensor.empty() : tensor<1x4x384xf32>
    %2826 = linalg.fill ins(%cst_241 : f32) outs(%2825 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %2827 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2824 : tensor<1x4x384x384xf32>) outs(%2826 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %2828 = tensor.empty() : tensor<1x4x384x384xf32>
    %2829 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2824, %2827 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%2828 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2830 = tensor.empty() : tensor<1x4x384x384xf32>
    %2831 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2829 : tensor<1x4x384x384xf32>) outs(%2830 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2832 = tensor.empty() : tensor<1x4x384xf32>
    %2833 = linalg.fill ins(%cst_607 : f32) outs(%2832 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %2834 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2831 : tensor<1x4x384x384xf32>) outs(%2833 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_2128 = tensor.expand_shape %2834 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2835 = tensor.empty() : tensor<1x4x384x1xf32>
    %2836 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2128 : tensor<1x4x384x1xf32>) outs(%2835 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %2837 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2129 = tensor.collapse_shape %2836 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %2838 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2831, %collapsed_2129 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%2837 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %2839 = tensor.empty() : tensor<1x4x384x32xf32>
    %2840 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2098 : tensor<1x384x4x32xf32>) outs(%2839 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_2130 = tensor.collapse_shape %2838 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2131 = tensor.extract_slice %collapsed_2130[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2132 = tensor.extract_slice %collapsed_2130[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2133 = tensor.extract_slice %collapsed_2130[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2134 = tensor.extract_slice %collapsed_2130[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2135 = tensor.collapse_shape %2840 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2136 = tensor.extract_slice %collapsed_2135[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2137 = tensor.extract_slice %collapsed_2135[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2138 = tensor.extract_slice %collapsed_2135[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2139 = tensor.extract_slice %collapsed_2135[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2140 = tensor.collapse_shape %extracted_slice_2136 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2141 = tensor.collapse_shape %extracted_slice_2137 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2142 = tensor.collapse_shape %extracted_slice_2138 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2143 = tensor.collapse_shape %extracted_slice_2139 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2144 = tensor.collapse_shape %extracted_slice_2131 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2841 = tensor.empty() : tensor<384x32xf32>
    %2842 = linalg.fill ins(%cst_607 : f32) outs(%2841 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2843 = tensor.empty() : tensor<384x32xf32>
    %2844 = linalg.matmul ins(%collapsed_2144, %collapsed_2140 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2842 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2845 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2844 : tensor<32xf32>, tensor<384x32xf32>) outs(%2843 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2145 = tensor.collapse_shape %extracted_slice_2132 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2846 = tensor.empty() : tensor<384x32xf32>
    %2847 = linalg.fill ins(%cst_607 : f32) outs(%2846 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2848 = tensor.empty() : tensor<384x32xf32>
    %2849 = linalg.matmul ins(%collapsed_2145, %collapsed_2141 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2847 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2850 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2849 : tensor<32xf32>, tensor<384x32xf32>) outs(%2848 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2146 = tensor.collapse_shape %extracted_slice_2133 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2851 = tensor.empty() : tensor<384x32xf32>
    %2852 = linalg.fill ins(%cst_607 : f32) outs(%2851 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2853 = tensor.empty() : tensor<384x32xf32>
    %2854 = linalg.matmul ins(%collapsed_2146, %collapsed_2142 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2852 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2855 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2854 : tensor<32xf32>, tensor<384x32xf32>) outs(%2853 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2147 = tensor.collapse_shape %extracted_slice_2134 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %2856 = tensor.empty() : tensor<384x32xf32>
    %2857 = linalg.fill ins(%cst_607 : f32) outs(%2856 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2858 = tensor.empty() : tensor<384x32xf32>
    %2859 = linalg.matmul ins(%collapsed_2147, %collapsed_2143 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2857 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %2860 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %2859 : tensor<32xf32>, tensor<384x32xf32>) outs(%2858 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %2861 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2148 = tensor.insert_slice %2845 into %2861[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2149 = tensor.insert_slice %2850 into %inserted_slice_2148[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2150 = tensor.insert_slice %2855 into %inserted_slice_2149[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2151 = tensor.insert_slice %2860 into %inserted_slice_2150[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2152 = tensor.expand_shape %inserted_slice_2151 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %2862 = tensor.empty() : tensor<1x384x4x32xf32>
    %2863 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2152 : tensor<1x4x384x32xf32>) outs(%2862 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2153 = tensor.collapse_shape %2863 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %2864 = tensor.empty() : tensor<384x128xf32>
    %2865 = linalg.fill ins(%cst_607 : f32) outs(%2864 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2866 = tensor.empty() : tensor<384x128xf32>
    %2867 = linalg.matmul ins(%collapsed_2153, %cst_476 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2865 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2868 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_829, %2867 : tensor<128xf32>, tensor<384x128xf32>) outs(%2866 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2154 = tensor.expand_shape %2868 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2869 = tensor.empty() : tensor<1x384x128xf32>
    %2870 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2154, %expanded_2100 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2869 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2871 = tensor.empty() : tensor<1x384x128xf32>
    %2872 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2870, %cst_86 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2871 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2873 = tensor.empty() : tensor<1x384x128xf32>
    %2874 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2872, %cst_85 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2873 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2155 = tensor.collapse_shape %2870 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2875 = tensor.empty() : tensor<384x512xf32>
    %2876 = linalg.fill ins(%cst_607 : f32) outs(%2875 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2877 = tensor.empty() : tensor<384x512xf32>
    %2878 = linalg.matmul ins(%collapsed_2155, %cst_477 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2876 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2879 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_830, %2878 : tensor<512xf32>, tensor<384x512xf32>) outs(%2877 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2156 = tensor.expand_shape %2879 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2880 = tensor.empty() : tensor<1x384x512xf32>
    %2881 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2156 : tensor<1x384x512xf32>) outs(%2880 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2157 = tensor.collapse_shape %2881 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2882 = tensor.empty() : tensor<384x128xf32>
    %2883 = linalg.fill ins(%cst_607 : f32) outs(%2882 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2884 = tensor.empty() : tensor<384x128xf32>
    %2885 = linalg.matmul ins(%collapsed_2157, %cst_478 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2883 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2886 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_831, %2885 : tensor<128xf32>, tensor<384x128xf32>) outs(%2884 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2158 = tensor.expand_shape %2886 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2887 = tensor.empty() : tensor<1x384x128xf32>
    %2888 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2158, %2874 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2887 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2889 = tensor.empty() : tensor<1x384x128xf32>
    %2890 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2888, %cst_84 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2889 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2891 = tensor.empty() : tensor<1x384x128xf32>
    %2892 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2890, %cst_83 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2891 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2159 = tensor.collapse_shape %2888 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2893 = tensor.empty() : tensor<384x512xf32>
    %2894 = linalg.fill ins(%cst_607 : f32) outs(%2893 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2895 = tensor.empty() : tensor<384x512xf32>
    %2896 = linalg.matmul ins(%collapsed_2159, %cst_479 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2894 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2897 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_832, %2896 : tensor<512xf32>, tensor<384x512xf32>) outs(%2895 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2160 = tensor.expand_shape %2897 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2898 = tensor.empty() : tensor<1x384x512xf32>
    %2899 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2160 : tensor<1x384x512xf32>) outs(%2898 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2161 = tensor.collapse_shape %2899 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2900 = tensor.empty() : tensor<384x128xf32>
    %2901 = linalg.fill ins(%cst_607 : f32) outs(%2900 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2902 = tensor.empty() : tensor<384x128xf32>
    %2903 = linalg.matmul ins(%collapsed_2161, %cst_480 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2901 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2904 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_833, %2903 : tensor<128xf32>, tensor<384x128xf32>) outs(%2902 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2162 = tensor.expand_shape %2904 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2905 = tensor.empty() : tensor<1x384x128xf32>
    %2906 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2162, %2892 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2905 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2907 = tensor.empty() : tensor<1x384x128xf32>
    %2908 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2906, %cst_82 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2907 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2909 = tensor.empty() : tensor<1x384x128xf32>
    %2910 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2908, %cst_81 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2909 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2163 = tensor.collapse_shape %2906 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2911 = tensor.empty() : tensor<384x512xf32>
    %2912 = linalg.fill ins(%cst_607 : f32) outs(%2911 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2913 = tensor.empty() : tensor<384x512xf32>
    %2914 = linalg.matmul ins(%collapsed_2163, %cst_481 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2912 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2915 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_834, %2914 : tensor<512xf32>, tensor<384x512xf32>) outs(%2913 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2164 = tensor.expand_shape %2915 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2916 = tensor.empty() : tensor<1x384x512xf32>
    %2917 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2164 : tensor<1x384x512xf32>) outs(%2916 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2165 = tensor.collapse_shape %2917 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2918 = tensor.empty() : tensor<384x128xf32>
    %2919 = linalg.fill ins(%cst_607 : f32) outs(%2918 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2920 = tensor.empty() : tensor<384x128xf32>
    %2921 = linalg.matmul ins(%collapsed_2165, %cst_482 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2919 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2922 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_835, %2921 : tensor<128xf32>, tensor<384x128xf32>) outs(%2920 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2166 = tensor.expand_shape %2922 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2923 = tensor.empty() : tensor<1x384x128xf32>
    %2924 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2166, %2910 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2923 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2925 = tensor.empty() : tensor<1x384x128xf32>
    %2926 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2924, %cst_80 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2925 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %2927 = tensor.empty() : tensor<1x384x128xf32>
    %2928 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2926, %cst_79 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%2927 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2167 = tensor.collapse_shape %2924 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2929 = tensor.empty() : tensor<384x512xf32>
    %2930 = linalg.fill ins(%cst_607 : f32) outs(%2929 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2931 = tensor.empty() : tensor<384x512xf32>
    %2932 = linalg.matmul ins(%collapsed_2167, %cst_483 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2930 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2933 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_836, %2932 : tensor<512xf32>, tensor<384x512xf32>) outs(%2931 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2168 = tensor.expand_shape %2933 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2934 = tensor.empty() : tensor<1x384x512xf32>
    %2935 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2168 : tensor<1x384x512xf32>) outs(%2934 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2169 = tensor.collapse_shape %2935 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2936 = tensor.empty() : tensor<384x128xf32>
    %2937 = linalg.fill ins(%cst_607 : f32) outs(%2936 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2938 = tensor.empty() : tensor<384x128xf32>
    %2939 = linalg.matmul ins(%collapsed_2169, %cst_484 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2937 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2940 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_837, %2939 : tensor<128xf32>, tensor<384x128xf32>) outs(%2938 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2170 = tensor.expand_shape %2940 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2941 = tensor.empty() : tensor<1x384x128xf32>
    %2942 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2170, %2928 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2941 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2171 = tensor.collapse_shape %2942 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %2943 = tensor.empty() : tensor<384x512xf32>
    %2944 = linalg.fill ins(%cst_607 : f32) outs(%2943 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2945 = tensor.empty() : tensor<384x512xf32>
    %2946 = linalg.matmul ins(%collapsed_2171, %cst_485 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2944 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2947 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_838, %2946 : tensor<512xf32>, tensor<384x512xf32>) outs(%2945 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2172 = tensor.expand_shape %2947 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2948 = tensor.empty() : tensor<1x384x512xf32>
    %2949 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2172, %2770 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2948 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2950 = tensor.empty() : tensor<1x384x512xf32>
    %2951 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2949, %cst_78 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2950 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %2952 = tensor.empty() : tensor<1x384x512xf32>
    %2953 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2951, %cst_77 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%2952 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2173 = tensor.collapse_shape %2949 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2954 = tensor.empty() : tensor<384x128xf32>
    %2955 = linalg.fill ins(%cst_607 : f32) outs(%2954 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2956 = tensor.empty() : tensor<384x128xf32>
    %2957 = linalg.matmul ins(%collapsed_2173, %cst_486 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2955 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2958 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_839, %2957 : tensor<128xf32>, tensor<384x128xf32>) outs(%2956 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2174 = tensor.expand_shape %2958 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_2175 = tensor.collapse_shape %2949 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2959 = tensor.empty() : tensor<384x128xf32>
    %2960 = linalg.fill ins(%cst_607 : f32) outs(%2959 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2961 = tensor.empty() : tensor<384x128xf32>
    %2962 = linalg.matmul ins(%collapsed_2175, %cst_487 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2960 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2963 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_840, %2962 : tensor<128xf32>, tensor<384x128xf32>) outs(%2961 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2176 = tensor.expand_shape %2963 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_2177 = tensor.collapse_shape %2953 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %2964 = tensor.empty() : tensor<384x128xf32>
    %2965 = linalg.fill ins(%cst_607 : f32) outs(%2964 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2966 = tensor.empty() : tensor<384x128xf32>
    %2967 = linalg.matmul ins(%collapsed_2177, %cst_488 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2965 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2968 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %2967 : tensor<128xf32>, tensor<384x128xf32>) outs(%2966 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %2969 = tensor.empty() : tensor<384x128xf32>
    %2970 = linalg.fill ins(%cst_607 : f32) outs(%2969 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2971 = tensor.empty() : tensor<384x128xf32>
    %2972 = linalg.matmul ins(%2968, %cst_489 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2970 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2973 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_841, %2972 : tensor<128xf32>, tensor<384x128xf32>) outs(%2971 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2178 = tensor.expand_shape %2973 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2974 = tensor.empty() : tensor<384x128xf32>
    %2975 = linalg.fill ins(%cst_607 : f32) outs(%2974 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2976 = tensor.empty() : tensor<384x128xf32>
    %2977 = linalg.matmul ins(%2968, %cst_490 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2975 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %2978 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_842, %2977 : tensor<128xf32>, tensor<384x128xf32>) outs(%2976 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2179 = tensor.expand_shape %2978 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2979 = tensor.empty() : tensor<1x4x384x32xf32>
    %2980 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2178 : tensor<1x384x4x32xf32>) outs(%2979 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %2981 = tensor.empty() : tensor<1x4x32x384xf32>
    %2982 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2179 : tensor<1x384x4x32xf32>) outs(%2981 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_2180 = tensor.collapse_shape %2980 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2181 = tensor.extract_slice %collapsed_2180[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2182 = tensor.extract_slice %collapsed_2180[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2183 = tensor.extract_slice %collapsed_2180[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2184 = tensor.extract_slice %collapsed_2180[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2185 = tensor.collapse_shape %2982 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2186 = tensor.extract_slice %collapsed_2185[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2187 = tensor.extract_slice %collapsed_2185[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2188 = tensor.extract_slice %collapsed_2185[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2189 = tensor.extract_slice %collapsed_2185[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_2190 = tensor.collapse_shape %extracted_slice_2186 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2191 = tensor.collapse_shape %extracted_slice_2187 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2192 = tensor.collapse_shape %extracted_slice_2188 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2193 = tensor.collapse_shape %extracted_slice_2189 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2194 = tensor.collapse_shape %extracted_slice_2181 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2983 = tensor.empty() : tensor<384x384xf32>
    %2984 = linalg.fill ins(%cst_607 : f32) outs(%2983 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2985 = tensor.empty() : tensor<384x384xf32>
    %2986 = linalg.matmul ins(%collapsed_2194, %collapsed_2190 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2984 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2987 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2986 : tensor<384xf32>, tensor<384x384xf32>) outs(%2985 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2195 = tensor.collapse_shape %extracted_slice_2182 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2988 = tensor.empty() : tensor<384x384xf32>
    %2989 = linalg.fill ins(%cst_607 : f32) outs(%2988 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2990 = tensor.empty() : tensor<384x384xf32>
    %2991 = linalg.matmul ins(%collapsed_2195, %collapsed_2191 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2989 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2992 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2991 : tensor<384xf32>, tensor<384x384xf32>) outs(%2990 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2196 = tensor.collapse_shape %extracted_slice_2183 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2993 = tensor.empty() : tensor<384x384xf32>
    %2994 = linalg.fill ins(%cst_607 : f32) outs(%2993 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2995 = tensor.empty() : tensor<384x384xf32>
    %2996 = linalg.matmul ins(%collapsed_2196, %collapsed_2192 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2994 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %2997 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %2996 : tensor<384xf32>, tensor<384x384xf32>) outs(%2995 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2197 = tensor.collapse_shape %extracted_slice_2184 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %2998 = tensor.empty() : tensor<384x384xf32>
    %2999 = linalg.fill ins(%cst_607 : f32) outs(%2998 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3000 = tensor.empty() : tensor<384x384xf32>
    %3001 = linalg.matmul ins(%collapsed_2197, %collapsed_2193 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2999 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3002 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3001 : tensor<384xf32>, tensor<384x384xf32>) outs(%3000 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %3003 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2198 = tensor.insert_slice %2987 into %3003[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2199 = tensor.insert_slice %2992 into %inserted_slice_2198[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2200 = tensor.insert_slice %2997 into %inserted_slice_2199[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2201 = tensor.insert_slice %3002 into %inserted_slice_2200[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2202 = tensor.expand_shape %inserted_slice_2201 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %3004 = tensor.empty() : tensor<1x4x384x384xf32>
    %3005 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2202 : tensor<1x4x384x384xf32>) outs(%3004 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %3006 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2203 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %3007 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3005, %collapsed_2203 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%3006 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3008 = tensor.empty() : tensor<1x4x384xf32>
    %3009 = linalg.fill ins(%cst_241 : f32) outs(%3008 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3010 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3007 : tensor<1x4x384x384xf32>) outs(%3009 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %3011 = tensor.empty() : tensor<1x4x384x384xf32>
    %3012 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3007, %3010 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3011 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3013 = tensor.empty() : tensor<1x4x384x384xf32>
    %3014 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3012 : tensor<1x4x384x384xf32>) outs(%3013 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3015 = tensor.empty() : tensor<1x4x384xf32>
    %3016 = linalg.fill ins(%cst_607 : f32) outs(%3015 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3017 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3014 : tensor<1x4x384x384xf32>) outs(%3016 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_2204 = tensor.expand_shape %3017 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3018 = tensor.empty() : tensor<1x4x384x1xf32>
    %3019 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2204 : tensor<1x4x384x1xf32>) outs(%3018 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %3020 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2205 = tensor.collapse_shape %3019 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %3021 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3014, %collapsed_2205 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3020 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3022 = tensor.empty() : tensor<1x4x384x32xf32>
    %3023 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2174 : tensor<1x384x4x32xf32>) outs(%3022 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_2206 = tensor.collapse_shape %3021 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2207 = tensor.extract_slice %collapsed_2206[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2208 = tensor.extract_slice %collapsed_2206[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2209 = tensor.extract_slice %collapsed_2206[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2210 = tensor.extract_slice %collapsed_2206[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2211 = tensor.collapse_shape %3023 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2212 = tensor.extract_slice %collapsed_2211[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2213 = tensor.extract_slice %collapsed_2211[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2214 = tensor.extract_slice %collapsed_2211[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2215 = tensor.extract_slice %collapsed_2211[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2216 = tensor.collapse_shape %extracted_slice_2212 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2217 = tensor.collapse_shape %extracted_slice_2213 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2218 = tensor.collapse_shape %extracted_slice_2214 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2219 = tensor.collapse_shape %extracted_slice_2215 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2220 = tensor.collapse_shape %extracted_slice_2207 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3024 = tensor.empty() : tensor<384x32xf32>
    %3025 = linalg.fill ins(%cst_607 : f32) outs(%3024 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3026 = tensor.empty() : tensor<384x32xf32>
    %3027 = linalg.matmul ins(%collapsed_2220, %collapsed_2216 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3025 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3028 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3027 : tensor<32xf32>, tensor<384x32xf32>) outs(%3026 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2221 = tensor.collapse_shape %extracted_slice_2208 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3029 = tensor.empty() : tensor<384x32xf32>
    %3030 = linalg.fill ins(%cst_607 : f32) outs(%3029 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3031 = tensor.empty() : tensor<384x32xf32>
    %3032 = linalg.matmul ins(%collapsed_2221, %collapsed_2217 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3030 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3033 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3032 : tensor<32xf32>, tensor<384x32xf32>) outs(%3031 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2222 = tensor.collapse_shape %extracted_slice_2209 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3034 = tensor.empty() : tensor<384x32xf32>
    %3035 = linalg.fill ins(%cst_607 : f32) outs(%3034 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3036 = tensor.empty() : tensor<384x32xf32>
    %3037 = linalg.matmul ins(%collapsed_2222, %collapsed_2218 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3035 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3038 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3037 : tensor<32xf32>, tensor<384x32xf32>) outs(%3036 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2223 = tensor.collapse_shape %extracted_slice_2210 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3039 = tensor.empty() : tensor<384x32xf32>
    %3040 = linalg.fill ins(%cst_607 : f32) outs(%3039 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3041 = tensor.empty() : tensor<384x32xf32>
    %3042 = linalg.matmul ins(%collapsed_2223, %collapsed_2219 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3040 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3043 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3042 : tensor<32xf32>, tensor<384x32xf32>) outs(%3041 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %3044 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2224 = tensor.insert_slice %3028 into %3044[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2225 = tensor.insert_slice %3033 into %inserted_slice_2224[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2226 = tensor.insert_slice %3038 into %inserted_slice_2225[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2227 = tensor.insert_slice %3043 into %inserted_slice_2226[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2228 = tensor.expand_shape %inserted_slice_2227 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %3045 = tensor.empty() : tensor<1x384x4x32xf32>
    %3046 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2228 : tensor<1x4x384x32xf32>) outs(%3045 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2229 = tensor.collapse_shape %3046 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %3047 = tensor.empty() : tensor<384x128xf32>
    %3048 = linalg.fill ins(%cst_607 : f32) outs(%3047 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3049 = tensor.empty() : tensor<384x128xf32>
    %3050 = linalg.matmul ins(%collapsed_2229, %cst_491 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3048 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3051 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_843, %3050 : tensor<128xf32>, tensor<384x128xf32>) outs(%3049 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2230 = tensor.expand_shape %3051 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3052 = tensor.empty() : tensor<1x384x128xf32>
    %3053 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2230, %expanded_2176 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3052 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3054 = tensor.empty() : tensor<1x384x128xf32>
    %3055 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3053, %cst_76 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3054 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3056 = tensor.empty() : tensor<1x384x128xf32>
    %3057 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3055, %cst_75 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3056 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2231 = tensor.collapse_shape %3053 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3058 = tensor.empty() : tensor<384x512xf32>
    %3059 = linalg.fill ins(%cst_607 : f32) outs(%3058 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3060 = tensor.empty() : tensor<384x512xf32>
    %3061 = linalg.matmul ins(%collapsed_2231, %cst_492 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3059 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3062 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_844, %3061 : tensor<512xf32>, tensor<384x512xf32>) outs(%3060 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2232 = tensor.expand_shape %3062 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3063 = tensor.empty() : tensor<1x384x512xf32>
    %3064 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2232 : tensor<1x384x512xf32>) outs(%3063 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2233 = tensor.collapse_shape %3064 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3065 = tensor.empty() : tensor<384x128xf32>
    %3066 = linalg.fill ins(%cst_607 : f32) outs(%3065 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3067 = tensor.empty() : tensor<384x128xf32>
    %3068 = linalg.matmul ins(%collapsed_2233, %cst_493 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3066 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3069 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_845, %3068 : tensor<128xf32>, tensor<384x128xf32>) outs(%3067 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2234 = tensor.expand_shape %3069 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3070 = tensor.empty() : tensor<1x384x128xf32>
    %3071 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2234, %3057 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3070 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3072 = tensor.empty() : tensor<1x384x128xf32>
    %3073 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3071, %cst_74 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3072 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3074 = tensor.empty() : tensor<1x384x128xf32>
    %3075 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3073, %cst_73 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3074 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2235 = tensor.collapse_shape %3071 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3076 = tensor.empty() : tensor<384x512xf32>
    %3077 = linalg.fill ins(%cst_607 : f32) outs(%3076 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3078 = tensor.empty() : tensor<384x512xf32>
    %3079 = linalg.matmul ins(%collapsed_2235, %cst_494 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3077 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3080 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_846, %3079 : tensor<512xf32>, tensor<384x512xf32>) outs(%3078 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2236 = tensor.expand_shape %3080 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3081 = tensor.empty() : tensor<1x384x512xf32>
    %3082 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2236 : tensor<1x384x512xf32>) outs(%3081 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2237 = tensor.collapse_shape %3082 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3083 = tensor.empty() : tensor<384x128xf32>
    %3084 = linalg.fill ins(%cst_607 : f32) outs(%3083 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3085 = tensor.empty() : tensor<384x128xf32>
    %3086 = linalg.matmul ins(%collapsed_2237, %cst_495 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3084 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3087 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_847, %3086 : tensor<128xf32>, tensor<384x128xf32>) outs(%3085 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2238 = tensor.expand_shape %3087 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3088 = tensor.empty() : tensor<1x384x128xf32>
    %3089 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2238, %3075 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3088 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3090 = tensor.empty() : tensor<1x384x128xf32>
    %3091 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3089, %cst_72 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3090 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3092 = tensor.empty() : tensor<1x384x128xf32>
    %3093 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3091, %cst_71 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3092 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2239 = tensor.collapse_shape %3089 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3094 = tensor.empty() : tensor<384x512xf32>
    %3095 = linalg.fill ins(%cst_607 : f32) outs(%3094 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3096 = tensor.empty() : tensor<384x512xf32>
    %3097 = linalg.matmul ins(%collapsed_2239, %cst_496 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3095 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3098 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_848, %3097 : tensor<512xf32>, tensor<384x512xf32>) outs(%3096 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2240 = tensor.expand_shape %3098 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3099 = tensor.empty() : tensor<1x384x512xf32>
    %3100 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2240 : tensor<1x384x512xf32>) outs(%3099 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2241 = tensor.collapse_shape %3100 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3101 = tensor.empty() : tensor<384x128xf32>
    %3102 = linalg.fill ins(%cst_607 : f32) outs(%3101 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3103 = tensor.empty() : tensor<384x128xf32>
    %3104 = linalg.matmul ins(%collapsed_2241, %cst_497 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3102 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3105 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_849, %3104 : tensor<128xf32>, tensor<384x128xf32>) outs(%3103 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2242 = tensor.expand_shape %3105 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3106 = tensor.empty() : tensor<1x384x128xf32>
    %3107 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2242, %3093 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3106 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3108 = tensor.empty() : tensor<1x384x128xf32>
    %3109 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3107, %cst_70 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3108 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3110 = tensor.empty() : tensor<1x384x128xf32>
    %3111 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3109, %cst_69 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3110 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2243 = tensor.collapse_shape %3107 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3112 = tensor.empty() : tensor<384x512xf32>
    %3113 = linalg.fill ins(%cst_607 : f32) outs(%3112 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3114 = tensor.empty() : tensor<384x512xf32>
    %3115 = linalg.matmul ins(%collapsed_2243, %cst_498 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3113 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3116 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_850, %3115 : tensor<512xf32>, tensor<384x512xf32>) outs(%3114 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2244 = tensor.expand_shape %3116 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3117 = tensor.empty() : tensor<1x384x512xf32>
    %3118 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2244 : tensor<1x384x512xf32>) outs(%3117 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2245 = tensor.collapse_shape %3118 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3119 = tensor.empty() : tensor<384x128xf32>
    %3120 = linalg.fill ins(%cst_607 : f32) outs(%3119 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3121 = tensor.empty() : tensor<384x128xf32>
    %3122 = linalg.matmul ins(%collapsed_2245, %cst_499 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3120 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3123 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_851, %3122 : tensor<128xf32>, tensor<384x128xf32>) outs(%3121 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2246 = tensor.expand_shape %3123 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3124 = tensor.empty() : tensor<1x384x128xf32>
    %3125 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2246, %3111 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3124 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2247 = tensor.collapse_shape %3125 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3126 = tensor.empty() : tensor<384x512xf32>
    %3127 = linalg.fill ins(%cst_607 : f32) outs(%3126 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3128 = tensor.empty() : tensor<384x512xf32>
    %3129 = linalg.matmul ins(%collapsed_2247, %cst_500 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3127 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3130 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_852, %3129 : tensor<512xf32>, tensor<384x512xf32>) outs(%3128 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2248 = tensor.expand_shape %3130 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3131 = tensor.empty() : tensor<1x384x512xf32>
    %3132 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2248, %2953 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3131 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %3133 = tensor.empty() : tensor<1x384x512xf32>
    %3134 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3132, %cst_68 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%3133 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %3135 = tensor.empty() : tensor<1x384x512xf32>
    %3136 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3134, %cst_67 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%3135 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2249 = tensor.collapse_shape %3132 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3137 = tensor.empty() : tensor<384x128xf32>
    %3138 = linalg.fill ins(%cst_607 : f32) outs(%3137 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3139 = tensor.empty() : tensor<384x128xf32>
    %3140 = linalg.matmul ins(%collapsed_2249, %cst_501 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3138 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3141 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_853, %3140 : tensor<128xf32>, tensor<384x128xf32>) outs(%3139 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2250 = tensor.expand_shape %3141 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_2251 = tensor.collapse_shape %3132 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3142 = tensor.empty() : tensor<384x128xf32>
    %3143 = linalg.fill ins(%cst_607 : f32) outs(%3142 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3144 = tensor.empty() : tensor<384x128xf32>
    %3145 = linalg.matmul ins(%collapsed_2251, %cst_502 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3143 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3146 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_854, %3145 : tensor<128xf32>, tensor<384x128xf32>) outs(%3144 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2252 = tensor.expand_shape %3146 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_2253 = tensor.collapse_shape %3136 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3147 = tensor.empty() : tensor<384x128xf32>
    %3148 = linalg.fill ins(%cst_607 : f32) outs(%3147 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3149 = tensor.empty() : tensor<384x128xf32>
    %3150 = linalg.matmul ins(%collapsed_2253, %cst_503 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3148 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3151 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %3150 : tensor<128xf32>, tensor<384x128xf32>) outs(%3149 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %3152 = tensor.empty() : tensor<384x128xf32>
    %3153 = linalg.fill ins(%cst_607 : f32) outs(%3152 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3154 = tensor.empty() : tensor<384x128xf32>
    %3155 = linalg.matmul ins(%3151, %cst_504 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3153 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3156 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_855, %3155 : tensor<128xf32>, tensor<384x128xf32>) outs(%3154 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2254 = tensor.expand_shape %3156 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3157 = tensor.empty() : tensor<384x128xf32>
    %3158 = linalg.fill ins(%cst_607 : f32) outs(%3157 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3159 = tensor.empty() : tensor<384x128xf32>
    %3160 = linalg.matmul ins(%3151, %cst_505 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3158 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3161 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_856, %3160 : tensor<128xf32>, tensor<384x128xf32>) outs(%3159 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2255 = tensor.expand_shape %3161 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3162 = tensor.empty() : tensor<1x4x384x32xf32>
    %3163 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2254 : tensor<1x384x4x32xf32>) outs(%3162 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %3164 = tensor.empty() : tensor<1x4x32x384xf32>
    %3165 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2255 : tensor<1x384x4x32xf32>) outs(%3164 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_2256 = tensor.collapse_shape %3163 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2257 = tensor.extract_slice %collapsed_2256[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2258 = tensor.extract_slice %collapsed_2256[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2259 = tensor.extract_slice %collapsed_2256[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2260 = tensor.extract_slice %collapsed_2256[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2261 = tensor.collapse_shape %3165 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2262 = tensor.extract_slice %collapsed_2261[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2263 = tensor.extract_slice %collapsed_2261[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2264 = tensor.extract_slice %collapsed_2261[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2265 = tensor.extract_slice %collapsed_2261[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_2266 = tensor.collapse_shape %extracted_slice_2262 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2267 = tensor.collapse_shape %extracted_slice_2263 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2268 = tensor.collapse_shape %extracted_slice_2264 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2269 = tensor.collapse_shape %extracted_slice_2265 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2270 = tensor.collapse_shape %extracted_slice_2257 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3166 = tensor.empty() : tensor<384x384xf32>
    %3167 = linalg.fill ins(%cst_607 : f32) outs(%3166 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3168 = tensor.empty() : tensor<384x384xf32>
    %3169 = linalg.matmul ins(%collapsed_2270, %collapsed_2266 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3167 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3170 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3169 : tensor<384xf32>, tensor<384x384xf32>) outs(%3168 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2271 = tensor.collapse_shape %extracted_slice_2258 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3171 = tensor.empty() : tensor<384x384xf32>
    %3172 = linalg.fill ins(%cst_607 : f32) outs(%3171 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3173 = tensor.empty() : tensor<384x384xf32>
    %3174 = linalg.matmul ins(%collapsed_2271, %collapsed_2267 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3172 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3175 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3174 : tensor<384xf32>, tensor<384x384xf32>) outs(%3173 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2272 = tensor.collapse_shape %extracted_slice_2259 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3176 = tensor.empty() : tensor<384x384xf32>
    %3177 = linalg.fill ins(%cst_607 : f32) outs(%3176 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3178 = tensor.empty() : tensor<384x384xf32>
    %3179 = linalg.matmul ins(%collapsed_2272, %collapsed_2268 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3177 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3180 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3179 : tensor<384xf32>, tensor<384x384xf32>) outs(%3178 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2273 = tensor.collapse_shape %extracted_slice_2260 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3181 = tensor.empty() : tensor<384x384xf32>
    %3182 = linalg.fill ins(%cst_607 : f32) outs(%3181 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3183 = tensor.empty() : tensor<384x384xf32>
    %3184 = linalg.matmul ins(%collapsed_2273, %collapsed_2269 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3182 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3185 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3184 : tensor<384xf32>, tensor<384x384xf32>) outs(%3183 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %3186 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2274 = tensor.insert_slice %3170 into %3186[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2275 = tensor.insert_slice %3175 into %inserted_slice_2274[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2276 = tensor.insert_slice %3180 into %inserted_slice_2275[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2277 = tensor.insert_slice %3185 into %inserted_slice_2276[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2278 = tensor.expand_shape %inserted_slice_2277 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %3187 = tensor.empty() : tensor<1x4x384x384xf32>
    %3188 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2278 : tensor<1x4x384x384xf32>) outs(%3187 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %3189 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2279 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %3190 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3188, %collapsed_2279 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%3189 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3191 = tensor.empty() : tensor<1x4x384xf32>
    %3192 = linalg.fill ins(%cst_241 : f32) outs(%3191 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3193 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3190 : tensor<1x4x384x384xf32>) outs(%3192 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %3194 = tensor.empty() : tensor<1x4x384x384xf32>
    %3195 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3190, %3193 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3194 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3196 = tensor.empty() : tensor<1x4x384x384xf32>
    %3197 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3195 : tensor<1x4x384x384xf32>) outs(%3196 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3198 = tensor.empty() : tensor<1x4x384xf32>
    %3199 = linalg.fill ins(%cst_607 : f32) outs(%3198 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3200 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3197 : tensor<1x4x384x384xf32>) outs(%3199 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_2280 = tensor.expand_shape %3200 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3201 = tensor.empty() : tensor<1x4x384x1xf32>
    %3202 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2280 : tensor<1x4x384x1xf32>) outs(%3201 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %3203 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2281 = tensor.collapse_shape %3202 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %3204 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3197, %collapsed_2281 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3203 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3205 = tensor.empty() : tensor<1x4x384x32xf32>
    %3206 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2250 : tensor<1x384x4x32xf32>) outs(%3205 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_2282 = tensor.collapse_shape %3204 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2283 = tensor.extract_slice %collapsed_2282[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2284 = tensor.extract_slice %collapsed_2282[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2285 = tensor.extract_slice %collapsed_2282[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2286 = tensor.extract_slice %collapsed_2282[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2287 = tensor.collapse_shape %3206 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2288 = tensor.extract_slice %collapsed_2287[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2289 = tensor.extract_slice %collapsed_2287[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2290 = tensor.extract_slice %collapsed_2287[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2291 = tensor.extract_slice %collapsed_2287[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2292 = tensor.collapse_shape %extracted_slice_2288 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2293 = tensor.collapse_shape %extracted_slice_2289 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2294 = tensor.collapse_shape %extracted_slice_2290 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2295 = tensor.collapse_shape %extracted_slice_2291 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2296 = tensor.collapse_shape %extracted_slice_2283 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3207 = tensor.empty() : tensor<384x32xf32>
    %3208 = linalg.fill ins(%cst_607 : f32) outs(%3207 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3209 = tensor.empty() : tensor<384x32xf32>
    %3210 = linalg.matmul ins(%collapsed_2296, %collapsed_2292 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3208 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3211 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3210 : tensor<32xf32>, tensor<384x32xf32>) outs(%3209 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2297 = tensor.collapse_shape %extracted_slice_2284 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3212 = tensor.empty() : tensor<384x32xf32>
    %3213 = linalg.fill ins(%cst_607 : f32) outs(%3212 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3214 = tensor.empty() : tensor<384x32xf32>
    %3215 = linalg.matmul ins(%collapsed_2297, %collapsed_2293 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3213 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3216 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3215 : tensor<32xf32>, tensor<384x32xf32>) outs(%3214 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2298 = tensor.collapse_shape %extracted_slice_2285 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3217 = tensor.empty() : tensor<384x32xf32>
    %3218 = linalg.fill ins(%cst_607 : f32) outs(%3217 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3219 = tensor.empty() : tensor<384x32xf32>
    %3220 = linalg.matmul ins(%collapsed_2298, %collapsed_2294 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3218 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3221 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3220 : tensor<32xf32>, tensor<384x32xf32>) outs(%3219 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2299 = tensor.collapse_shape %extracted_slice_2286 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3222 = tensor.empty() : tensor<384x32xf32>
    %3223 = linalg.fill ins(%cst_607 : f32) outs(%3222 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3224 = tensor.empty() : tensor<384x32xf32>
    %3225 = linalg.matmul ins(%collapsed_2299, %collapsed_2295 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3223 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3226 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3225 : tensor<32xf32>, tensor<384x32xf32>) outs(%3224 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %3227 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2300 = tensor.insert_slice %3211 into %3227[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2301 = tensor.insert_slice %3216 into %inserted_slice_2300[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2302 = tensor.insert_slice %3221 into %inserted_slice_2301[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2303 = tensor.insert_slice %3226 into %inserted_slice_2302[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2304 = tensor.expand_shape %inserted_slice_2303 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %3228 = tensor.empty() : tensor<1x384x4x32xf32>
    %3229 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2304 : tensor<1x4x384x32xf32>) outs(%3228 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2305 = tensor.collapse_shape %3229 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %3230 = tensor.empty() : tensor<384x128xf32>
    %3231 = linalg.fill ins(%cst_607 : f32) outs(%3230 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3232 = tensor.empty() : tensor<384x128xf32>
    %3233 = linalg.matmul ins(%collapsed_2305, %cst_506 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3231 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3234 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_857, %3233 : tensor<128xf32>, tensor<384x128xf32>) outs(%3232 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2306 = tensor.expand_shape %3234 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3235 = tensor.empty() : tensor<1x384x128xf32>
    %3236 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2306, %expanded_2252 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3235 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3237 = tensor.empty() : tensor<1x384x128xf32>
    %3238 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3236, %cst_66 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3237 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3239 = tensor.empty() : tensor<1x384x128xf32>
    %3240 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3238, %cst_65 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3239 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2307 = tensor.collapse_shape %3236 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3241 = tensor.empty() : tensor<384x512xf32>
    %3242 = linalg.fill ins(%cst_607 : f32) outs(%3241 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3243 = tensor.empty() : tensor<384x512xf32>
    %3244 = linalg.matmul ins(%collapsed_2307, %cst_507 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3242 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3245 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_858, %3244 : tensor<512xf32>, tensor<384x512xf32>) outs(%3243 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2308 = tensor.expand_shape %3245 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3246 = tensor.empty() : tensor<1x384x512xf32>
    %3247 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2308 : tensor<1x384x512xf32>) outs(%3246 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2309 = tensor.collapse_shape %3247 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3248 = tensor.empty() : tensor<384x128xf32>
    %3249 = linalg.fill ins(%cst_607 : f32) outs(%3248 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3250 = tensor.empty() : tensor<384x128xf32>
    %3251 = linalg.matmul ins(%collapsed_2309, %cst_508 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3249 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3252 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_859, %3251 : tensor<128xf32>, tensor<384x128xf32>) outs(%3250 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2310 = tensor.expand_shape %3252 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3253 = tensor.empty() : tensor<1x384x128xf32>
    %3254 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2310, %3240 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3253 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3255 = tensor.empty() : tensor<1x384x128xf32>
    %3256 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3254, %cst_64 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3255 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3257 = tensor.empty() : tensor<1x384x128xf32>
    %3258 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3256, %cst_63 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3257 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2311 = tensor.collapse_shape %3254 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3259 = tensor.empty() : tensor<384x512xf32>
    %3260 = linalg.fill ins(%cst_607 : f32) outs(%3259 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3261 = tensor.empty() : tensor<384x512xf32>
    %3262 = linalg.matmul ins(%collapsed_2311, %cst_509 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3260 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3263 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_860, %3262 : tensor<512xf32>, tensor<384x512xf32>) outs(%3261 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2312 = tensor.expand_shape %3263 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3264 = tensor.empty() : tensor<1x384x512xf32>
    %3265 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2312 : tensor<1x384x512xf32>) outs(%3264 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2313 = tensor.collapse_shape %3265 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3266 = tensor.empty() : tensor<384x128xf32>
    %3267 = linalg.fill ins(%cst_607 : f32) outs(%3266 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3268 = tensor.empty() : tensor<384x128xf32>
    %3269 = linalg.matmul ins(%collapsed_2313, %cst_510 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3267 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3270 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_861, %3269 : tensor<128xf32>, tensor<384x128xf32>) outs(%3268 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2314 = tensor.expand_shape %3270 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3271 = tensor.empty() : tensor<1x384x128xf32>
    %3272 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2314, %3258 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3271 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3273 = tensor.empty() : tensor<1x384x128xf32>
    %3274 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3272, %cst_62 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3273 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3275 = tensor.empty() : tensor<1x384x128xf32>
    %3276 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3274, %cst_61 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3275 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2315 = tensor.collapse_shape %3272 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3277 = tensor.empty() : tensor<384x512xf32>
    %3278 = linalg.fill ins(%cst_607 : f32) outs(%3277 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3279 = tensor.empty() : tensor<384x512xf32>
    %3280 = linalg.matmul ins(%collapsed_2315, %cst_511 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3278 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3281 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_862, %3280 : tensor<512xf32>, tensor<384x512xf32>) outs(%3279 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2316 = tensor.expand_shape %3281 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3282 = tensor.empty() : tensor<1x384x512xf32>
    %3283 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2316 : tensor<1x384x512xf32>) outs(%3282 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2317 = tensor.collapse_shape %3283 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3284 = tensor.empty() : tensor<384x128xf32>
    %3285 = linalg.fill ins(%cst_607 : f32) outs(%3284 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3286 = tensor.empty() : tensor<384x128xf32>
    %3287 = linalg.matmul ins(%collapsed_2317, %cst_512 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3285 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3288 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_863, %3287 : tensor<128xf32>, tensor<384x128xf32>) outs(%3286 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2318 = tensor.expand_shape %3288 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3289 = tensor.empty() : tensor<1x384x128xf32>
    %3290 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2318, %3276 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3289 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3291 = tensor.empty() : tensor<1x384x128xf32>
    %3292 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3290, %cst_60 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3291 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3293 = tensor.empty() : tensor<1x384x128xf32>
    %3294 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3292, %cst_59 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3293 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2319 = tensor.collapse_shape %3290 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3295 = tensor.empty() : tensor<384x512xf32>
    %3296 = linalg.fill ins(%cst_607 : f32) outs(%3295 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3297 = tensor.empty() : tensor<384x512xf32>
    %3298 = linalg.matmul ins(%collapsed_2319, %cst_513 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3296 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3299 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_864, %3298 : tensor<512xf32>, tensor<384x512xf32>) outs(%3297 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2320 = tensor.expand_shape %3299 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3300 = tensor.empty() : tensor<1x384x512xf32>
    %3301 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2320 : tensor<1x384x512xf32>) outs(%3300 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2321 = tensor.collapse_shape %3301 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3302 = tensor.empty() : tensor<384x128xf32>
    %3303 = linalg.fill ins(%cst_607 : f32) outs(%3302 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3304 = tensor.empty() : tensor<384x128xf32>
    %3305 = linalg.matmul ins(%collapsed_2321, %cst_514 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3303 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3306 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_865, %3305 : tensor<128xf32>, tensor<384x128xf32>) outs(%3304 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2322 = tensor.expand_shape %3306 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3307 = tensor.empty() : tensor<1x384x128xf32>
    %3308 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2322, %3294 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3307 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2323 = tensor.collapse_shape %3308 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3309 = tensor.empty() : tensor<384x512xf32>
    %3310 = linalg.fill ins(%cst_607 : f32) outs(%3309 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3311 = tensor.empty() : tensor<384x512xf32>
    %3312 = linalg.matmul ins(%collapsed_2323, %cst_515 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3310 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3313 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_866, %3312 : tensor<512xf32>, tensor<384x512xf32>) outs(%3311 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2324 = tensor.expand_shape %3313 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3314 = tensor.empty() : tensor<1x384x512xf32>
    %3315 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2324, %3136 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3314 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %3316 = tensor.empty() : tensor<1x384x512xf32>
    %3317 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3315, %cst_58 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%3316 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %3318 = tensor.empty() : tensor<1x384x512xf32>
    %3319 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3317, %cst_57 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%3318 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2325 = tensor.collapse_shape %3315 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3320 = tensor.empty() : tensor<384x128xf32>
    %3321 = linalg.fill ins(%cst_607 : f32) outs(%3320 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3322 = tensor.empty() : tensor<384x128xf32>
    %3323 = linalg.matmul ins(%collapsed_2325, %cst_516 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3321 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3324 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_867, %3323 : tensor<128xf32>, tensor<384x128xf32>) outs(%3322 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2326 = tensor.expand_shape %3324 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_2327 = tensor.collapse_shape %3315 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3325 = tensor.empty() : tensor<384x128xf32>
    %3326 = linalg.fill ins(%cst_607 : f32) outs(%3325 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3327 = tensor.empty() : tensor<384x128xf32>
    %3328 = linalg.matmul ins(%collapsed_2327, %cst_517 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3326 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3329 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_868, %3328 : tensor<128xf32>, tensor<384x128xf32>) outs(%3327 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2328 = tensor.expand_shape %3329 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_2329 = tensor.collapse_shape %3319 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3330 = tensor.empty() : tensor<384x128xf32>
    %3331 = linalg.fill ins(%cst_607 : f32) outs(%3330 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3332 = tensor.empty() : tensor<384x128xf32>
    %3333 = linalg.matmul ins(%collapsed_2329, %cst_518 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3331 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3334 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %3333 : tensor<128xf32>, tensor<384x128xf32>) outs(%3332 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %3335 = tensor.empty() : tensor<384x128xf32>
    %3336 = linalg.fill ins(%cst_607 : f32) outs(%3335 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3337 = tensor.empty() : tensor<384x128xf32>
    %3338 = linalg.matmul ins(%3334, %cst_519 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3336 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3339 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_869, %3338 : tensor<128xf32>, tensor<384x128xf32>) outs(%3337 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2330 = tensor.expand_shape %3339 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3340 = tensor.empty() : tensor<384x128xf32>
    %3341 = linalg.fill ins(%cst_607 : f32) outs(%3340 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3342 = tensor.empty() : tensor<384x128xf32>
    %3343 = linalg.matmul ins(%3334, %cst_520 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3341 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3344 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_870, %3343 : tensor<128xf32>, tensor<384x128xf32>) outs(%3342 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2331 = tensor.expand_shape %3344 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3345 = tensor.empty() : tensor<1x4x384x32xf32>
    %3346 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2330 : tensor<1x384x4x32xf32>) outs(%3345 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %3347 = tensor.empty() : tensor<1x4x32x384xf32>
    %3348 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2331 : tensor<1x384x4x32xf32>) outs(%3347 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_2332 = tensor.collapse_shape %3346 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2333 = tensor.extract_slice %collapsed_2332[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2334 = tensor.extract_slice %collapsed_2332[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2335 = tensor.extract_slice %collapsed_2332[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2336 = tensor.extract_slice %collapsed_2332[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2337 = tensor.collapse_shape %3348 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2338 = tensor.extract_slice %collapsed_2337[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2339 = tensor.extract_slice %collapsed_2337[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2340 = tensor.extract_slice %collapsed_2337[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2341 = tensor.extract_slice %collapsed_2337[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_2342 = tensor.collapse_shape %extracted_slice_2338 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2343 = tensor.collapse_shape %extracted_slice_2339 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2344 = tensor.collapse_shape %extracted_slice_2340 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2345 = tensor.collapse_shape %extracted_slice_2341 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2346 = tensor.collapse_shape %extracted_slice_2333 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3349 = tensor.empty() : tensor<384x384xf32>
    %3350 = linalg.fill ins(%cst_607 : f32) outs(%3349 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3351 = tensor.empty() : tensor<384x384xf32>
    %3352 = linalg.matmul ins(%collapsed_2346, %collapsed_2342 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3350 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3353 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3352 : tensor<384xf32>, tensor<384x384xf32>) outs(%3351 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2347 = tensor.collapse_shape %extracted_slice_2334 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3354 = tensor.empty() : tensor<384x384xf32>
    %3355 = linalg.fill ins(%cst_607 : f32) outs(%3354 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3356 = tensor.empty() : tensor<384x384xf32>
    %3357 = linalg.matmul ins(%collapsed_2347, %collapsed_2343 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3355 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3358 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3357 : tensor<384xf32>, tensor<384x384xf32>) outs(%3356 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2348 = tensor.collapse_shape %extracted_slice_2335 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3359 = tensor.empty() : tensor<384x384xf32>
    %3360 = linalg.fill ins(%cst_607 : f32) outs(%3359 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3361 = tensor.empty() : tensor<384x384xf32>
    %3362 = linalg.matmul ins(%collapsed_2348, %collapsed_2344 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3360 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3363 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3362 : tensor<384xf32>, tensor<384x384xf32>) outs(%3361 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2349 = tensor.collapse_shape %extracted_slice_2336 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3364 = tensor.empty() : tensor<384x384xf32>
    %3365 = linalg.fill ins(%cst_607 : f32) outs(%3364 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3366 = tensor.empty() : tensor<384x384xf32>
    %3367 = linalg.matmul ins(%collapsed_2349, %collapsed_2345 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3365 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3368 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3367 : tensor<384xf32>, tensor<384x384xf32>) outs(%3366 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %3369 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2350 = tensor.insert_slice %3353 into %3369[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2351 = tensor.insert_slice %3358 into %inserted_slice_2350[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2352 = tensor.insert_slice %3363 into %inserted_slice_2351[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2353 = tensor.insert_slice %3368 into %inserted_slice_2352[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2354 = tensor.expand_shape %inserted_slice_2353 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %3370 = tensor.empty() : tensor<1x4x384x384xf32>
    %3371 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2354 : tensor<1x4x384x384xf32>) outs(%3370 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %3372 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2355 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %3373 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3371, %collapsed_2355 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%3372 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3374 = tensor.empty() : tensor<1x4x384xf32>
    %3375 = linalg.fill ins(%cst_241 : f32) outs(%3374 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3376 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3373 : tensor<1x4x384x384xf32>) outs(%3375 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %3377 = tensor.empty() : tensor<1x4x384x384xf32>
    %3378 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3373, %3376 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3377 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3379 = tensor.empty() : tensor<1x4x384x384xf32>
    %3380 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3378 : tensor<1x4x384x384xf32>) outs(%3379 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3381 = tensor.empty() : tensor<1x4x384xf32>
    %3382 = linalg.fill ins(%cst_607 : f32) outs(%3381 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3383 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3380 : tensor<1x4x384x384xf32>) outs(%3382 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_2356 = tensor.expand_shape %3383 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3384 = tensor.empty() : tensor<1x4x384x1xf32>
    %3385 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2356 : tensor<1x4x384x1xf32>) outs(%3384 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %3386 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2357 = tensor.collapse_shape %3385 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %3387 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3380, %collapsed_2357 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3386 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3388 = tensor.empty() : tensor<1x4x384x32xf32>
    %3389 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2326 : tensor<1x384x4x32xf32>) outs(%3388 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_2358 = tensor.collapse_shape %3387 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2359 = tensor.extract_slice %collapsed_2358[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2360 = tensor.extract_slice %collapsed_2358[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2361 = tensor.extract_slice %collapsed_2358[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2362 = tensor.extract_slice %collapsed_2358[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2363 = tensor.collapse_shape %3389 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2364 = tensor.extract_slice %collapsed_2363[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2365 = tensor.extract_slice %collapsed_2363[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2366 = tensor.extract_slice %collapsed_2363[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2367 = tensor.extract_slice %collapsed_2363[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2368 = tensor.collapse_shape %extracted_slice_2364 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2369 = tensor.collapse_shape %extracted_slice_2365 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2370 = tensor.collapse_shape %extracted_slice_2366 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2371 = tensor.collapse_shape %extracted_slice_2367 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2372 = tensor.collapse_shape %extracted_slice_2359 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3390 = tensor.empty() : tensor<384x32xf32>
    %3391 = linalg.fill ins(%cst_607 : f32) outs(%3390 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3392 = tensor.empty() : tensor<384x32xf32>
    %3393 = linalg.matmul ins(%collapsed_2372, %collapsed_2368 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3391 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3394 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3393 : tensor<32xf32>, tensor<384x32xf32>) outs(%3392 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2373 = tensor.collapse_shape %extracted_slice_2360 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3395 = tensor.empty() : tensor<384x32xf32>
    %3396 = linalg.fill ins(%cst_607 : f32) outs(%3395 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3397 = tensor.empty() : tensor<384x32xf32>
    %3398 = linalg.matmul ins(%collapsed_2373, %collapsed_2369 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3396 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3399 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3398 : tensor<32xf32>, tensor<384x32xf32>) outs(%3397 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2374 = tensor.collapse_shape %extracted_slice_2361 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3400 = tensor.empty() : tensor<384x32xf32>
    %3401 = linalg.fill ins(%cst_607 : f32) outs(%3400 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3402 = tensor.empty() : tensor<384x32xf32>
    %3403 = linalg.matmul ins(%collapsed_2374, %collapsed_2370 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3401 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3404 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3403 : tensor<32xf32>, tensor<384x32xf32>) outs(%3402 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2375 = tensor.collapse_shape %extracted_slice_2362 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3405 = tensor.empty() : tensor<384x32xf32>
    %3406 = linalg.fill ins(%cst_607 : f32) outs(%3405 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3407 = tensor.empty() : tensor<384x32xf32>
    %3408 = linalg.matmul ins(%collapsed_2375, %collapsed_2371 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3406 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3409 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3408 : tensor<32xf32>, tensor<384x32xf32>) outs(%3407 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %3410 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2376 = tensor.insert_slice %3394 into %3410[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2377 = tensor.insert_slice %3399 into %inserted_slice_2376[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2378 = tensor.insert_slice %3404 into %inserted_slice_2377[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2379 = tensor.insert_slice %3409 into %inserted_slice_2378[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2380 = tensor.expand_shape %inserted_slice_2379 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %3411 = tensor.empty() : tensor<1x384x4x32xf32>
    %3412 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2380 : tensor<1x4x384x32xf32>) outs(%3411 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2381 = tensor.collapse_shape %3412 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %3413 = tensor.empty() : tensor<384x128xf32>
    %3414 = linalg.fill ins(%cst_607 : f32) outs(%3413 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3415 = tensor.empty() : tensor<384x128xf32>
    %3416 = linalg.matmul ins(%collapsed_2381, %cst_521 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3414 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3417 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_871, %3416 : tensor<128xf32>, tensor<384x128xf32>) outs(%3415 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2382 = tensor.expand_shape %3417 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3418 = tensor.empty() : tensor<1x384x128xf32>
    %3419 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2382, %expanded_2328 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3418 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3420 = tensor.empty() : tensor<1x384x128xf32>
    %3421 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3419, %cst_56 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3420 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3422 = tensor.empty() : tensor<1x384x128xf32>
    %3423 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3421, %cst_55 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3422 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2383 = tensor.collapse_shape %3419 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3424 = tensor.empty() : tensor<384x512xf32>
    %3425 = linalg.fill ins(%cst_607 : f32) outs(%3424 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3426 = tensor.empty() : tensor<384x512xf32>
    %3427 = linalg.matmul ins(%collapsed_2383, %cst_522 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3425 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3428 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_872, %3427 : tensor<512xf32>, tensor<384x512xf32>) outs(%3426 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2384 = tensor.expand_shape %3428 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3429 = tensor.empty() : tensor<1x384x512xf32>
    %3430 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2384 : tensor<1x384x512xf32>) outs(%3429 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2385 = tensor.collapse_shape %3430 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3431 = tensor.empty() : tensor<384x128xf32>
    %3432 = linalg.fill ins(%cst_607 : f32) outs(%3431 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3433 = tensor.empty() : tensor<384x128xf32>
    %3434 = linalg.matmul ins(%collapsed_2385, %cst_523 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3432 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3435 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_873, %3434 : tensor<128xf32>, tensor<384x128xf32>) outs(%3433 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2386 = tensor.expand_shape %3435 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3436 = tensor.empty() : tensor<1x384x128xf32>
    %3437 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2386, %3423 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3436 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3438 = tensor.empty() : tensor<1x384x128xf32>
    %3439 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3437, %cst_54 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3438 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3440 = tensor.empty() : tensor<1x384x128xf32>
    %3441 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3439, %cst_53 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3440 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2387 = tensor.collapse_shape %3437 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3442 = tensor.empty() : tensor<384x512xf32>
    %3443 = linalg.fill ins(%cst_607 : f32) outs(%3442 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3444 = tensor.empty() : tensor<384x512xf32>
    %3445 = linalg.matmul ins(%collapsed_2387, %cst_524 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3443 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3446 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_874, %3445 : tensor<512xf32>, tensor<384x512xf32>) outs(%3444 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2388 = tensor.expand_shape %3446 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3447 = tensor.empty() : tensor<1x384x512xf32>
    %3448 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2388 : tensor<1x384x512xf32>) outs(%3447 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2389 = tensor.collapse_shape %3448 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3449 = tensor.empty() : tensor<384x128xf32>
    %3450 = linalg.fill ins(%cst_607 : f32) outs(%3449 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3451 = tensor.empty() : tensor<384x128xf32>
    %3452 = linalg.matmul ins(%collapsed_2389, %cst_525 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3450 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3453 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_875, %3452 : tensor<128xf32>, tensor<384x128xf32>) outs(%3451 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2390 = tensor.expand_shape %3453 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3454 = tensor.empty() : tensor<1x384x128xf32>
    %3455 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2390, %3441 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3454 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3456 = tensor.empty() : tensor<1x384x128xf32>
    %3457 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3455, %cst_52 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3456 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3458 = tensor.empty() : tensor<1x384x128xf32>
    %3459 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3457, %cst_51 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3458 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2391 = tensor.collapse_shape %3455 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3460 = tensor.empty() : tensor<384x512xf32>
    %3461 = linalg.fill ins(%cst_607 : f32) outs(%3460 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3462 = tensor.empty() : tensor<384x512xf32>
    %3463 = linalg.matmul ins(%collapsed_2391, %cst_526 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3461 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3464 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_876, %3463 : tensor<512xf32>, tensor<384x512xf32>) outs(%3462 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2392 = tensor.expand_shape %3464 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3465 = tensor.empty() : tensor<1x384x512xf32>
    %3466 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2392 : tensor<1x384x512xf32>) outs(%3465 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2393 = tensor.collapse_shape %3466 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3467 = tensor.empty() : tensor<384x128xf32>
    %3468 = linalg.fill ins(%cst_607 : f32) outs(%3467 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3469 = tensor.empty() : tensor<384x128xf32>
    %3470 = linalg.matmul ins(%collapsed_2393, %cst_527 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3468 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3471 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_877, %3470 : tensor<128xf32>, tensor<384x128xf32>) outs(%3469 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2394 = tensor.expand_shape %3471 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3472 = tensor.empty() : tensor<1x384x128xf32>
    %3473 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2394, %3459 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3472 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3474 = tensor.empty() : tensor<1x384x128xf32>
    %3475 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3473, %cst_50 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3474 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3476 = tensor.empty() : tensor<1x384x128xf32>
    %3477 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3475, %cst_49 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3476 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2395 = tensor.collapse_shape %3473 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3478 = tensor.empty() : tensor<384x512xf32>
    %3479 = linalg.fill ins(%cst_607 : f32) outs(%3478 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3480 = tensor.empty() : tensor<384x512xf32>
    %3481 = linalg.matmul ins(%collapsed_2395, %cst_528 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3479 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3482 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_878, %3481 : tensor<512xf32>, tensor<384x512xf32>) outs(%3480 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2396 = tensor.expand_shape %3482 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3483 = tensor.empty() : tensor<1x384x512xf32>
    %3484 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2396 : tensor<1x384x512xf32>) outs(%3483 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2397 = tensor.collapse_shape %3484 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3485 = tensor.empty() : tensor<384x128xf32>
    %3486 = linalg.fill ins(%cst_607 : f32) outs(%3485 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3487 = tensor.empty() : tensor<384x128xf32>
    %3488 = linalg.matmul ins(%collapsed_2397, %cst_529 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3486 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3489 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_879, %3488 : tensor<128xf32>, tensor<384x128xf32>) outs(%3487 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2398 = tensor.expand_shape %3489 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3490 = tensor.empty() : tensor<1x384x128xf32>
    %3491 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2398, %3477 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3490 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2399 = tensor.collapse_shape %3491 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3492 = tensor.empty() : tensor<384x512xf32>
    %3493 = linalg.fill ins(%cst_607 : f32) outs(%3492 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3494 = tensor.empty() : tensor<384x512xf32>
    %3495 = linalg.matmul ins(%collapsed_2399, %cst_530 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3493 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3496 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_880, %3495 : tensor<512xf32>, tensor<384x512xf32>) outs(%3494 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2400 = tensor.expand_shape %3496 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3497 = tensor.empty() : tensor<1x384x512xf32>
    %3498 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2400, %3319 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3497 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %3499 = tensor.empty() : tensor<1x384x512xf32>
    %3500 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3498, %cst_48 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%3499 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %3501 = tensor.empty() : tensor<1x384x512xf32>
    %3502 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3500, %cst_47 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%3501 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2401 = tensor.collapse_shape %3498 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3503 = tensor.empty() : tensor<384x128xf32>
    %3504 = linalg.fill ins(%cst_607 : f32) outs(%3503 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3505 = tensor.empty() : tensor<384x128xf32>
    %3506 = linalg.matmul ins(%collapsed_2401, %cst_531 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3504 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3507 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_881, %3506 : tensor<128xf32>, tensor<384x128xf32>) outs(%3505 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2402 = tensor.expand_shape %3507 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_2403 = tensor.collapse_shape %3498 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3508 = tensor.empty() : tensor<384x128xf32>
    %3509 = linalg.fill ins(%cst_607 : f32) outs(%3508 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3510 = tensor.empty() : tensor<384x128xf32>
    %3511 = linalg.matmul ins(%collapsed_2403, %cst_532 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3509 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3512 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_882, %3511 : tensor<128xf32>, tensor<384x128xf32>) outs(%3510 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2404 = tensor.expand_shape %3512 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_2405 = tensor.collapse_shape %3502 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3513 = tensor.empty() : tensor<384x128xf32>
    %3514 = linalg.fill ins(%cst_607 : f32) outs(%3513 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3515 = tensor.empty() : tensor<384x128xf32>
    %3516 = linalg.matmul ins(%collapsed_2405, %cst_533 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3514 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3517 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %3516 : tensor<128xf32>, tensor<384x128xf32>) outs(%3515 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %3518 = tensor.empty() : tensor<384x128xf32>
    %3519 = linalg.fill ins(%cst_607 : f32) outs(%3518 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3520 = tensor.empty() : tensor<384x128xf32>
    %3521 = linalg.matmul ins(%3517, %cst_534 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3519 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3522 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_883, %3521 : tensor<128xf32>, tensor<384x128xf32>) outs(%3520 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2406 = tensor.expand_shape %3522 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3523 = tensor.empty() : tensor<384x128xf32>
    %3524 = linalg.fill ins(%cst_607 : f32) outs(%3523 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3525 = tensor.empty() : tensor<384x128xf32>
    %3526 = linalg.matmul ins(%3517, %cst_535 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3524 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3527 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_884, %3526 : tensor<128xf32>, tensor<384x128xf32>) outs(%3525 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2407 = tensor.expand_shape %3527 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3528 = tensor.empty() : tensor<1x4x384x32xf32>
    %3529 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2406 : tensor<1x384x4x32xf32>) outs(%3528 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %3530 = tensor.empty() : tensor<1x4x32x384xf32>
    %3531 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2407 : tensor<1x384x4x32xf32>) outs(%3530 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_2408 = tensor.collapse_shape %3529 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2409 = tensor.extract_slice %collapsed_2408[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2410 = tensor.extract_slice %collapsed_2408[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2411 = tensor.extract_slice %collapsed_2408[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2412 = tensor.extract_slice %collapsed_2408[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2413 = tensor.collapse_shape %3531 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2414 = tensor.extract_slice %collapsed_2413[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2415 = tensor.extract_slice %collapsed_2413[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2416 = tensor.extract_slice %collapsed_2413[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2417 = tensor.extract_slice %collapsed_2413[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_2418 = tensor.collapse_shape %extracted_slice_2414 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2419 = tensor.collapse_shape %extracted_slice_2415 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2420 = tensor.collapse_shape %extracted_slice_2416 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2421 = tensor.collapse_shape %extracted_slice_2417 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2422 = tensor.collapse_shape %extracted_slice_2409 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3532 = tensor.empty() : tensor<384x384xf32>
    %3533 = linalg.fill ins(%cst_607 : f32) outs(%3532 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3534 = tensor.empty() : tensor<384x384xf32>
    %3535 = linalg.matmul ins(%collapsed_2422, %collapsed_2418 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3533 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3536 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3535 : tensor<384xf32>, tensor<384x384xf32>) outs(%3534 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2423 = tensor.collapse_shape %extracted_slice_2410 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3537 = tensor.empty() : tensor<384x384xf32>
    %3538 = linalg.fill ins(%cst_607 : f32) outs(%3537 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3539 = tensor.empty() : tensor<384x384xf32>
    %3540 = linalg.matmul ins(%collapsed_2423, %collapsed_2419 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3538 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3541 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3540 : tensor<384xf32>, tensor<384x384xf32>) outs(%3539 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2424 = tensor.collapse_shape %extracted_slice_2411 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3542 = tensor.empty() : tensor<384x384xf32>
    %3543 = linalg.fill ins(%cst_607 : f32) outs(%3542 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3544 = tensor.empty() : tensor<384x384xf32>
    %3545 = linalg.matmul ins(%collapsed_2424, %collapsed_2420 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3543 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3546 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3545 : tensor<384xf32>, tensor<384x384xf32>) outs(%3544 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2425 = tensor.collapse_shape %extracted_slice_2412 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3547 = tensor.empty() : tensor<384x384xf32>
    %3548 = linalg.fill ins(%cst_607 : f32) outs(%3547 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3549 = tensor.empty() : tensor<384x384xf32>
    %3550 = linalg.matmul ins(%collapsed_2425, %collapsed_2421 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3548 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3551 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3550 : tensor<384xf32>, tensor<384x384xf32>) outs(%3549 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %3552 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2426 = tensor.insert_slice %3536 into %3552[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2427 = tensor.insert_slice %3541 into %inserted_slice_2426[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2428 = tensor.insert_slice %3546 into %inserted_slice_2427[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2429 = tensor.insert_slice %3551 into %inserted_slice_2428[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2430 = tensor.expand_shape %inserted_slice_2429 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %3553 = tensor.empty() : tensor<1x4x384x384xf32>
    %3554 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2430 : tensor<1x4x384x384xf32>) outs(%3553 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %3555 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2431 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %3556 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3554, %collapsed_2431 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%3555 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3557 = tensor.empty() : tensor<1x4x384xf32>
    %3558 = linalg.fill ins(%cst_241 : f32) outs(%3557 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3559 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3556 : tensor<1x4x384x384xf32>) outs(%3558 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %3560 = tensor.empty() : tensor<1x4x384x384xf32>
    %3561 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3556, %3559 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3560 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3562 = tensor.empty() : tensor<1x4x384x384xf32>
    %3563 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3561 : tensor<1x4x384x384xf32>) outs(%3562 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3564 = tensor.empty() : tensor<1x4x384xf32>
    %3565 = linalg.fill ins(%cst_607 : f32) outs(%3564 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3566 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3563 : tensor<1x4x384x384xf32>) outs(%3565 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_2432 = tensor.expand_shape %3566 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3567 = tensor.empty() : tensor<1x4x384x1xf32>
    %3568 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2432 : tensor<1x4x384x1xf32>) outs(%3567 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %3569 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2433 = tensor.collapse_shape %3568 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %3570 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3563, %collapsed_2433 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3569 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3571 = tensor.empty() : tensor<1x4x384x32xf32>
    %3572 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2402 : tensor<1x384x4x32xf32>) outs(%3571 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_2434 = tensor.collapse_shape %3570 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2435 = tensor.extract_slice %collapsed_2434[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2436 = tensor.extract_slice %collapsed_2434[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2437 = tensor.extract_slice %collapsed_2434[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2438 = tensor.extract_slice %collapsed_2434[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2439 = tensor.collapse_shape %3572 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2440 = tensor.extract_slice %collapsed_2439[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2441 = tensor.extract_slice %collapsed_2439[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2442 = tensor.extract_slice %collapsed_2439[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2443 = tensor.extract_slice %collapsed_2439[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2444 = tensor.collapse_shape %extracted_slice_2440 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2445 = tensor.collapse_shape %extracted_slice_2441 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2446 = tensor.collapse_shape %extracted_slice_2442 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2447 = tensor.collapse_shape %extracted_slice_2443 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2448 = tensor.collapse_shape %extracted_slice_2435 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3573 = tensor.empty() : tensor<384x32xf32>
    %3574 = linalg.fill ins(%cst_607 : f32) outs(%3573 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3575 = tensor.empty() : tensor<384x32xf32>
    %3576 = linalg.matmul ins(%collapsed_2448, %collapsed_2444 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3574 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3577 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3576 : tensor<32xf32>, tensor<384x32xf32>) outs(%3575 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2449 = tensor.collapse_shape %extracted_slice_2436 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3578 = tensor.empty() : tensor<384x32xf32>
    %3579 = linalg.fill ins(%cst_607 : f32) outs(%3578 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3580 = tensor.empty() : tensor<384x32xf32>
    %3581 = linalg.matmul ins(%collapsed_2449, %collapsed_2445 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3579 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3582 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3581 : tensor<32xf32>, tensor<384x32xf32>) outs(%3580 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2450 = tensor.collapse_shape %extracted_slice_2437 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3583 = tensor.empty() : tensor<384x32xf32>
    %3584 = linalg.fill ins(%cst_607 : f32) outs(%3583 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3585 = tensor.empty() : tensor<384x32xf32>
    %3586 = linalg.matmul ins(%collapsed_2450, %collapsed_2446 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3584 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3587 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3586 : tensor<32xf32>, tensor<384x32xf32>) outs(%3585 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2451 = tensor.collapse_shape %extracted_slice_2438 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3588 = tensor.empty() : tensor<384x32xf32>
    %3589 = linalg.fill ins(%cst_607 : f32) outs(%3588 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3590 = tensor.empty() : tensor<384x32xf32>
    %3591 = linalg.matmul ins(%collapsed_2451, %collapsed_2447 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3589 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3592 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3591 : tensor<32xf32>, tensor<384x32xf32>) outs(%3590 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %3593 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2452 = tensor.insert_slice %3577 into %3593[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2453 = tensor.insert_slice %3582 into %inserted_slice_2452[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2454 = tensor.insert_slice %3587 into %inserted_slice_2453[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2455 = tensor.insert_slice %3592 into %inserted_slice_2454[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2456 = tensor.expand_shape %inserted_slice_2455 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %3594 = tensor.empty() : tensor<1x384x4x32xf32>
    %3595 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2456 : tensor<1x4x384x32xf32>) outs(%3594 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2457 = tensor.collapse_shape %3595 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %3596 = tensor.empty() : tensor<384x128xf32>
    %3597 = linalg.fill ins(%cst_607 : f32) outs(%3596 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3598 = tensor.empty() : tensor<384x128xf32>
    %3599 = linalg.matmul ins(%collapsed_2457, %cst_536 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3597 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3600 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_885, %3599 : tensor<128xf32>, tensor<384x128xf32>) outs(%3598 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2458 = tensor.expand_shape %3600 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3601 = tensor.empty() : tensor<1x384x128xf32>
    %3602 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2458, %expanded_2404 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3601 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3603 = tensor.empty() : tensor<1x384x128xf32>
    %3604 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3602, %cst_46 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3603 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3605 = tensor.empty() : tensor<1x384x128xf32>
    %3606 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3604, %cst_45 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3605 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2459 = tensor.collapse_shape %3602 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3607 = tensor.empty() : tensor<384x512xf32>
    %3608 = linalg.fill ins(%cst_607 : f32) outs(%3607 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3609 = tensor.empty() : tensor<384x512xf32>
    %3610 = linalg.matmul ins(%collapsed_2459, %cst_537 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3608 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3611 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_886, %3610 : tensor<512xf32>, tensor<384x512xf32>) outs(%3609 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2460 = tensor.expand_shape %3611 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3612 = tensor.empty() : tensor<1x384x512xf32>
    %3613 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2460 : tensor<1x384x512xf32>) outs(%3612 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2461 = tensor.collapse_shape %3613 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3614 = tensor.empty() : tensor<384x128xf32>
    %3615 = linalg.fill ins(%cst_607 : f32) outs(%3614 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3616 = tensor.empty() : tensor<384x128xf32>
    %3617 = linalg.matmul ins(%collapsed_2461, %cst_538 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3615 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3618 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_887, %3617 : tensor<128xf32>, tensor<384x128xf32>) outs(%3616 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2462 = tensor.expand_shape %3618 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3619 = tensor.empty() : tensor<1x384x128xf32>
    %3620 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2462, %3606 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3619 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3621 = tensor.empty() : tensor<1x384x128xf32>
    %3622 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3620, %cst_44 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3621 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3623 = tensor.empty() : tensor<1x384x128xf32>
    %3624 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3622, %cst_43 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3623 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2463 = tensor.collapse_shape %3620 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3625 = tensor.empty() : tensor<384x512xf32>
    %3626 = linalg.fill ins(%cst_607 : f32) outs(%3625 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3627 = tensor.empty() : tensor<384x512xf32>
    %3628 = linalg.matmul ins(%collapsed_2463, %cst_539 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3626 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3629 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_888, %3628 : tensor<512xf32>, tensor<384x512xf32>) outs(%3627 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2464 = tensor.expand_shape %3629 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3630 = tensor.empty() : tensor<1x384x512xf32>
    %3631 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2464 : tensor<1x384x512xf32>) outs(%3630 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2465 = tensor.collapse_shape %3631 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3632 = tensor.empty() : tensor<384x128xf32>
    %3633 = linalg.fill ins(%cst_607 : f32) outs(%3632 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3634 = tensor.empty() : tensor<384x128xf32>
    %3635 = linalg.matmul ins(%collapsed_2465, %cst_540 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3633 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3636 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_889, %3635 : tensor<128xf32>, tensor<384x128xf32>) outs(%3634 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2466 = tensor.expand_shape %3636 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3637 = tensor.empty() : tensor<1x384x128xf32>
    %3638 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2466, %3624 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3637 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3639 = tensor.empty() : tensor<1x384x128xf32>
    %3640 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3638, %cst_42 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3639 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3641 = tensor.empty() : tensor<1x384x128xf32>
    %3642 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3640, %cst_41 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3641 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2467 = tensor.collapse_shape %3638 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3643 = tensor.empty() : tensor<384x512xf32>
    %3644 = linalg.fill ins(%cst_607 : f32) outs(%3643 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3645 = tensor.empty() : tensor<384x512xf32>
    %3646 = linalg.matmul ins(%collapsed_2467, %cst_541 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3644 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3647 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_890, %3646 : tensor<512xf32>, tensor<384x512xf32>) outs(%3645 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2468 = tensor.expand_shape %3647 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3648 = tensor.empty() : tensor<1x384x512xf32>
    %3649 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2468 : tensor<1x384x512xf32>) outs(%3648 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2469 = tensor.collapse_shape %3649 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3650 = tensor.empty() : tensor<384x128xf32>
    %3651 = linalg.fill ins(%cst_607 : f32) outs(%3650 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3652 = tensor.empty() : tensor<384x128xf32>
    %3653 = linalg.matmul ins(%collapsed_2469, %cst_542 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3651 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3654 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_891, %3653 : tensor<128xf32>, tensor<384x128xf32>) outs(%3652 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2470 = tensor.expand_shape %3654 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3655 = tensor.empty() : tensor<1x384x128xf32>
    %3656 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2470, %3642 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3655 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3657 = tensor.empty() : tensor<1x384x128xf32>
    %3658 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3656, %cst_40 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3657 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3659 = tensor.empty() : tensor<1x384x128xf32>
    %3660 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3658, %cst_39 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3659 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2471 = tensor.collapse_shape %3656 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3661 = tensor.empty() : tensor<384x512xf32>
    %3662 = linalg.fill ins(%cst_607 : f32) outs(%3661 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3663 = tensor.empty() : tensor<384x512xf32>
    %3664 = linalg.matmul ins(%collapsed_2471, %cst_543 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3662 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3665 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_892, %3664 : tensor<512xf32>, tensor<384x512xf32>) outs(%3663 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2472 = tensor.expand_shape %3665 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3666 = tensor.empty() : tensor<1x384x512xf32>
    %3667 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2472 : tensor<1x384x512xf32>) outs(%3666 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2473 = tensor.collapse_shape %3667 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3668 = tensor.empty() : tensor<384x128xf32>
    %3669 = linalg.fill ins(%cst_607 : f32) outs(%3668 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3670 = tensor.empty() : tensor<384x128xf32>
    %3671 = linalg.matmul ins(%collapsed_2473, %cst_544 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3669 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3672 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_893, %3671 : tensor<128xf32>, tensor<384x128xf32>) outs(%3670 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2474 = tensor.expand_shape %3672 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3673 = tensor.empty() : tensor<1x384x128xf32>
    %3674 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2474, %3660 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3673 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2475 = tensor.collapse_shape %3674 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3675 = tensor.empty() : tensor<384x512xf32>
    %3676 = linalg.fill ins(%cst_607 : f32) outs(%3675 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3677 = tensor.empty() : tensor<384x512xf32>
    %3678 = linalg.matmul ins(%collapsed_2475, %cst_545 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3676 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3679 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_894, %3678 : tensor<512xf32>, tensor<384x512xf32>) outs(%3677 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2476 = tensor.expand_shape %3679 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3680 = tensor.empty() : tensor<1x384x512xf32>
    %3681 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2476, %3502 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3680 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %3682 = tensor.empty() : tensor<1x384x512xf32>
    %3683 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3681, %cst_38 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%3682 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %3684 = tensor.empty() : tensor<1x384x512xf32>
    %3685 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3683, %cst_37 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%3684 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2477 = tensor.collapse_shape %3681 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3686 = tensor.empty() : tensor<384x128xf32>
    %3687 = linalg.fill ins(%cst_607 : f32) outs(%3686 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3688 = tensor.empty() : tensor<384x128xf32>
    %3689 = linalg.matmul ins(%collapsed_2477, %cst_546 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3687 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3690 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_895, %3689 : tensor<128xf32>, tensor<384x128xf32>) outs(%3688 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2478 = tensor.expand_shape %3690 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_2479 = tensor.collapse_shape %3681 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3691 = tensor.empty() : tensor<384x128xf32>
    %3692 = linalg.fill ins(%cst_607 : f32) outs(%3691 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3693 = tensor.empty() : tensor<384x128xf32>
    %3694 = linalg.matmul ins(%collapsed_2479, %cst_547 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3692 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3695 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_896, %3694 : tensor<128xf32>, tensor<384x128xf32>) outs(%3693 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2480 = tensor.expand_shape %3695 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_2481 = tensor.collapse_shape %3685 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3696 = tensor.empty() : tensor<384x128xf32>
    %3697 = linalg.fill ins(%cst_607 : f32) outs(%3696 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3698 = tensor.empty() : tensor<384x128xf32>
    %3699 = linalg.matmul ins(%collapsed_2481, %cst_548 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3697 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3700 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %3699 : tensor<128xf32>, tensor<384x128xf32>) outs(%3698 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %3701 = tensor.empty() : tensor<384x128xf32>
    %3702 = linalg.fill ins(%cst_607 : f32) outs(%3701 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3703 = tensor.empty() : tensor<384x128xf32>
    %3704 = linalg.matmul ins(%3700, %cst_549 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3702 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3705 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_897, %3704 : tensor<128xf32>, tensor<384x128xf32>) outs(%3703 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2482 = tensor.expand_shape %3705 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3706 = tensor.empty() : tensor<384x128xf32>
    %3707 = linalg.fill ins(%cst_607 : f32) outs(%3706 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3708 = tensor.empty() : tensor<384x128xf32>
    %3709 = linalg.matmul ins(%3700, %cst_550 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3707 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3710 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_898, %3709 : tensor<128xf32>, tensor<384x128xf32>) outs(%3708 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2483 = tensor.expand_shape %3710 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3711 = tensor.empty() : tensor<1x4x384x32xf32>
    %3712 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2482 : tensor<1x384x4x32xf32>) outs(%3711 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %3713 = tensor.empty() : tensor<1x4x32x384xf32>
    %3714 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2483 : tensor<1x384x4x32xf32>) outs(%3713 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_2484 = tensor.collapse_shape %3712 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2485 = tensor.extract_slice %collapsed_2484[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2486 = tensor.extract_slice %collapsed_2484[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2487 = tensor.extract_slice %collapsed_2484[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2488 = tensor.extract_slice %collapsed_2484[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2489 = tensor.collapse_shape %3714 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2490 = tensor.extract_slice %collapsed_2489[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2491 = tensor.extract_slice %collapsed_2489[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2492 = tensor.extract_slice %collapsed_2489[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2493 = tensor.extract_slice %collapsed_2489[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_2494 = tensor.collapse_shape %extracted_slice_2490 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2495 = tensor.collapse_shape %extracted_slice_2491 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2496 = tensor.collapse_shape %extracted_slice_2492 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2497 = tensor.collapse_shape %extracted_slice_2493 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2498 = tensor.collapse_shape %extracted_slice_2485 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3715 = tensor.empty() : tensor<384x384xf32>
    %3716 = linalg.fill ins(%cst_607 : f32) outs(%3715 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3717 = tensor.empty() : tensor<384x384xf32>
    %3718 = linalg.matmul ins(%collapsed_2498, %collapsed_2494 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3716 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3719 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3718 : tensor<384xf32>, tensor<384x384xf32>) outs(%3717 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2499 = tensor.collapse_shape %extracted_slice_2486 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3720 = tensor.empty() : tensor<384x384xf32>
    %3721 = linalg.fill ins(%cst_607 : f32) outs(%3720 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3722 = tensor.empty() : tensor<384x384xf32>
    %3723 = linalg.matmul ins(%collapsed_2499, %collapsed_2495 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3721 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3724 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3723 : tensor<384xf32>, tensor<384x384xf32>) outs(%3722 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2500 = tensor.collapse_shape %extracted_slice_2487 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3725 = tensor.empty() : tensor<384x384xf32>
    %3726 = linalg.fill ins(%cst_607 : f32) outs(%3725 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3727 = tensor.empty() : tensor<384x384xf32>
    %3728 = linalg.matmul ins(%collapsed_2500, %collapsed_2496 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3726 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3729 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3728 : tensor<384xf32>, tensor<384x384xf32>) outs(%3727 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2501 = tensor.collapse_shape %extracted_slice_2488 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3730 = tensor.empty() : tensor<384x384xf32>
    %3731 = linalg.fill ins(%cst_607 : f32) outs(%3730 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3732 = tensor.empty() : tensor<384x384xf32>
    %3733 = linalg.matmul ins(%collapsed_2501, %collapsed_2497 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3731 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3734 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3733 : tensor<384xf32>, tensor<384x384xf32>) outs(%3732 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %3735 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2502 = tensor.insert_slice %3719 into %3735[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2503 = tensor.insert_slice %3724 into %inserted_slice_2502[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2504 = tensor.insert_slice %3729 into %inserted_slice_2503[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2505 = tensor.insert_slice %3734 into %inserted_slice_2504[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2506 = tensor.expand_shape %inserted_slice_2505 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %3736 = tensor.empty() : tensor<1x4x384x384xf32>
    %3737 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2506 : tensor<1x4x384x384xf32>) outs(%3736 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %3738 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2507 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %3739 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3737, %collapsed_2507 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%3738 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3740 = tensor.empty() : tensor<1x4x384xf32>
    %3741 = linalg.fill ins(%cst_241 : f32) outs(%3740 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3742 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3739 : tensor<1x4x384x384xf32>) outs(%3741 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %3743 = tensor.empty() : tensor<1x4x384x384xf32>
    %3744 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3739, %3742 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3743 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3745 = tensor.empty() : tensor<1x4x384x384xf32>
    %3746 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3744 : tensor<1x4x384x384xf32>) outs(%3745 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3747 = tensor.empty() : tensor<1x4x384xf32>
    %3748 = linalg.fill ins(%cst_607 : f32) outs(%3747 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3749 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3746 : tensor<1x4x384x384xf32>) outs(%3748 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_2508 = tensor.expand_shape %3749 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3750 = tensor.empty() : tensor<1x4x384x1xf32>
    %3751 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2508 : tensor<1x4x384x1xf32>) outs(%3750 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %3752 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2509 = tensor.collapse_shape %3751 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %3753 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3746, %collapsed_2509 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3752 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3754 = tensor.empty() : tensor<1x4x384x32xf32>
    %3755 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2478 : tensor<1x384x4x32xf32>) outs(%3754 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_2510 = tensor.collapse_shape %3753 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2511 = tensor.extract_slice %collapsed_2510[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2512 = tensor.extract_slice %collapsed_2510[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2513 = tensor.extract_slice %collapsed_2510[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2514 = tensor.extract_slice %collapsed_2510[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2515 = tensor.collapse_shape %3755 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2516 = tensor.extract_slice %collapsed_2515[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2517 = tensor.extract_slice %collapsed_2515[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2518 = tensor.extract_slice %collapsed_2515[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2519 = tensor.extract_slice %collapsed_2515[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2520 = tensor.collapse_shape %extracted_slice_2516 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2521 = tensor.collapse_shape %extracted_slice_2517 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2522 = tensor.collapse_shape %extracted_slice_2518 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2523 = tensor.collapse_shape %extracted_slice_2519 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2524 = tensor.collapse_shape %extracted_slice_2511 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3756 = tensor.empty() : tensor<384x32xf32>
    %3757 = linalg.fill ins(%cst_607 : f32) outs(%3756 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3758 = tensor.empty() : tensor<384x32xf32>
    %3759 = linalg.matmul ins(%collapsed_2524, %collapsed_2520 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3757 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3760 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3759 : tensor<32xf32>, tensor<384x32xf32>) outs(%3758 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2525 = tensor.collapse_shape %extracted_slice_2512 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3761 = tensor.empty() : tensor<384x32xf32>
    %3762 = linalg.fill ins(%cst_607 : f32) outs(%3761 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3763 = tensor.empty() : tensor<384x32xf32>
    %3764 = linalg.matmul ins(%collapsed_2525, %collapsed_2521 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3762 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3765 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3764 : tensor<32xf32>, tensor<384x32xf32>) outs(%3763 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2526 = tensor.collapse_shape %extracted_slice_2513 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3766 = tensor.empty() : tensor<384x32xf32>
    %3767 = linalg.fill ins(%cst_607 : f32) outs(%3766 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3768 = tensor.empty() : tensor<384x32xf32>
    %3769 = linalg.matmul ins(%collapsed_2526, %collapsed_2522 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3767 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3770 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3769 : tensor<32xf32>, tensor<384x32xf32>) outs(%3768 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2527 = tensor.collapse_shape %extracted_slice_2514 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3771 = tensor.empty() : tensor<384x32xf32>
    %3772 = linalg.fill ins(%cst_607 : f32) outs(%3771 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3773 = tensor.empty() : tensor<384x32xf32>
    %3774 = linalg.matmul ins(%collapsed_2527, %collapsed_2523 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3772 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3775 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3774 : tensor<32xf32>, tensor<384x32xf32>) outs(%3773 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %3776 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2528 = tensor.insert_slice %3760 into %3776[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2529 = tensor.insert_slice %3765 into %inserted_slice_2528[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2530 = tensor.insert_slice %3770 into %inserted_slice_2529[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2531 = tensor.insert_slice %3775 into %inserted_slice_2530[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2532 = tensor.expand_shape %inserted_slice_2531 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %3777 = tensor.empty() : tensor<1x384x4x32xf32>
    %3778 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2532 : tensor<1x4x384x32xf32>) outs(%3777 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2533 = tensor.collapse_shape %3778 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %3779 = tensor.empty() : tensor<384x128xf32>
    %3780 = linalg.fill ins(%cst_607 : f32) outs(%3779 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3781 = tensor.empty() : tensor<384x128xf32>
    %3782 = linalg.matmul ins(%collapsed_2533, %cst_551 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3780 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3783 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_899, %3782 : tensor<128xf32>, tensor<384x128xf32>) outs(%3781 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2534 = tensor.expand_shape %3783 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3784 = tensor.empty() : tensor<1x384x128xf32>
    %3785 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2534, %expanded_2480 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3784 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3786 = tensor.empty() : tensor<1x384x128xf32>
    %3787 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3785, %cst_36 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3786 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3788 = tensor.empty() : tensor<1x384x128xf32>
    %3789 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3787, %cst_35 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3788 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2535 = tensor.collapse_shape %3785 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3790 = tensor.empty() : tensor<384x512xf32>
    %3791 = linalg.fill ins(%cst_607 : f32) outs(%3790 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3792 = tensor.empty() : tensor<384x512xf32>
    %3793 = linalg.matmul ins(%collapsed_2535, %cst_552 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3791 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3794 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_900, %3793 : tensor<512xf32>, tensor<384x512xf32>) outs(%3792 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2536 = tensor.expand_shape %3794 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3795 = tensor.empty() : tensor<1x384x512xf32>
    %3796 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2536 : tensor<1x384x512xf32>) outs(%3795 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2537 = tensor.collapse_shape %3796 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3797 = tensor.empty() : tensor<384x128xf32>
    %3798 = linalg.fill ins(%cst_607 : f32) outs(%3797 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3799 = tensor.empty() : tensor<384x128xf32>
    %3800 = linalg.matmul ins(%collapsed_2537, %cst_553 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3798 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3801 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_901, %3800 : tensor<128xf32>, tensor<384x128xf32>) outs(%3799 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2538 = tensor.expand_shape %3801 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3802 = tensor.empty() : tensor<1x384x128xf32>
    %3803 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2538, %3789 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3802 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3804 = tensor.empty() : tensor<1x384x128xf32>
    %3805 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3803, %cst_34 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3804 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3806 = tensor.empty() : tensor<1x384x128xf32>
    %3807 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3805, %cst_33 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3806 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2539 = tensor.collapse_shape %3803 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3808 = tensor.empty() : tensor<384x512xf32>
    %3809 = linalg.fill ins(%cst_607 : f32) outs(%3808 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3810 = tensor.empty() : tensor<384x512xf32>
    %3811 = linalg.matmul ins(%collapsed_2539, %cst_554 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3809 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3812 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_902, %3811 : tensor<512xf32>, tensor<384x512xf32>) outs(%3810 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2540 = tensor.expand_shape %3812 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3813 = tensor.empty() : tensor<1x384x512xf32>
    %3814 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2540 : tensor<1x384x512xf32>) outs(%3813 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2541 = tensor.collapse_shape %3814 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3815 = tensor.empty() : tensor<384x128xf32>
    %3816 = linalg.fill ins(%cst_607 : f32) outs(%3815 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3817 = tensor.empty() : tensor<384x128xf32>
    %3818 = linalg.matmul ins(%collapsed_2541, %cst_555 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3816 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3819 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_903, %3818 : tensor<128xf32>, tensor<384x128xf32>) outs(%3817 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2542 = tensor.expand_shape %3819 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3820 = tensor.empty() : tensor<1x384x128xf32>
    %3821 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2542, %3807 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3820 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3822 = tensor.empty() : tensor<1x384x128xf32>
    %3823 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3821, %cst_32 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3822 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3824 = tensor.empty() : tensor<1x384x128xf32>
    %3825 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3823, %cst_31 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3824 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2543 = tensor.collapse_shape %3821 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3826 = tensor.empty() : tensor<384x512xf32>
    %3827 = linalg.fill ins(%cst_607 : f32) outs(%3826 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3828 = tensor.empty() : tensor<384x512xf32>
    %3829 = linalg.matmul ins(%collapsed_2543, %cst_556 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3827 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3830 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_904, %3829 : tensor<512xf32>, tensor<384x512xf32>) outs(%3828 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2544 = tensor.expand_shape %3830 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3831 = tensor.empty() : tensor<1x384x512xf32>
    %3832 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2544 : tensor<1x384x512xf32>) outs(%3831 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2545 = tensor.collapse_shape %3832 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3833 = tensor.empty() : tensor<384x128xf32>
    %3834 = linalg.fill ins(%cst_607 : f32) outs(%3833 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3835 = tensor.empty() : tensor<384x128xf32>
    %3836 = linalg.matmul ins(%collapsed_2545, %cst_557 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3834 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3837 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_905, %3836 : tensor<128xf32>, tensor<384x128xf32>) outs(%3835 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2546 = tensor.expand_shape %3837 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3838 = tensor.empty() : tensor<1x384x128xf32>
    %3839 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2546, %3825 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3838 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3840 = tensor.empty() : tensor<1x384x128xf32>
    %3841 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3839, %cst_30 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3840 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3842 = tensor.empty() : tensor<1x384x128xf32>
    %3843 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3841, %cst_29 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3842 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2547 = tensor.collapse_shape %3839 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3844 = tensor.empty() : tensor<384x512xf32>
    %3845 = linalg.fill ins(%cst_607 : f32) outs(%3844 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3846 = tensor.empty() : tensor<384x512xf32>
    %3847 = linalg.matmul ins(%collapsed_2547, %cst_558 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3845 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3848 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_906, %3847 : tensor<512xf32>, tensor<384x512xf32>) outs(%3846 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2548 = tensor.expand_shape %3848 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3849 = tensor.empty() : tensor<1x384x512xf32>
    %3850 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2548 : tensor<1x384x512xf32>) outs(%3849 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2549 = tensor.collapse_shape %3850 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3851 = tensor.empty() : tensor<384x128xf32>
    %3852 = linalg.fill ins(%cst_607 : f32) outs(%3851 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3853 = tensor.empty() : tensor<384x128xf32>
    %3854 = linalg.matmul ins(%collapsed_2549, %cst_559 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3852 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3855 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_907, %3854 : tensor<128xf32>, tensor<384x128xf32>) outs(%3853 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2550 = tensor.expand_shape %3855 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3856 = tensor.empty() : tensor<1x384x128xf32>
    %3857 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2550, %3843 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3856 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2551 = tensor.collapse_shape %3857 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3858 = tensor.empty() : tensor<384x512xf32>
    %3859 = linalg.fill ins(%cst_607 : f32) outs(%3858 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3860 = tensor.empty() : tensor<384x512xf32>
    %3861 = linalg.matmul ins(%collapsed_2551, %cst_560 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3859 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3862 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_908, %3861 : tensor<512xf32>, tensor<384x512xf32>) outs(%3860 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2552 = tensor.expand_shape %3862 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3863 = tensor.empty() : tensor<1x384x512xf32>
    %3864 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2552, %3685 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3863 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %3865 = tensor.empty() : tensor<1x384x512xf32>
    %3866 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3864, %cst_28 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%3865 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %3867 = tensor.empty() : tensor<1x384x512xf32>
    %3868 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3866, %cst_27 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%3867 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2553 = tensor.collapse_shape %3864 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3869 = tensor.empty() : tensor<384x128xf32>
    %3870 = linalg.fill ins(%cst_607 : f32) outs(%3869 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3871 = tensor.empty() : tensor<384x128xf32>
    %3872 = linalg.matmul ins(%collapsed_2553, %cst_561 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3870 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3873 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_909, %3872 : tensor<128xf32>, tensor<384x128xf32>) outs(%3871 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2554 = tensor.expand_shape %3873 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_2555 = tensor.collapse_shape %3864 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3874 = tensor.empty() : tensor<384x128xf32>
    %3875 = linalg.fill ins(%cst_607 : f32) outs(%3874 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3876 = tensor.empty() : tensor<384x128xf32>
    %3877 = linalg.matmul ins(%collapsed_2555, %cst_562 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3875 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3878 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_910, %3877 : tensor<128xf32>, tensor<384x128xf32>) outs(%3876 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2556 = tensor.expand_shape %3878 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_2557 = tensor.collapse_shape %3868 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3879 = tensor.empty() : tensor<384x128xf32>
    %3880 = linalg.fill ins(%cst_607 : f32) outs(%3879 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3881 = tensor.empty() : tensor<384x128xf32>
    %3882 = linalg.matmul ins(%collapsed_2557, %cst_563 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3880 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3883 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %3882 : tensor<128xf32>, tensor<384x128xf32>) outs(%3881 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %3884 = tensor.empty() : tensor<384x128xf32>
    %3885 = linalg.fill ins(%cst_607 : f32) outs(%3884 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3886 = tensor.empty() : tensor<384x128xf32>
    %3887 = linalg.matmul ins(%3883, %cst_564 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3885 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3888 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_911, %3887 : tensor<128xf32>, tensor<384x128xf32>) outs(%3886 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2558 = tensor.expand_shape %3888 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3889 = tensor.empty() : tensor<384x128xf32>
    %3890 = linalg.fill ins(%cst_607 : f32) outs(%3889 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3891 = tensor.empty() : tensor<384x128xf32>
    %3892 = linalg.matmul ins(%3883, %cst_565 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3890 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3893 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_912, %3892 : tensor<128xf32>, tensor<384x128xf32>) outs(%3891 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2559 = tensor.expand_shape %3893 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3894 = tensor.empty() : tensor<1x4x384x32xf32>
    %3895 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2558 : tensor<1x384x4x32xf32>) outs(%3894 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %3896 = tensor.empty() : tensor<1x4x32x384xf32>
    %3897 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2559 : tensor<1x384x4x32xf32>) outs(%3896 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_2560 = tensor.collapse_shape %3895 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2561 = tensor.extract_slice %collapsed_2560[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2562 = tensor.extract_slice %collapsed_2560[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2563 = tensor.extract_slice %collapsed_2560[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2564 = tensor.extract_slice %collapsed_2560[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2565 = tensor.collapse_shape %3897 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2566 = tensor.extract_slice %collapsed_2565[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2567 = tensor.extract_slice %collapsed_2565[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2568 = tensor.extract_slice %collapsed_2565[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2569 = tensor.extract_slice %collapsed_2565[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_2570 = tensor.collapse_shape %extracted_slice_2566 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2571 = tensor.collapse_shape %extracted_slice_2567 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2572 = tensor.collapse_shape %extracted_slice_2568 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2573 = tensor.collapse_shape %extracted_slice_2569 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2574 = tensor.collapse_shape %extracted_slice_2561 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3898 = tensor.empty() : tensor<384x384xf32>
    %3899 = linalg.fill ins(%cst_607 : f32) outs(%3898 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3900 = tensor.empty() : tensor<384x384xf32>
    %3901 = linalg.matmul ins(%collapsed_2574, %collapsed_2570 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3899 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3902 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3901 : tensor<384xf32>, tensor<384x384xf32>) outs(%3900 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2575 = tensor.collapse_shape %extracted_slice_2562 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3903 = tensor.empty() : tensor<384x384xf32>
    %3904 = linalg.fill ins(%cst_607 : f32) outs(%3903 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3905 = tensor.empty() : tensor<384x384xf32>
    %3906 = linalg.matmul ins(%collapsed_2575, %collapsed_2571 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3904 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3907 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3906 : tensor<384xf32>, tensor<384x384xf32>) outs(%3905 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2576 = tensor.collapse_shape %extracted_slice_2563 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3908 = tensor.empty() : tensor<384x384xf32>
    %3909 = linalg.fill ins(%cst_607 : f32) outs(%3908 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3910 = tensor.empty() : tensor<384x384xf32>
    %3911 = linalg.matmul ins(%collapsed_2576, %collapsed_2572 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3909 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3912 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3911 : tensor<384xf32>, tensor<384x384xf32>) outs(%3910 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2577 = tensor.collapse_shape %extracted_slice_2564 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %3913 = tensor.empty() : tensor<384x384xf32>
    %3914 = linalg.fill ins(%cst_607 : f32) outs(%3913 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3915 = tensor.empty() : tensor<384x384xf32>
    %3916 = linalg.matmul ins(%collapsed_2577, %collapsed_2573 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3914 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %3917 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %3916 : tensor<384xf32>, tensor<384x384xf32>) outs(%3915 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %3918 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2578 = tensor.insert_slice %3902 into %3918[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2579 = tensor.insert_slice %3907 into %inserted_slice_2578[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2580 = tensor.insert_slice %3912 into %inserted_slice_2579[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2581 = tensor.insert_slice %3917 into %inserted_slice_2580[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2582 = tensor.expand_shape %inserted_slice_2581 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %3919 = tensor.empty() : tensor<1x4x384x384xf32>
    %3920 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2582 : tensor<1x4x384x384xf32>) outs(%3919 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %3921 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2583 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %3922 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3920, %collapsed_2583 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%3921 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3923 = tensor.empty() : tensor<1x4x384xf32>
    %3924 = linalg.fill ins(%cst_241 : f32) outs(%3923 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3925 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3922 : tensor<1x4x384x384xf32>) outs(%3924 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %3926 = tensor.empty() : tensor<1x4x384x384xf32>
    %3927 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3922, %3925 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3926 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3928 = tensor.empty() : tensor<1x4x384x384xf32>
    %3929 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3927 : tensor<1x4x384x384xf32>) outs(%3928 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3930 = tensor.empty() : tensor<1x4x384xf32>
    %3931 = linalg.fill ins(%cst_607 : f32) outs(%3930 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %3932 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3929 : tensor<1x4x384x384xf32>) outs(%3931 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_2584 = tensor.expand_shape %3932 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3933 = tensor.empty() : tensor<1x4x384x1xf32>
    %3934 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2584 : tensor<1x4x384x1xf32>) outs(%3933 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %3935 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2585 = tensor.collapse_shape %3934 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %3936 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3929, %collapsed_2585 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%3935 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %3937 = tensor.empty() : tensor<1x4x384x32xf32>
    %3938 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2554 : tensor<1x384x4x32xf32>) outs(%3937 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_2586 = tensor.collapse_shape %3936 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2587 = tensor.extract_slice %collapsed_2586[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2588 = tensor.extract_slice %collapsed_2586[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2589 = tensor.extract_slice %collapsed_2586[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2590 = tensor.extract_slice %collapsed_2586[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2591 = tensor.collapse_shape %3938 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2592 = tensor.extract_slice %collapsed_2591[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2593 = tensor.extract_slice %collapsed_2591[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2594 = tensor.extract_slice %collapsed_2591[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2595 = tensor.extract_slice %collapsed_2591[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2596 = tensor.collapse_shape %extracted_slice_2592 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2597 = tensor.collapse_shape %extracted_slice_2593 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2598 = tensor.collapse_shape %extracted_slice_2594 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2599 = tensor.collapse_shape %extracted_slice_2595 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2600 = tensor.collapse_shape %extracted_slice_2587 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3939 = tensor.empty() : tensor<384x32xf32>
    %3940 = linalg.fill ins(%cst_607 : f32) outs(%3939 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3941 = tensor.empty() : tensor<384x32xf32>
    %3942 = linalg.matmul ins(%collapsed_2600, %collapsed_2596 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3940 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3943 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3942 : tensor<32xf32>, tensor<384x32xf32>) outs(%3941 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2601 = tensor.collapse_shape %extracted_slice_2588 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3944 = tensor.empty() : tensor<384x32xf32>
    %3945 = linalg.fill ins(%cst_607 : f32) outs(%3944 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3946 = tensor.empty() : tensor<384x32xf32>
    %3947 = linalg.matmul ins(%collapsed_2601, %collapsed_2597 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3945 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3948 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3947 : tensor<32xf32>, tensor<384x32xf32>) outs(%3946 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2602 = tensor.collapse_shape %extracted_slice_2589 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3949 = tensor.empty() : tensor<384x32xf32>
    %3950 = linalg.fill ins(%cst_607 : f32) outs(%3949 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3951 = tensor.empty() : tensor<384x32xf32>
    %3952 = linalg.matmul ins(%collapsed_2602, %collapsed_2598 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3950 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3953 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3952 : tensor<32xf32>, tensor<384x32xf32>) outs(%3951 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2603 = tensor.collapse_shape %extracted_slice_2590 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %3954 = tensor.empty() : tensor<384x32xf32>
    %3955 = linalg.fill ins(%cst_607 : f32) outs(%3954 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3956 = tensor.empty() : tensor<384x32xf32>
    %3957 = linalg.matmul ins(%collapsed_2603, %collapsed_2599 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3955 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %3958 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %3957 : tensor<32xf32>, tensor<384x32xf32>) outs(%3956 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %3959 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2604 = tensor.insert_slice %3943 into %3959[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2605 = tensor.insert_slice %3948 into %inserted_slice_2604[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2606 = tensor.insert_slice %3953 into %inserted_slice_2605[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2607 = tensor.insert_slice %3958 into %inserted_slice_2606[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2608 = tensor.expand_shape %inserted_slice_2607 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %3960 = tensor.empty() : tensor<1x384x4x32xf32>
    %3961 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2608 : tensor<1x4x384x32xf32>) outs(%3960 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2609 = tensor.collapse_shape %3961 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %3962 = tensor.empty() : tensor<384x128xf32>
    %3963 = linalg.fill ins(%cst_607 : f32) outs(%3962 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3964 = tensor.empty() : tensor<384x128xf32>
    %3965 = linalg.matmul ins(%collapsed_2609, %cst_566 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3963 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3966 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_913, %3965 : tensor<128xf32>, tensor<384x128xf32>) outs(%3964 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2610 = tensor.expand_shape %3966 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3967 = tensor.empty() : tensor<1x384x128xf32>
    %3968 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2610, %expanded_2556 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3967 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3969 = tensor.empty() : tensor<1x384x128xf32>
    %3970 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3968, %cst_26 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3969 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3971 = tensor.empty() : tensor<1x384x128xf32>
    %3972 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3970, %cst_25 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3971 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2611 = tensor.collapse_shape %3968 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3973 = tensor.empty() : tensor<384x512xf32>
    %3974 = linalg.fill ins(%cst_607 : f32) outs(%3973 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3975 = tensor.empty() : tensor<384x512xf32>
    %3976 = linalg.matmul ins(%collapsed_2611, %cst_567 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3974 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3977 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_914, %3976 : tensor<512xf32>, tensor<384x512xf32>) outs(%3975 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2612 = tensor.expand_shape %3977 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3978 = tensor.empty() : tensor<1x384x512xf32>
    %3979 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2612 : tensor<1x384x512xf32>) outs(%3978 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2613 = tensor.collapse_shape %3979 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3980 = tensor.empty() : tensor<384x128xf32>
    %3981 = linalg.fill ins(%cst_607 : f32) outs(%3980 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3982 = tensor.empty() : tensor<384x128xf32>
    %3983 = linalg.matmul ins(%collapsed_2613, %cst_568 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3981 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %3984 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_915, %3983 : tensor<128xf32>, tensor<384x128xf32>) outs(%3982 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2614 = tensor.expand_shape %3984 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3985 = tensor.empty() : tensor<1x384x128xf32>
    %3986 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2614, %3972 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3985 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3987 = tensor.empty() : tensor<1x384x128xf32>
    %3988 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3986, %cst_24 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3987 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %3989 = tensor.empty() : tensor<1x384x128xf32>
    %3990 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3988, %cst_23 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%3989 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2615 = tensor.collapse_shape %3986 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %3991 = tensor.empty() : tensor<384x512xf32>
    %3992 = linalg.fill ins(%cst_607 : f32) outs(%3991 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3993 = tensor.empty() : tensor<384x512xf32>
    %3994 = linalg.matmul ins(%collapsed_2615, %cst_569 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3992 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3995 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_916, %3994 : tensor<512xf32>, tensor<384x512xf32>) outs(%3993 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2616 = tensor.expand_shape %3995 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3996 = tensor.empty() : tensor<1x384x512xf32>
    %3997 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2616 : tensor<1x384x512xf32>) outs(%3996 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2617 = tensor.collapse_shape %3997 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %3998 = tensor.empty() : tensor<384x128xf32>
    %3999 = linalg.fill ins(%cst_607 : f32) outs(%3998 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4000 = tensor.empty() : tensor<384x128xf32>
    %4001 = linalg.matmul ins(%collapsed_2617, %cst_570 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3999 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4002 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_917, %4001 : tensor<128xf32>, tensor<384x128xf32>) outs(%4000 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2618 = tensor.expand_shape %4002 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4003 = tensor.empty() : tensor<1x384x128xf32>
    %4004 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2618, %3990 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4003 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4005 = tensor.empty() : tensor<1x384x128xf32>
    %4006 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4004, %cst_22 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4005 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4007 = tensor.empty() : tensor<1x384x128xf32>
    %4008 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4006, %cst_21 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4007 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2619 = tensor.collapse_shape %4004 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4009 = tensor.empty() : tensor<384x512xf32>
    %4010 = linalg.fill ins(%cst_607 : f32) outs(%4009 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4011 = tensor.empty() : tensor<384x512xf32>
    %4012 = linalg.matmul ins(%collapsed_2619, %cst_571 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4010 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4013 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_918, %4012 : tensor<512xf32>, tensor<384x512xf32>) outs(%4011 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2620 = tensor.expand_shape %4013 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4014 = tensor.empty() : tensor<1x384x512xf32>
    %4015 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2620 : tensor<1x384x512xf32>) outs(%4014 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2621 = tensor.collapse_shape %4015 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4016 = tensor.empty() : tensor<384x128xf32>
    %4017 = linalg.fill ins(%cst_607 : f32) outs(%4016 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4018 = tensor.empty() : tensor<384x128xf32>
    %4019 = linalg.matmul ins(%collapsed_2621, %cst_572 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4017 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4020 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_919, %4019 : tensor<128xf32>, tensor<384x128xf32>) outs(%4018 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2622 = tensor.expand_shape %4020 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4021 = tensor.empty() : tensor<1x384x128xf32>
    %4022 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2622, %4008 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4021 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4023 = tensor.empty() : tensor<1x384x128xf32>
    %4024 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4022, %cst_20 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4023 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4025 = tensor.empty() : tensor<1x384x128xf32>
    %4026 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4024, %cst_19 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4025 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2623 = tensor.collapse_shape %4022 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4027 = tensor.empty() : tensor<384x512xf32>
    %4028 = linalg.fill ins(%cst_607 : f32) outs(%4027 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4029 = tensor.empty() : tensor<384x512xf32>
    %4030 = linalg.matmul ins(%collapsed_2623, %cst_573 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4028 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4031 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_920, %4030 : tensor<512xf32>, tensor<384x512xf32>) outs(%4029 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2624 = tensor.expand_shape %4031 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4032 = tensor.empty() : tensor<1x384x512xf32>
    %4033 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2624 : tensor<1x384x512xf32>) outs(%4032 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2625 = tensor.collapse_shape %4033 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4034 = tensor.empty() : tensor<384x128xf32>
    %4035 = linalg.fill ins(%cst_607 : f32) outs(%4034 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4036 = tensor.empty() : tensor<384x128xf32>
    %4037 = linalg.matmul ins(%collapsed_2625, %cst_574 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4035 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4038 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_921, %4037 : tensor<128xf32>, tensor<384x128xf32>) outs(%4036 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2626 = tensor.expand_shape %4038 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4039 = tensor.empty() : tensor<1x384x128xf32>
    %4040 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2626, %4026 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4039 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2627 = tensor.collapse_shape %4040 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4041 = tensor.empty() : tensor<384x512xf32>
    %4042 = linalg.fill ins(%cst_607 : f32) outs(%4041 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4043 = tensor.empty() : tensor<384x512xf32>
    %4044 = linalg.matmul ins(%collapsed_2627, %cst_575 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4042 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4045 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_922, %4044 : tensor<512xf32>, tensor<384x512xf32>) outs(%4043 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2628 = tensor.expand_shape %4045 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4046 = tensor.empty() : tensor<1x384x512xf32>
    %4047 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2628, %3868 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%4046 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %4048 = tensor.empty() : tensor<1x384x512xf32>
    %4049 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4047, %cst_18 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%4048 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %4050 = tensor.empty() : tensor<1x384x512xf32>
    %4051 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4049, %cst_17 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%4050 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2629 = tensor.collapse_shape %4047 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4052 = tensor.empty() : tensor<384x128xf32>
    %4053 = linalg.fill ins(%cst_607 : f32) outs(%4052 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4054 = tensor.empty() : tensor<384x128xf32>
    %4055 = linalg.matmul ins(%collapsed_2629, %cst_576 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4053 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4056 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_923, %4055 : tensor<128xf32>, tensor<384x128xf32>) outs(%4054 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2630 = tensor.expand_shape %4056 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_2631 = tensor.collapse_shape %4047 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4057 = tensor.empty() : tensor<384x128xf32>
    %4058 = linalg.fill ins(%cst_607 : f32) outs(%4057 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4059 = tensor.empty() : tensor<384x128xf32>
    %4060 = linalg.matmul ins(%collapsed_2631, %cst_577 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4058 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4061 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_924, %4060 : tensor<128xf32>, tensor<384x128xf32>) outs(%4059 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2632 = tensor.expand_shape %4061 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_2633 = tensor.collapse_shape %4051 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4062 = tensor.empty() : tensor<384x128xf32>
    %4063 = linalg.fill ins(%cst_607 : f32) outs(%4062 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4064 = tensor.empty() : tensor<384x128xf32>
    %4065 = linalg.matmul ins(%collapsed_2633, %cst_578 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4063 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4066 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %4065 : tensor<128xf32>, tensor<384x128xf32>) outs(%4064 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %4067 = tensor.empty() : tensor<384x128xf32>
    %4068 = linalg.fill ins(%cst_607 : f32) outs(%4067 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4069 = tensor.empty() : tensor<384x128xf32>
    %4070 = linalg.matmul ins(%4066, %cst_579 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%4068 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4071 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_925, %4070 : tensor<128xf32>, tensor<384x128xf32>) outs(%4069 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2634 = tensor.expand_shape %4071 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %4072 = tensor.empty() : tensor<384x128xf32>
    %4073 = linalg.fill ins(%cst_607 : f32) outs(%4072 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4074 = tensor.empty() : tensor<384x128xf32>
    %4075 = linalg.matmul ins(%4066, %cst_580 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%4073 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4076 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_926, %4075 : tensor<128xf32>, tensor<384x128xf32>) outs(%4074 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2635 = tensor.expand_shape %4076 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %4077 = tensor.empty() : tensor<1x4x384x32xf32>
    %4078 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2634 : tensor<1x384x4x32xf32>) outs(%4077 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %4079 = tensor.empty() : tensor<1x4x32x384xf32>
    %4080 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2635 : tensor<1x384x4x32xf32>) outs(%4079 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_2636 = tensor.collapse_shape %4078 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2637 = tensor.extract_slice %collapsed_2636[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2638 = tensor.extract_slice %collapsed_2636[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2639 = tensor.extract_slice %collapsed_2636[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2640 = tensor.extract_slice %collapsed_2636[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2641 = tensor.collapse_shape %4080 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2642 = tensor.extract_slice %collapsed_2641[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2643 = tensor.extract_slice %collapsed_2641[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2644 = tensor.extract_slice %collapsed_2641[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2645 = tensor.extract_slice %collapsed_2641[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_2646 = tensor.collapse_shape %extracted_slice_2642 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2647 = tensor.collapse_shape %extracted_slice_2643 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2648 = tensor.collapse_shape %extracted_slice_2644 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2649 = tensor.collapse_shape %extracted_slice_2645 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2650 = tensor.collapse_shape %extracted_slice_2637 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %4081 = tensor.empty() : tensor<384x384xf32>
    %4082 = linalg.fill ins(%cst_607 : f32) outs(%4081 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4083 = tensor.empty() : tensor<384x384xf32>
    %4084 = linalg.matmul ins(%collapsed_2650, %collapsed_2646 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%4082 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4085 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %4084 : tensor<384xf32>, tensor<384x384xf32>) outs(%4083 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2651 = tensor.collapse_shape %extracted_slice_2638 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %4086 = tensor.empty() : tensor<384x384xf32>
    %4087 = linalg.fill ins(%cst_607 : f32) outs(%4086 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4088 = tensor.empty() : tensor<384x384xf32>
    %4089 = linalg.matmul ins(%collapsed_2651, %collapsed_2647 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%4087 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4090 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %4089 : tensor<384xf32>, tensor<384x384xf32>) outs(%4088 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2652 = tensor.collapse_shape %extracted_slice_2639 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %4091 = tensor.empty() : tensor<384x384xf32>
    %4092 = linalg.fill ins(%cst_607 : f32) outs(%4091 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4093 = tensor.empty() : tensor<384x384xf32>
    %4094 = linalg.matmul ins(%collapsed_2652, %collapsed_2648 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%4092 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4095 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %4094 : tensor<384xf32>, tensor<384x384xf32>) outs(%4093 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2653 = tensor.collapse_shape %extracted_slice_2640 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %4096 = tensor.empty() : tensor<384x384xf32>
    %4097 = linalg.fill ins(%cst_607 : f32) outs(%4096 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4098 = tensor.empty() : tensor<384x384xf32>
    %4099 = linalg.matmul ins(%collapsed_2653, %collapsed_2649 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%4097 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4100 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %4099 : tensor<384xf32>, tensor<384x384xf32>) outs(%4098 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %4101 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2654 = tensor.insert_slice %4085 into %4101[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2655 = tensor.insert_slice %4090 into %inserted_slice_2654[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2656 = tensor.insert_slice %4095 into %inserted_slice_2655[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2657 = tensor.insert_slice %4100 into %inserted_slice_2656[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2658 = tensor.expand_shape %inserted_slice_2657 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %4102 = tensor.empty() : tensor<1x4x384x384xf32>
    %4103 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2658 : tensor<1x4x384x384xf32>) outs(%4102 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %4104 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2659 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %4105 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4103, %collapsed_2659 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%4104 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %4106 = tensor.empty() : tensor<1x4x384xf32>
    %4107 = linalg.fill ins(%cst_241 : f32) outs(%4106 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %4108 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4105 : tensor<1x4x384x384xf32>) outs(%4107 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %4109 = tensor.empty() : tensor<1x4x384x384xf32>
    %4110 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4105, %4108 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%4109 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %4111 = tensor.empty() : tensor<1x4x384x384xf32>
    %4112 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4110 : tensor<1x4x384x384xf32>) outs(%4111 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %4113 = tensor.empty() : tensor<1x4x384xf32>
    %4114 = linalg.fill ins(%cst_607 : f32) outs(%4113 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %4115 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4112 : tensor<1x4x384x384xf32>) outs(%4114 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_2660 = tensor.expand_shape %4115 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %4116 = tensor.empty() : tensor<1x4x384x1xf32>
    %4117 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2660 : tensor<1x4x384x1xf32>) outs(%4116 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %4118 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2661 = tensor.collapse_shape %4117 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %4119 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4112, %collapsed_2661 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%4118 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %4120 = tensor.empty() : tensor<1x4x384x32xf32>
    %4121 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2630 : tensor<1x384x4x32xf32>) outs(%4120 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_2662 = tensor.collapse_shape %4119 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2663 = tensor.extract_slice %collapsed_2662[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2664 = tensor.extract_slice %collapsed_2662[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2665 = tensor.extract_slice %collapsed_2662[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2666 = tensor.extract_slice %collapsed_2662[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2667 = tensor.collapse_shape %4121 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2668 = tensor.extract_slice %collapsed_2667[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2669 = tensor.extract_slice %collapsed_2667[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2670 = tensor.extract_slice %collapsed_2667[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2671 = tensor.extract_slice %collapsed_2667[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2672 = tensor.collapse_shape %extracted_slice_2668 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2673 = tensor.collapse_shape %extracted_slice_2669 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2674 = tensor.collapse_shape %extracted_slice_2670 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2675 = tensor.collapse_shape %extracted_slice_2671 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2676 = tensor.collapse_shape %extracted_slice_2663 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %4122 = tensor.empty() : tensor<384x32xf32>
    %4123 = linalg.fill ins(%cst_607 : f32) outs(%4122 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4124 = tensor.empty() : tensor<384x32xf32>
    %4125 = linalg.matmul ins(%collapsed_2676, %collapsed_2672 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4123 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4126 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %4125 : tensor<32xf32>, tensor<384x32xf32>) outs(%4124 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2677 = tensor.collapse_shape %extracted_slice_2664 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %4127 = tensor.empty() : tensor<384x32xf32>
    %4128 = linalg.fill ins(%cst_607 : f32) outs(%4127 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4129 = tensor.empty() : tensor<384x32xf32>
    %4130 = linalg.matmul ins(%collapsed_2677, %collapsed_2673 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4128 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4131 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %4130 : tensor<32xf32>, tensor<384x32xf32>) outs(%4129 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2678 = tensor.collapse_shape %extracted_slice_2665 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %4132 = tensor.empty() : tensor<384x32xf32>
    %4133 = linalg.fill ins(%cst_607 : f32) outs(%4132 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4134 = tensor.empty() : tensor<384x32xf32>
    %4135 = linalg.matmul ins(%collapsed_2678, %collapsed_2674 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4133 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4136 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %4135 : tensor<32xf32>, tensor<384x32xf32>) outs(%4134 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2679 = tensor.collapse_shape %extracted_slice_2666 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %4137 = tensor.empty() : tensor<384x32xf32>
    %4138 = linalg.fill ins(%cst_607 : f32) outs(%4137 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4139 = tensor.empty() : tensor<384x32xf32>
    %4140 = linalg.matmul ins(%collapsed_2679, %collapsed_2675 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4138 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4141 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %4140 : tensor<32xf32>, tensor<384x32xf32>) outs(%4139 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %4142 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2680 = tensor.insert_slice %4126 into %4142[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2681 = tensor.insert_slice %4131 into %inserted_slice_2680[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2682 = tensor.insert_slice %4136 into %inserted_slice_2681[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2683 = tensor.insert_slice %4141 into %inserted_slice_2682[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2684 = tensor.expand_shape %inserted_slice_2683 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %4143 = tensor.empty() : tensor<1x384x4x32xf32>
    %4144 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2684 : tensor<1x4x384x32xf32>) outs(%4143 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2685 = tensor.collapse_shape %4144 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %4145 = tensor.empty() : tensor<384x128xf32>
    %4146 = linalg.fill ins(%cst_607 : f32) outs(%4145 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4147 = tensor.empty() : tensor<384x128xf32>
    %4148 = linalg.matmul ins(%collapsed_2685, %cst_581 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%4146 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4149 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_927, %4148 : tensor<128xf32>, tensor<384x128xf32>) outs(%4147 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2686 = tensor.expand_shape %4149 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4150 = tensor.empty() : tensor<1x384x128xf32>
    %4151 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2686, %expanded_2632 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4150 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4152 = tensor.empty() : tensor<1x384x128xf32>
    %4153 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4151, %cst_16 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4152 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4154 = tensor.empty() : tensor<1x384x128xf32>
    %4155 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4153, %cst_15 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4154 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2687 = tensor.collapse_shape %4151 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4156 = tensor.empty() : tensor<384x512xf32>
    %4157 = linalg.fill ins(%cst_607 : f32) outs(%4156 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4158 = tensor.empty() : tensor<384x512xf32>
    %4159 = linalg.matmul ins(%collapsed_2687, %cst_582 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4157 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4160 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_928, %4159 : tensor<512xf32>, tensor<384x512xf32>) outs(%4158 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2688 = tensor.expand_shape %4160 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4161 = tensor.empty() : tensor<1x384x512xf32>
    %4162 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2688 : tensor<1x384x512xf32>) outs(%4161 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2689 = tensor.collapse_shape %4162 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4163 = tensor.empty() : tensor<384x128xf32>
    %4164 = linalg.fill ins(%cst_607 : f32) outs(%4163 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4165 = tensor.empty() : tensor<384x128xf32>
    %4166 = linalg.matmul ins(%collapsed_2689, %cst_583 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4164 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4167 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_929, %4166 : tensor<128xf32>, tensor<384x128xf32>) outs(%4165 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2690 = tensor.expand_shape %4167 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4168 = tensor.empty() : tensor<1x384x128xf32>
    %4169 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2690, %4155 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4168 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4170 = tensor.empty() : tensor<1x384x128xf32>
    %4171 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4169, %cst_14 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4170 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4172 = tensor.empty() : tensor<1x384x128xf32>
    %4173 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4171, %cst_13 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4172 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2691 = tensor.collapse_shape %4169 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4174 = tensor.empty() : tensor<384x512xf32>
    %4175 = linalg.fill ins(%cst_607 : f32) outs(%4174 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4176 = tensor.empty() : tensor<384x512xf32>
    %4177 = linalg.matmul ins(%collapsed_2691, %cst_584 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4175 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4178 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_930, %4177 : tensor<512xf32>, tensor<384x512xf32>) outs(%4176 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2692 = tensor.expand_shape %4178 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4179 = tensor.empty() : tensor<1x384x512xf32>
    %4180 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2692 : tensor<1x384x512xf32>) outs(%4179 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2693 = tensor.collapse_shape %4180 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4181 = tensor.empty() : tensor<384x128xf32>
    %4182 = linalg.fill ins(%cst_607 : f32) outs(%4181 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4183 = tensor.empty() : tensor<384x128xf32>
    %4184 = linalg.matmul ins(%collapsed_2693, %cst_585 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4182 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4185 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_931, %4184 : tensor<128xf32>, tensor<384x128xf32>) outs(%4183 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2694 = tensor.expand_shape %4185 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4186 = tensor.empty() : tensor<1x384x128xf32>
    %4187 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2694, %4173 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4186 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4188 = tensor.empty() : tensor<1x384x128xf32>
    %4189 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4187, %cst_12 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4188 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4190 = tensor.empty() : tensor<1x384x128xf32>
    %4191 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4189, %cst_11 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4190 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2695 = tensor.collapse_shape %4187 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4192 = tensor.empty() : tensor<384x512xf32>
    %4193 = linalg.fill ins(%cst_607 : f32) outs(%4192 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4194 = tensor.empty() : tensor<384x512xf32>
    %4195 = linalg.matmul ins(%collapsed_2695, %cst_586 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4193 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4196 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_932, %4195 : tensor<512xf32>, tensor<384x512xf32>) outs(%4194 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2696 = tensor.expand_shape %4196 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4197 = tensor.empty() : tensor<1x384x512xf32>
    %4198 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2696 : tensor<1x384x512xf32>) outs(%4197 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2697 = tensor.collapse_shape %4198 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4199 = tensor.empty() : tensor<384x128xf32>
    %4200 = linalg.fill ins(%cst_607 : f32) outs(%4199 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4201 = tensor.empty() : tensor<384x128xf32>
    %4202 = linalg.matmul ins(%collapsed_2697, %cst_587 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4200 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4203 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_933, %4202 : tensor<128xf32>, tensor<384x128xf32>) outs(%4201 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2698 = tensor.expand_shape %4203 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4204 = tensor.empty() : tensor<1x384x128xf32>
    %4205 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2698, %4191 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4204 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4206 = tensor.empty() : tensor<1x384x128xf32>
    %4207 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4205, %cst_10 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4206 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4208 = tensor.empty() : tensor<1x384x128xf32>
    %4209 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4207, %cst_9 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4208 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2699 = tensor.collapse_shape %4205 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4210 = tensor.empty() : tensor<384x512xf32>
    %4211 = linalg.fill ins(%cst_607 : f32) outs(%4210 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4212 = tensor.empty() : tensor<384x512xf32>
    %4213 = linalg.matmul ins(%collapsed_2699, %cst_588 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4211 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4214 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_934, %4213 : tensor<512xf32>, tensor<384x512xf32>) outs(%4212 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2700 = tensor.expand_shape %4214 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4215 = tensor.empty() : tensor<1x384x512xf32>
    %4216 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2700 : tensor<1x384x512xf32>) outs(%4215 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2701 = tensor.collapse_shape %4216 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4217 = tensor.empty() : tensor<384x128xf32>
    %4218 = linalg.fill ins(%cst_607 : f32) outs(%4217 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4219 = tensor.empty() : tensor<384x128xf32>
    %4220 = linalg.matmul ins(%collapsed_2701, %cst_589 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4218 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4221 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_935, %4220 : tensor<128xf32>, tensor<384x128xf32>) outs(%4219 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2702 = tensor.expand_shape %4221 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4222 = tensor.empty() : tensor<1x384x128xf32>
    %4223 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2702, %4209 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4222 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2703 = tensor.collapse_shape %4223 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4224 = tensor.empty() : tensor<384x512xf32>
    %4225 = linalg.fill ins(%cst_607 : f32) outs(%4224 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4226 = tensor.empty() : tensor<384x512xf32>
    %4227 = linalg.matmul ins(%collapsed_2703, %cst_590 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4225 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4228 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_936, %4227 : tensor<512xf32>, tensor<384x512xf32>) outs(%4226 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2704 = tensor.expand_shape %4228 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4229 = tensor.empty() : tensor<1x384x512xf32>
    %4230 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2704, %4051 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%4229 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %4231 = tensor.empty() : tensor<1x384x512xf32>
    %4232 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4230, %cst_8 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%4231 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %4233 = tensor.empty() : tensor<1x384x512xf32>
    %4234 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4232, %cst_7 : tensor<1x384x512xf32>, tensor<1x512xf32>) outs(%4233 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2705 = tensor.collapse_shape %4230 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4235 = tensor.empty() : tensor<384x128xf32>
    %4236 = linalg.fill ins(%cst_607 : f32) outs(%4235 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4237 = tensor.empty() : tensor<384x128xf32>
    %4238 = linalg.matmul ins(%collapsed_2705, %cst_591 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4236 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4239 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_937, %4238 : tensor<128xf32>, tensor<384x128xf32>) outs(%4237 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2706 = tensor.expand_shape %4239 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %collapsed_2707 = tensor.collapse_shape %4230 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4240 = tensor.empty() : tensor<384x128xf32>
    %4241 = linalg.fill ins(%cst_607 : f32) outs(%4240 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4242 = tensor.empty() : tensor<384x128xf32>
    %4243 = linalg.matmul ins(%collapsed_2707, %cst_592 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4241 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4244 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_938, %4243 : tensor<128xf32>, tensor<384x128xf32>) outs(%4242 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2708 = tensor.expand_shape %4244 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %collapsed_2709 = tensor.collapse_shape %4234 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4245 = tensor.empty() : tensor<384x128xf32>
    %4246 = linalg.fill ins(%cst_607 : f32) outs(%4245 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4247 = tensor.empty() : tensor<384x128xf32>
    %4248 = linalg.matmul ins(%collapsed_2709, %cst_593 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4246 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4249 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_612, %4248 : tensor<128xf32>, tensor<384x128xf32>) outs(%4247 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %4250 = tensor.empty() : tensor<384x128xf32>
    %4251 = linalg.fill ins(%cst_607 : f32) outs(%4250 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4252 = tensor.empty() : tensor<384x128xf32>
    %4253 = linalg.matmul ins(%4249, %cst_594 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%4251 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4254 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_939, %4253 : tensor<128xf32>, tensor<384x128xf32>) outs(%4252 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2710 = tensor.expand_shape %4254 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %4255 = tensor.empty() : tensor<384x128xf32>
    %4256 = linalg.fill ins(%cst_607 : f32) outs(%4255 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4257 = tensor.empty() : tensor<384x128xf32>
    %4258 = linalg.matmul ins(%4249, %cst_595 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%4256 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4259 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_940, %4258 : tensor<128xf32>, tensor<384x128xf32>) outs(%4257 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2711 = tensor.expand_shape %4259 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %4260 = tensor.empty() : tensor<1x4x384x32xf32>
    %4261 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2710 : tensor<1x384x4x32xf32>) outs(%4260 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %4262 = tensor.empty() : tensor<1x4x32x384xf32>
    %4263 = linalg.generic {indexing_maps = [#map8, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2711 : tensor<1x384x4x32xf32>) outs(%4262 : tensor<1x4x32x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x32x384xf32>
    %collapsed_2712 = tensor.collapse_shape %4261 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2713 = tensor.extract_slice %collapsed_2712[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2714 = tensor.extract_slice %collapsed_2712[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2715 = tensor.extract_slice %collapsed_2712[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2716 = tensor.extract_slice %collapsed_2712[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2717 = tensor.collapse_shape %4263 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2718 = tensor.extract_slice %collapsed_2717[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2719 = tensor.extract_slice %collapsed_2717[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2720 = tensor.extract_slice %collapsed_2717[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %extracted_slice_2721 = tensor.extract_slice %collapsed_2717[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %collapsed_2722 = tensor.collapse_shape %extracted_slice_2718 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2723 = tensor.collapse_shape %extracted_slice_2719 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2724 = tensor.collapse_shape %extracted_slice_2720 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2725 = tensor.collapse_shape %extracted_slice_2721 [[0, 1], [2]] : tensor<1x32x384xf32> into tensor<32x384xf32>
    %collapsed_2726 = tensor.collapse_shape %extracted_slice_2713 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %4264 = tensor.empty() : tensor<384x384xf32>
    %4265 = linalg.fill ins(%cst_607 : f32) outs(%4264 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4266 = tensor.empty() : tensor<384x384xf32>
    %4267 = linalg.matmul ins(%collapsed_2726, %collapsed_2722 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%4265 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4268 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %4267 : tensor<384xf32>, tensor<384x384xf32>) outs(%4266 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2727 = tensor.collapse_shape %extracted_slice_2714 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %4269 = tensor.empty() : tensor<384x384xf32>
    %4270 = linalg.fill ins(%cst_607 : f32) outs(%4269 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4271 = tensor.empty() : tensor<384x384xf32>
    %4272 = linalg.matmul ins(%collapsed_2727, %collapsed_2723 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%4270 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4273 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %4272 : tensor<384xf32>, tensor<384x384xf32>) outs(%4271 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2728 = tensor.collapse_shape %extracted_slice_2715 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %4274 = tensor.empty() : tensor<384x384xf32>
    %4275 = linalg.fill ins(%cst_607 : f32) outs(%4274 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4276 = tensor.empty() : tensor<384x384xf32>
    %4277 = linalg.matmul ins(%collapsed_2728, %collapsed_2724 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%4275 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4278 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %4277 : tensor<384xf32>, tensor<384x384xf32>) outs(%4276 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %collapsed_2729 = tensor.collapse_shape %extracted_slice_2716 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %4279 = tensor.empty() : tensor<384x384xf32>
    %4280 = linalg.fill ins(%cst_607 : f32) outs(%4279 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4281 = tensor.empty() : tensor<384x384xf32>
    %4282 = linalg.matmul ins(%collapsed_2729, %collapsed_2725 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%4280 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %4283 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_611, %4282 : tensor<384xf32>, tensor<384x384xf32>) outs(%4281 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x384xf32>
    %4284 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2730 = tensor.insert_slice %4268 into %4284[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2731 = tensor.insert_slice %4273 into %inserted_slice_2730[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2732 = tensor.insert_slice %4278 into %inserted_slice_2731[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2733 = tensor.insert_slice %4283 into %inserted_slice_2732[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2734 = tensor.expand_shape %inserted_slice_2733 [[0, 1, 2], [3]] : tensor<1536x384xf32> into tensor<1x4x384x384xf32>
    %4285 = tensor.empty() : tensor<1x4x384x384xf32>
    %4286 = linalg.generic {indexing_maps = [#map9, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2734 : tensor<1x4x384x384xf32>) outs(%4285 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x384xf32>
    %4287 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2735 = tensor.collapse_shape %7 [[0, 1], [2], [3]] : tensor<1x1x384x384xf32> into tensor<1x384x384xf32>
    %4288 = linalg.generic {indexing_maps = [#map5, #map10, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4286, %collapsed_2735 : tensor<1x4x384x384xf32>, tensor<1x384x384xf32>) outs(%4287 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %4289 = tensor.empty() : tensor<1x4x384xf32>
    %4290 = linalg.fill ins(%cst_241 : f32) outs(%4289 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %4291 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4288 : tensor<1x4x384x384xf32>) outs(%4290 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.maxf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %4292 = tensor.empty() : tensor<1x4x384x384xf32>
    %4293 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4288, %4291 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%4292 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.subf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %4294 = tensor.empty() : tensor<1x4x384x384xf32>
    %4295 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4293 : tensor<1x4x384x384xf32>) outs(%4294 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = math.exp %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %4296 = tensor.empty() : tensor<1x4x384xf32>
    %4297 = linalg.fill ins(%cst_607 : f32) outs(%4296 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %4298 = linalg.generic {indexing_maps = [#map5, #map11], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%4295 : tensor<1x4x384x384xf32>) outs(%4297 : tensor<1x4x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.addf %in, %out : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384xf32>
    %expanded_2736 = tensor.expand_shape %4298 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %4299 = tensor.empty() : tensor<1x4x384x1xf32>
    %4300 = linalg.generic {indexing_maps = [#map5, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2736 : tensor<1x4x384x1xf32>) outs(%4299 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.divf %cst_240, %in : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x1xf32>
    %4301 = tensor.empty() : tensor<1x4x384x384xf32>
    %collapsed_2737 = tensor.collapse_shape %4300 [[0], [1], [2, 3]] : tensor<1x4x384x1xf32> into tensor<1x4x384xf32>
    %4302 = linalg.generic {indexing_maps = [#map5, #map11, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4295, %collapsed_2737 : tensor<1x4x384x384xf32>, tensor<1x4x384xf32>) outs(%4301 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x4x384x384xf32>
    %4303 = tensor.empty() : tensor<1x4x384x32xf32>
    %4304 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2706 : tensor<1x384x4x32xf32>) outs(%4303 : tensor<1x4x384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x4x384x32xf32>
    %collapsed_2738 = tensor.collapse_shape %4302 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2739 = tensor.extract_slice %collapsed_2738[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2740 = tensor.extract_slice %collapsed_2738[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2741 = tensor.extract_slice %collapsed_2738[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2742 = tensor.extract_slice %collapsed_2738[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2743 = tensor.collapse_shape %4304 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2744 = tensor.extract_slice %collapsed_2743[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2745 = tensor.extract_slice %collapsed_2743[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2746 = tensor.extract_slice %collapsed_2743[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2747 = tensor.extract_slice %collapsed_2743[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2748 = tensor.collapse_shape %extracted_slice_2744 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2749 = tensor.collapse_shape %extracted_slice_2745 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2750 = tensor.collapse_shape %extracted_slice_2746 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2751 = tensor.collapse_shape %extracted_slice_2747 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %collapsed_2752 = tensor.collapse_shape %extracted_slice_2739 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %4305 = tensor.empty() : tensor<384x32xf32>
    %4306 = linalg.fill ins(%cst_607 : f32) outs(%4305 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4307 = tensor.empty() : tensor<384x32xf32>
    %4308 = linalg.matmul ins(%collapsed_2752, %collapsed_2748 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4306 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4309 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %4308 : tensor<32xf32>, tensor<384x32xf32>) outs(%4307 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2753 = tensor.collapse_shape %extracted_slice_2740 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %4310 = tensor.empty() : tensor<384x32xf32>
    %4311 = linalg.fill ins(%cst_607 : f32) outs(%4310 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4312 = tensor.empty() : tensor<384x32xf32>
    %4313 = linalg.matmul ins(%collapsed_2753, %collapsed_2749 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4311 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4314 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %4313 : tensor<32xf32>, tensor<384x32xf32>) outs(%4312 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2754 = tensor.collapse_shape %extracted_slice_2741 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %4315 = tensor.empty() : tensor<384x32xf32>
    %4316 = linalg.fill ins(%cst_607 : f32) outs(%4315 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4317 = tensor.empty() : tensor<384x32xf32>
    %4318 = linalg.matmul ins(%collapsed_2754, %collapsed_2750 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4316 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4319 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %4318 : tensor<32xf32>, tensor<384x32xf32>) outs(%4317 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %collapsed_2755 = tensor.collapse_shape %extracted_slice_2742 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %4320 = tensor.empty() : tensor<384x32xf32>
    %4321 = linalg.fill ins(%cst_607 : f32) outs(%4320 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4322 = tensor.empty() : tensor<384x32xf32>
    %4323 = linalg.matmul ins(%collapsed_2755, %collapsed_2751 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4321 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %4324 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_610, %4323 : tensor<32xf32>, tensor<384x32xf32>) outs(%4322 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x32xf32>
    %4325 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2756 = tensor.insert_slice %4309 into %4325[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2757 = tensor.insert_slice %4314 into %inserted_slice_2756[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2758 = tensor.insert_slice %4319 into %inserted_slice_2757[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2759 = tensor.insert_slice %4324 into %inserted_slice_2758[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2760 = tensor.expand_shape %inserted_slice_2759 [[0, 1, 2], [3]] : tensor<1536x32xf32> into tensor<1x4x384x32xf32>
    %4326 = tensor.empty() : tensor<1x384x4x32xf32>
    %4327 = linalg.generic {indexing_maps = [#map7, #map5], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2760 : tensor<1x4x384x32xf32>) outs(%4326 : tensor<1x384x4x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<1x384x4x32xf32>
    %collapsed_2761 = tensor.collapse_shape %4327 [[0, 1], [2, 3]] : tensor<1x384x4x32xf32> into tensor<384x128xf32>
    %4328 = tensor.empty() : tensor<384x128xf32>
    %4329 = linalg.fill ins(%cst_607 : f32) outs(%4328 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4330 = tensor.empty() : tensor<384x128xf32>
    %4331 = linalg.matmul ins(%collapsed_2761, %cst_596 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%4329 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4332 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_941, %4331 : tensor<128xf32>, tensor<384x128xf32>) outs(%4330 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2762 = tensor.expand_shape %4332 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4333 = tensor.empty() : tensor<1x384x128xf32>
    %4334 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2762, %expanded_2708 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4333 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4335 = tensor.empty() : tensor<1x384x128xf32>
    %4336 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4334, %cst_6 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4335 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4337 = tensor.empty() : tensor<1x384x128xf32>
    %4338 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4336, %cst_5 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4337 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2763 = tensor.collapse_shape %4334 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4339 = tensor.empty() : tensor<384x512xf32>
    %4340 = linalg.fill ins(%cst_607 : f32) outs(%4339 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4341 = tensor.empty() : tensor<384x512xf32>
    %4342 = linalg.matmul ins(%collapsed_2763, %cst_597 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4340 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4343 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_942, %4342 : tensor<512xf32>, tensor<384x512xf32>) outs(%4341 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2764 = tensor.expand_shape %4343 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4344 = tensor.empty() : tensor<1x384x512xf32>
    %4345 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2764 : tensor<1x384x512xf32>) outs(%4344 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2765 = tensor.collapse_shape %4345 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4346 = tensor.empty() : tensor<384x128xf32>
    %4347 = linalg.fill ins(%cst_607 : f32) outs(%4346 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4348 = tensor.empty() : tensor<384x128xf32>
    %4349 = linalg.matmul ins(%collapsed_2765, %cst_598 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4347 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4350 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_943, %4349 : tensor<128xf32>, tensor<384x128xf32>) outs(%4348 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2766 = tensor.expand_shape %4350 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4351 = tensor.empty() : tensor<1x384x128xf32>
    %4352 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2766, %4338 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4351 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4353 = tensor.empty() : tensor<1x384x128xf32>
    %4354 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4352, %cst_4 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4353 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4355 = tensor.empty() : tensor<1x384x128xf32>
    %4356 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4354, %cst_3 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4355 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2767 = tensor.collapse_shape %4352 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4357 = tensor.empty() : tensor<384x512xf32>
    %4358 = linalg.fill ins(%cst_607 : f32) outs(%4357 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4359 = tensor.empty() : tensor<384x512xf32>
    %4360 = linalg.matmul ins(%collapsed_2767, %cst_599 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4358 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4361 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_944, %4360 : tensor<512xf32>, tensor<384x512xf32>) outs(%4359 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2768 = tensor.expand_shape %4361 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4362 = tensor.empty() : tensor<1x384x512xf32>
    %4363 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2768 : tensor<1x384x512xf32>) outs(%4362 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2769 = tensor.collapse_shape %4363 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4364 = tensor.empty() : tensor<384x128xf32>
    %4365 = linalg.fill ins(%cst_607 : f32) outs(%4364 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4366 = tensor.empty() : tensor<384x128xf32>
    %4367 = linalg.matmul ins(%collapsed_2769, %cst_600 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4365 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4368 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_945, %4367 : tensor<128xf32>, tensor<384x128xf32>) outs(%4366 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2770 = tensor.expand_shape %4368 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4369 = tensor.empty() : tensor<1x384x128xf32>
    %4370 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2770, %4356 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4369 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4371 = tensor.empty() : tensor<1x384x128xf32>
    %4372 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4370, %cst_2 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4371 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4373 = tensor.empty() : tensor<1x384x128xf32>
    %4374 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4372, %cst_1 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4373 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2771 = tensor.collapse_shape %4370 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4375 = tensor.empty() : tensor<384x512xf32>
    %4376 = linalg.fill ins(%cst_607 : f32) outs(%4375 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4377 = tensor.empty() : tensor<384x512xf32>
    %4378 = linalg.matmul ins(%collapsed_2771, %cst_601 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4376 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4379 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_946, %4378 : tensor<512xf32>, tensor<384x512xf32>) outs(%4377 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2772 = tensor.expand_shape %4379 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4380 = tensor.empty() : tensor<1x384x512xf32>
    %4381 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2772 : tensor<1x384x512xf32>) outs(%4380 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2773 = tensor.collapse_shape %4381 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4382 = tensor.empty() : tensor<384x128xf32>
    %4383 = linalg.fill ins(%cst_607 : f32) outs(%4382 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4384 = tensor.empty() : tensor<384x128xf32>
    %4385 = linalg.matmul ins(%collapsed_2773, %cst_602 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4383 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4386 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_947, %4385 : tensor<128xf32>, tensor<384x128xf32>) outs(%4384 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2774 = tensor.expand_shape %4386 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4387 = tensor.empty() : tensor<1x384x128xf32>
    %4388 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2774, %4374 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4387 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4389 = tensor.empty() : tensor<1x384x128xf32>
    %4390 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4388, %cst_0 : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4389 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.mulf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %4391 = tensor.empty() : tensor<1x384x128xf32>
    %4392 = linalg.generic {indexing_maps = [#map3, #map1, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4390, %cst : tensor<1x384x128xf32>, tensor<1x128xf32>) outs(%4391 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2775 = tensor.collapse_shape %4388 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4393 = tensor.empty() : tensor<384x512xf32>
    %4394 = linalg.fill ins(%cst_607 : f32) outs(%4393 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4395 = tensor.empty() : tensor<384x512xf32>
    %4396 = linalg.matmul ins(%collapsed_2775, %cst_603 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4394 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4397 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_948, %4396 : tensor<512xf32>, tensor<384x512xf32>) outs(%4395 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2776 = tensor.expand_shape %4397 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4398 = tensor.empty() : tensor<1x384x512xf32>
    %4399 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2776 : tensor<1x384x512xf32>) outs(%4398 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4421 = arith.minf %in, %cst_239 : f32
      %4422 = arith.maxf %4421, %cst_607 : f32
      linalg.yield %4422 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2777 = tensor.collapse_shape %4399 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4400 = tensor.empty() : tensor<384x128xf32>
    %4401 = linalg.fill ins(%cst_607 : f32) outs(%4400 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4402 = tensor.empty() : tensor<384x128xf32>
    %4403 = linalg.matmul ins(%collapsed_2777, %cst_604 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4401 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %4404 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_949, %4403 : tensor<128xf32>, tensor<384x128xf32>) outs(%4402 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x128xf32>
    %expanded_2778 = tensor.expand_shape %4404 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4405 = tensor.empty() : tensor<1x384x128xf32>
    %4406 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2778, %4392 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4405 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2779 = tensor.collapse_shape %4406 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %4407 = tensor.empty() : tensor<384x512xf32>
    %4408 = linalg.fill ins(%cst_607 : f32) outs(%4407 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4409 = tensor.empty() : tensor<384x512xf32>
    %4410 = linalg.matmul ins(%collapsed_2779, %cst_605 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4408 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4411 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_950, %4410 : tensor<512xf32>, tensor<384x512xf32>) outs(%4409 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x512xf32>
    %expanded_2780 = tensor.expand_shape %4411 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4412 = tensor.empty() : tensor<1x384x512xf32>
    %4413 = linalg.generic {indexing_maps = [#map3, #map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2780, %4234 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%4412 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2781 = tensor.collapse_shape %4413 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %4414 = tensor.empty() : tensor<384x2xf32>
    %4415 = linalg.fill ins(%cst_607 : f32) outs(%4414 : tensor<384x2xf32>) -> tensor<384x2xf32>
    %4416 = tensor.empty() : tensor<384x2xf32>
    %4417 = linalg.matmul ins(%collapsed_2781, %cst_606 : tensor<384x512xf32>, tensor<512x2xf32>) outs(%4415 : tensor<384x2xf32>) -> tensor<384x2xf32>
    %4418 = linalg.generic {indexing_maps = [#map6, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%cst_951, %4417 : tensor<2xf32>, tensor<384x2xf32>) outs(%4416 : tensor<384x2xf32>) {
    ^bb0(%in: f32, %in_2787: f32, %out: f32):
      %4421 = arith.addf %in, %in_2787 : f32
      linalg.yield %4421 : f32
    } -> tensor<384x2xf32>
    %expanded_2782 = tensor.expand_shape %4418 [[0, 1], [2]] : tensor<384x2xf32> into tensor<1x384x2xf32>
    %4419 = tensor.empty() : tensor<2x1x384xf32>
    %4420 = linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2782 : tensor<1x384x2xf32>) outs(%4419 : tensor<2x1x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<2x1x384xf32>
    %extracted_slice_2783 = tensor.extract_slice %4420[0, 0, 0] [1, 1, 384] [1, 1, 1] : tensor<2x1x384xf32> to tensor<1x1x384xf32>
    %collapsed_2784 = tensor.collapse_shape %extracted_slice_2783 [[0, 1], [2]] : tensor<1x1x384xf32> into tensor<1x384xf32>
    %extracted_slice_2785 = tensor.extract_slice %4420[1, 0, 0] [1, 1, 384] [1, 1, 1] : tensor<2x1x384xf32> to tensor<1x1x384xf32>
    %collapsed_2786 = tensor.collapse_shape %extracted_slice_2785 [[0, 1], [2]] : tensor<1x1x384xf32> into tensor<1x384xf32>
    return %collapsed_2786, %collapsed_2784 : tensor<1x384xf32>, tensor<1x384xf32>
  }
}

