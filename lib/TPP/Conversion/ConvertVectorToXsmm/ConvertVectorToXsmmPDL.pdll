#include "mlir/Dialect/Func/IR/FuncOps.td"
#include "mlir/Dialect/Vector/IR/VectorOps.td"
#include "mlir/Dialect/Arith/IR/ArithOps.td"
#include "mlir/IR/OpBase.td"
#include "mlir/IR/BuiltinTypes.td"


Constraint ValidateOp(op:Op<vector.contract>,input0:Op<>, input1:Op<>, input2:Op<>, output:Op<>);

Rewrite BuildOpWithBetaZero(op:Op<vector.contract>,input0:Op<vector.transfer_read>, input1:Op<vector.transfer_read>, input2:Op<vector.transfer_read>, betaZero:Op<vector.transfer_write>)->(dispatch:Op<func.callOp>, invoke:Op<func.callOp>);

Rewrite BuildOp(op:Op<vector.contract>,input0:Op<vector.transfer_read>, input1:Op<vector.transfer_read>, input2:Op<vector.transfer_read>)->(dispatch:Op<func.callOp>, invoke:Op<func.callOp>);

Pattern ConvertContractToBrgemmWithBetaZero with recursion{
     let input0 = op<vector.transfer_read>(alloc0:Value, indices0:ValueRange, const0:Value, constIndex0:ValueRange)->(output0:TypeRange);
     let input1 = op<vector.transfer_read>(alloc1:Value, indices1:ValueRange, const0, constIndex1:ValueRange)->(output1:TypeRange);
     let input2 = op<vector.transfer_read>(alloc2:Value, indices2:ValueRange, const0, constIndex2:ValueRange)->(output2:TypeRange);
     let cst = op<arith.constant>()->(constantVector:AnyVector);
     let betaZero = op<vector.transfer_write>(cst, alloc2, input3:ValueRange, input4:ValueRange);
     let root = op<vector.contract>(input0, input1, input2)->(output:TypeRange);
     let contractOutput = op<vector.transfer_write>(root, alloc2, outIndices:ValueRange, outBounds:ValueRange);
     ValidateOp(root, input0, input1, input2, contractOutput);

     rewrite root with{
	let replacement = BuildOpWithBetaZero(root, input0, input1, input2, contractOutput);
     	replace root with (replacement.dispatch, replacement.invoke);
        erase contractOutput;
	erase betaZero;
     };
}

Pattern ConvertContractToBrgemm{
     let input0 = op<vector.transfer_read>(alloc0:Value, indices0:ValueRange, const0:Value, constIndex0:ValueRange)->(output0:TypeRange);
     let input1 = op<vector.transfer_read>(alloc1:Value, indices1:ValueRange, const1:Value, constIndex1:ValueRange)->(output1:TypeRange);
     let input2 = op<vector.transfer_read>(alloc2:Value, indices2:ValueRange, const2:Value, constIndex2:ValueRange)->(output2:TypeRange);
     let root = op<vector.contract>(input0, input1, input2)->(output:TypeRange);
     let rootOutput = op<vector.transfer_write>(root, alloc2, outindices:ValueRange, constIndex3:ValueRange);
     ValidateOp(root, input0, input1, input2, rootOutput);
     rewrite root with{
	let replacement = BuildOp(root, input0, input1, input2);
     	erase rootOutput;
     };
}
