#include "mlir/Dialect/Func/IR/FuncOps.td"
#include "mlir/Dialect/Vector/IR/VectorOps.td"
#include "mlir/Dialect/Arith/IR/ArithOps.td"
#include "mlir/IR/OpBase.td"
#include "mlir/IR/BuiltinTypes.td"


Rewrite ConvertTranspose(op:Op<vector.transpose>, input0:Op<vector.transfer_read>, output: Op<vector.transfer_write>, outputType:TypeRange)->(dispatch:Op<func.callOp>, invoke:Op<func.callOp>);

Constraint ValidateTranspose(op:Op<vector.transpose>, input0:Op<vector.transfer_read>, output:Op<vector.transfer_write>, outputType:TypeRange);

Pattern ConvertTransposePattern{
     let input0 = op<vector.transfer_read>(alloc0:Value, indices0:ValueRange, const0:Value, constIndex:ValueRange)->(output:TypeRange);
     let transpose = op<vector.transpose>(input0)->(transposeOutput0:Type);
     let output0 = op<vector.transfer_write>(transpose, alloc1:Value, outindices:ValueRange, constIndex2:ValueRange)->(typeRange:TypeRange);
     ValidateTranspose(transpose, input0, output0, transposeOutput0);
     rewrite transpose with{
        let replacement = ConvertTranspose(transpose, input0, output0, transposeOutput0);
        replace transpose with (replacement.dispatch, replacement.invoke);
        erase output0;
     };
}
